
Thermal_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b10  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003bd0  08003bd0  00004bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c58  08003c58  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003c58  08003c58  0000505c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003c58  08003c58  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c58  08003c58  00004c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c5c  08003c5c  00004c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003c60  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c8  2000005c  08003cbc  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000624  08003cbc  00005624  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b3a  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e69  00000000  00000000  00016bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  00019a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb7  00000000  00000000  0001a950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a947  00000000  00000000  0001b507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000167f8  00000000  00000000  00035e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092b2a  00000000  00000000  0004c646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df170  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003984  00000000  00000000  000df1b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000e2b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003bb8 	.word	0x08003bb8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08003bb8 	.word	0x08003bb8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	0018      	movs	r0, r3
 800024e:	230c      	movs	r3, #12
 8000250:	001a      	movs	r2, r3
 8000252:	2100      	movs	r1, #0
 8000254:	f003 f836 	bl	80032c4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000258:	4b33      	ldr	r3, [pc, #204]	@ (8000328 <MX_ADC_Init+0xe4>)
 800025a:	4a34      	ldr	r2, [pc, #208]	@ (800032c <MX_ADC_Init+0xe8>)
 800025c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800025e:	4b32      	ldr	r3, [pc, #200]	@ (8000328 <MX_ADC_Init+0xe4>)
 8000260:	2200      	movs	r2, #0
 8000262:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000264:	4b30      	ldr	r3, [pc, #192]	@ (8000328 <MX_ADC_Init+0xe4>)
 8000266:	2200      	movs	r2, #0
 8000268:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800026a:	4b2f      	ldr	r3, [pc, #188]	@ (8000328 <MX_ADC_Init+0xe4>)
 800026c:	2200      	movs	r2, #0
 800026e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000270:	4b2d      	ldr	r3, [pc, #180]	@ (8000328 <MX_ADC_Init+0xe4>)
 8000272:	2201      	movs	r2, #1
 8000274:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000276:	4b2c      	ldr	r3, [pc, #176]	@ (8000328 <MX_ADC_Init+0xe4>)
 8000278:	2204      	movs	r2, #4
 800027a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800027c:	4b2a      	ldr	r3, [pc, #168]	@ (8000328 <MX_ADC_Init+0xe4>)
 800027e:	2200      	movs	r2, #0
 8000280:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000282:	4b29      	ldr	r3, [pc, #164]	@ (8000328 <MX_ADC_Init+0xe4>)
 8000284:	2200      	movs	r2, #0
 8000286:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000288:	4b27      	ldr	r3, [pc, #156]	@ (8000328 <MX_ADC_Init+0xe4>)
 800028a:	2200      	movs	r2, #0
 800028c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800028e:	4b26      	ldr	r3, [pc, #152]	@ (8000328 <MX_ADC_Init+0xe4>)
 8000290:	2200      	movs	r2, #0
 8000292:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000294:	4b24      	ldr	r3, [pc, #144]	@ (8000328 <MX_ADC_Init+0xe4>)
 8000296:	22c2      	movs	r2, #194	@ 0xc2
 8000298:	32ff      	adds	r2, #255	@ 0xff
 800029a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800029c:	4b22      	ldr	r3, [pc, #136]	@ (8000328 <MX_ADC_Init+0xe4>)
 800029e:	2200      	movs	r2, #0
 80002a0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80002a2:	4b21      	ldr	r3, [pc, #132]	@ (8000328 <MX_ADC_Init+0xe4>)
 80002a4:	2224      	movs	r2, #36	@ 0x24
 80002a6:	2100      	movs	r1, #0
 80002a8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80002aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000328 <MX_ADC_Init+0xe4>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80002b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000328 <MX_ADC_Init+0xe4>)
 80002b2:	0018      	movs	r0, r3
 80002b4:	f000 fcea 	bl	8000c8c <HAL_ADC_Init>
 80002b8:	1e03      	subs	r3, r0, #0
 80002ba:	d001      	beq.n	80002c0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80002bc:	f000 fa4e 	bl	800075c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2280      	movs	r2, #128	@ 0x80
 80002ca:	0152      	lsls	r2, r2, #5
 80002cc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2280      	movs	r2, #128	@ 0x80
 80002d2:	0552      	lsls	r2, r2, #21
 80002d4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002d6:	1d3a      	adds	r2, r7, #4
 80002d8:	4b13      	ldr	r3, [pc, #76]	@ (8000328 <MX_ADC_Init+0xe4>)
 80002da:	0011      	movs	r1, r2
 80002dc:	0018      	movs	r0, r3
 80002de:	f000 fe75 	bl	8000fcc <HAL_ADC_ConfigChannel>
 80002e2:	1e03      	subs	r3, r0, #0
 80002e4:	d001      	beq.n	80002ea <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80002e6:	f000 fa39 	bl	800075c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2201      	movs	r2, #1
 80002ee:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002f0:	1d3a      	adds	r2, r7, #4
 80002f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000328 <MX_ADC_Init+0xe4>)
 80002f4:	0011      	movs	r1, r2
 80002f6:	0018      	movs	r0, r3
 80002f8:	f000 fe68 	bl	8000fcc <HAL_ADC_ConfigChannel>
 80002fc:	1e03      	subs	r3, r0, #0
 80002fe:	d001      	beq.n	8000304 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000300:	f000 fa2c 	bl	800075c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	2202      	movs	r2, #2
 8000308:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800030a:	1d3a      	adds	r2, r7, #4
 800030c:	4b06      	ldr	r3, [pc, #24]	@ (8000328 <MX_ADC_Init+0xe4>)
 800030e:	0011      	movs	r1, r2
 8000310:	0018      	movs	r0, r3
 8000312:	f000 fe5b 	bl	8000fcc <HAL_ADC_ConfigChannel>
 8000316:	1e03      	subs	r3, r0, #0
 8000318:	d001      	beq.n	800031e <MX_ADC_Init+0xda>
  {
    Error_Handler();
 800031a:	f000 fa1f 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800031e:	46c0      	nop			@ (mov r8, r8)
 8000320:	46bd      	mov	sp, r7
 8000322:	b004      	add	sp, #16
 8000324:	bd80      	pop	{r7, pc}
 8000326:	46c0      	nop			@ (mov r8, r8)
 8000328:	20000078 	.word	0x20000078
 800032c:	40012400 	.word	0x40012400

08000330 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000330:	b590      	push	{r4, r7, lr}
 8000332:	b08b      	sub	sp, #44	@ 0x2c
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000338:	2414      	movs	r4, #20
 800033a:	193b      	adds	r3, r7, r4
 800033c:	0018      	movs	r0, r3
 800033e:	2314      	movs	r3, #20
 8000340:	001a      	movs	r2, r3
 8000342:	2100      	movs	r1, #0
 8000344:	f002 ffbe 	bl	80032c4 <memset>
  if(adcHandle->Instance==ADC1)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a19      	ldr	r2, [pc, #100]	@ (80003b4 <HAL_ADC_MspInit+0x84>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d12b      	bne.n	80003aa <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000352:	4b19      	ldr	r3, [pc, #100]	@ (80003b8 <HAL_ADC_MspInit+0x88>)
 8000354:	699a      	ldr	r2, [r3, #24]
 8000356:	4b18      	ldr	r3, [pc, #96]	@ (80003b8 <HAL_ADC_MspInit+0x88>)
 8000358:	2180      	movs	r1, #128	@ 0x80
 800035a:	0089      	lsls	r1, r1, #2
 800035c:	430a      	orrs	r2, r1
 800035e:	619a      	str	r2, [r3, #24]
 8000360:	4b15      	ldr	r3, [pc, #84]	@ (80003b8 <HAL_ADC_MspInit+0x88>)
 8000362:	699a      	ldr	r2, [r3, #24]
 8000364:	2380      	movs	r3, #128	@ 0x80
 8000366:	009b      	lsls	r3, r3, #2
 8000368:	4013      	ands	r3, r2
 800036a:	613b      	str	r3, [r7, #16]
 800036c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800036e:	4b12      	ldr	r3, [pc, #72]	@ (80003b8 <HAL_ADC_MspInit+0x88>)
 8000370:	695a      	ldr	r2, [r3, #20]
 8000372:	4b11      	ldr	r3, [pc, #68]	@ (80003b8 <HAL_ADC_MspInit+0x88>)
 8000374:	2180      	movs	r1, #128	@ 0x80
 8000376:	0289      	lsls	r1, r1, #10
 8000378:	430a      	orrs	r2, r1
 800037a:	615a      	str	r2, [r3, #20]
 800037c:	4b0e      	ldr	r3, [pc, #56]	@ (80003b8 <HAL_ADC_MspInit+0x88>)
 800037e:	695a      	ldr	r2, [r3, #20]
 8000380:	2380      	movs	r3, #128	@ 0x80
 8000382:	029b      	lsls	r3, r3, #10
 8000384:	4013      	ands	r3, r2
 8000386:	60fb      	str	r3, [r7, #12]
 8000388:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800038a:	193b      	adds	r3, r7, r4
 800038c:	2207      	movs	r2, #7
 800038e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000390:	193b      	adds	r3, r7, r4
 8000392:	2203      	movs	r2, #3
 8000394:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000396:	193b      	adds	r3, r7, r4
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039c:	193a      	adds	r2, r7, r4
 800039e:	2390      	movs	r3, #144	@ 0x90
 80003a0:	05db      	lsls	r3, r3, #23
 80003a2:	0011      	movs	r1, r2
 80003a4:	0018      	movs	r0, r3
 80003a6:	f001 f857 	bl	8001458 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003aa:	46c0      	nop			@ (mov r8, r8)
 80003ac:	46bd      	mov	sp, r7
 80003ae:	b00b      	add	sp, #44	@ 0x2c
 80003b0:	bd90      	pop	{r4, r7, pc}
 80003b2:	46c0      	nop			@ (mov r8, r8)
 80003b4:	40012400 	.word	0x40012400
 80003b8:	40021000 	.word	0x40021000

080003bc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80003bc:	b590      	push	{r4, r7, lr}
 80003be:	b089      	sub	sp, #36	@ 0x24
 80003c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c2:	240c      	movs	r4, #12
 80003c4:	193b      	adds	r3, r7, r4
 80003c6:	0018      	movs	r0, r3
 80003c8:	2314      	movs	r3, #20
 80003ca:	001a      	movs	r2, r3
 80003cc:	2100      	movs	r1, #0
 80003ce:	f002 ff79 	bl	80032c4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003d2:	4b38      	ldr	r3, [pc, #224]	@ (80004b4 <MX_GPIO_Init+0xf8>)
 80003d4:	695a      	ldr	r2, [r3, #20]
 80003d6:	4b37      	ldr	r3, [pc, #220]	@ (80004b4 <MX_GPIO_Init+0xf8>)
 80003d8:	2180      	movs	r1, #128	@ 0x80
 80003da:	03c9      	lsls	r1, r1, #15
 80003dc:	430a      	orrs	r2, r1
 80003de:	615a      	str	r2, [r3, #20]
 80003e0:	4b34      	ldr	r3, [pc, #208]	@ (80004b4 <MX_GPIO_Init+0xf8>)
 80003e2:	695a      	ldr	r2, [r3, #20]
 80003e4:	2380      	movs	r3, #128	@ 0x80
 80003e6:	03db      	lsls	r3, r3, #15
 80003e8:	4013      	ands	r3, r2
 80003ea:	60bb      	str	r3, [r7, #8]
 80003ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ee:	4b31      	ldr	r3, [pc, #196]	@ (80004b4 <MX_GPIO_Init+0xf8>)
 80003f0:	695a      	ldr	r2, [r3, #20]
 80003f2:	4b30      	ldr	r3, [pc, #192]	@ (80004b4 <MX_GPIO_Init+0xf8>)
 80003f4:	2180      	movs	r1, #128	@ 0x80
 80003f6:	0289      	lsls	r1, r1, #10
 80003f8:	430a      	orrs	r2, r1
 80003fa:	615a      	str	r2, [r3, #20]
 80003fc:	4b2d      	ldr	r3, [pc, #180]	@ (80004b4 <MX_GPIO_Init+0xf8>)
 80003fe:	695a      	ldr	r2, [r3, #20]
 8000400:	2380      	movs	r3, #128	@ 0x80
 8000402:	029b      	lsls	r3, r3, #10
 8000404:	4013      	ands	r3, r2
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800040a:	4b2a      	ldr	r3, [pc, #168]	@ (80004b4 <MX_GPIO_Init+0xf8>)
 800040c:	695a      	ldr	r2, [r3, #20]
 800040e:	4b29      	ldr	r3, [pc, #164]	@ (80004b4 <MX_GPIO_Init+0xf8>)
 8000410:	2180      	movs	r1, #128	@ 0x80
 8000412:	02c9      	lsls	r1, r1, #11
 8000414:	430a      	orrs	r2, r1
 8000416:	615a      	str	r2, [r3, #20]
 8000418:	4b26      	ldr	r3, [pc, #152]	@ (80004b4 <MX_GPIO_Init+0xf8>)
 800041a:	695a      	ldr	r2, [r3, #20]
 800041c:	2380      	movs	r3, #128	@ 0x80
 800041e:	02db      	lsls	r3, r3, #11
 8000420:	4013      	ands	r3, r2
 8000422:	603b      	str	r3, [r7, #0]
 8000424:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin|GPIO2_Pin|GPIO3_Pin, GPIO_PIN_RESET);
 8000426:	4924      	ldr	r1, [pc, #144]	@ (80004b8 <MX_GPIO_Init+0xfc>)
 8000428:	2390      	movs	r3, #144	@ 0x90
 800042a:	05db      	lsls	r3, r3, #23
 800042c:	2200      	movs	r2, #0
 800042e:	0018      	movs	r0, r3
 8000430:	f001 f97a 	bl	8001728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO0_Pin|GPIO1_Pin|LED_G_Pin|LED_Y_Pin
 8000434:	4b21      	ldr	r3, [pc, #132]	@ (80004bc <MX_GPIO_Init+0x100>)
 8000436:	2200      	movs	r2, #0
 8000438:	21e3      	movs	r1, #227	@ 0xe3
 800043a:	0018      	movs	r0, r3
 800043c:	f001 f974 	bl	8001728 <HAL_GPIO_WritePin>
                          |LED_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SPI1_NSS_Pin GPIO2_Pin GPIO3_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin|GPIO2_Pin|GPIO3_Pin;
 8000440:	193b      	adds	r3, r7, r4
 8000442:	4a1d      	ldr	r2, [pc, #116]	@ (80004b8 <MX_GPIO_Init+0xfc>)
 8000444:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000446:	193b      	adds	r3, r7, r4
 8000448:	2201      	movs	r2, #1
 800044a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044c:	193b      	adds	r3, r7, r4
 800044e:	2200      	movs	r2, #0
 8000450:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000452:	193b      	adds	r3, r7, r4
 8000454:	2200      	movs	r2, #0
 8000456:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000458:	193a      	adds	r2, r7, r4
 800045a:	2390      	movs	r3, #144	@ 0x90
 800045c:	05db      	lsls	r3, r3, #23
 800045e:	0011      	movs	r1, r2
 8000460:	0018      	movs	r0, r3
 8000462:	f000 fff9 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO0_Pin GPIO1_Pin LED_G_Pin LED_Y_Pin
                           LED_R_Pin */
  GPIO_InitStruct.Pin = GPIO0_Pin|GPIO1_Pin|LED_G_Pin|LED_Y_Pin
 8000466:	193b      	adds	r3, r7, r4
 8000468:	22e3      	movs	r2, #227	@ 0xe3
 800046a:	601a      	str	r2, [r3, #0]
                          |LED_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046c:	193b      	adds	r3, r7, r4
 800046e:	2201      	movs	r2, #1
 8000470:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	193b      	adds	r3, r7, r4
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000478:	193b      	adds	r3, r7, r4
 800047a:	2200      	movs	r2, #0
 800047c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800047e:	193b      	adds	r3, r7, r4
 8000480:	4a0e      	ldr	r2, [pc, #56]	@ (80004bc <MX_GPIO_Init+0x100>)
 8000482:	0019      	movs	r1, r3
 8000484:	0010      	movs	r0, r2
 8000486:	f000 ffe7 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWM__SIN_Pin BUTTON_Pin */
  GPIO_InitStruct.Pin = PWM__SIN_Pin|BUTTON_Pin;
 800048a:	0021      	movs	r1, r4
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2218      	movs	r2, #24
 8000490:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2200      	movs	r2, #0
 8000496:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	4a06      	ldr	r2, [pc, #24]	@ (80004bc <MX_GPIO_Init+0x100>)
 80004a2:	0019      	movs	r1, r3
 80004a4:	0010      	movs	r0, r2
 80004a6:	f000 ffd7 	bl	8001458 <HAL_GPIO_Init>

}
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	46bd      	mov	sp, r7
 80004ae:	b009      	add	sp, #36	@ 0x24
 80004b0:	bd90      	pop	{r4, r7, pc}
 80004b2:	46c0      	nop			@ (mov r8, r8)
 80004b4:	40021000 	.word	0x40021000
 80004b8:	00008110 	.word	0x00008110
 80004bc:	48000400 	.word	0x48000400

080004c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000534 <MX_I2C1_Init+0x74>)
 80004c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000538 <MX_I2C1_Init+0x78>)
 80004c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80004ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000534 <MX_I2C1_Init+0x74>)
 80004cc:	4a1b      	ldr	r2, [pc, #108]	@ (800053c <MX_I2C1_Init+0x7c>)
 80004ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004d0:	4b18      	ldr	r3, [pc, #96]	@ (8000534 <MX_I2C1_Init+0x74>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004d6:	4b17      	ldr	r3, [pc, #92]	@ (8000534 <MX_I2C1_Init+0x74>)
 80004d8:	2201      	movs	r2, #1
 80004da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004dc:	4b15      	ldr	r3, [pc, #84]	@ (8000534 <MX_I2C1_Init+0x74>)
 80004de:	2200      	movs	r2, #0
 80004e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004e2:	4b14      	ldr	r3, [pc, #80]	@ (8000534 <MX_I2C1_Init+0x74>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004e8:	4b12      	ldr	r3, [pc, #72]	@ (8000534 <MX_I2C1_Init+0x74>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004ee:	4b11      	ldr	r3, [pc, #68]	@ (8000534 <MX_I2C1_Init+0x74>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000534 <MX_I2C1_Init+0x74>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000534 <MX_I2C1_Init+0x74>)
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 f931 	bl	8001764 <HAL_I2C_Init>
 8000502:	1e03      	subs	r3, r0, #0
 8000504:	d001      	beq.n	800050a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000506:	f000 f929 	bl	800075c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800050a:	4b0a      	ldr	r3, [pc, #40]	@ (8000534 <MX_I2C1_Init+0x74>)
 800050c:	2100      	movs	r1, #0
 800050e:	0018      	movs	r0, r3
 8000510:	f001 f9ce 	bl	80018b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000514:	1e03      	subs	r3, r0, #0
 8000516:	d001      	beq.n	800051c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000518:	f000 f920 	bl	800075c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800051c:	4b05      	ldr	r3, [pc, #20]	@ (8000534 <MX_I2C1_Init+0x74>)
 800051e:	2100      	movs	r1, #0
 8000520:	0018      	movs	r0, r3
 8000522:	f001 fa11 	bl	8001948 <HAL_I2CEx_ConfigDigitalFilter>
 8000526:	1e03      	subs	r3, r0, #0
 8000528:	d001      	beq.n	800052e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800052a:	f000 f917 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800052e:	46c0      	nop			@ (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	200000b8 	.word	0x200000b8
 8000538:	40005400 	.word	0x40005400
 800053c:	00201d2b 	.word	0x00201d2b

08000540 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000540:	b590      	push	{r4, r7, lr}
 8000542:	b08b      	sub	sp, #44	@ 0x2c
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000548:	2414      	movs	r4, #20
 800054a:	193b      	adds	r3, r7, r4
 800054c:	0018      	movs	r0, r3
 800054e:	2314      	movs	r3, #20
 8000550:	001a      	movs	r2, r3
 8000552:	2100      	movs	r1, #0
 8000554:	f002 feb6 	bl	80032c4 <memset>
  if(i2cHandle->Instance==I2C1)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a1c      	ldr	r2, [pc, #112]	@ (80005d0 <HAL_I2C_MspInit+0x90>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d131      	bne.n	80005c6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000562:	4b1c      	ldr	r3, [pc, #112]	@ (80005d4 <HAL_I2C_MspInit+0x94>)
 8000564:	695a      	ldr	r2, [r3, #20]
 8000566:	4b1b      	ldr	r3, [pc, #108]	@ (80005d4 <HAL_I2C_MspInit+0x94>)
 8000568:	2180      	movs	r1, #128	@ 0x80
 800056a:	03c9      	lsls	r1, r1, #15
 800056c:	430a      	orrs	r2, r1
 800056e:	615a      	str	r2, [r3, #20]
 8000570:	4b18      	ldr	r3, [pc, #96]	@ (80005d4 <HAL_I2C_MspInit+0x94>)
 8000572:	695a      	ldr	r2, [r3, #20]
 8000574:	2380      	movs	r3, #128	@ 0x80
 8000576:	03db      	lsls	r3, r3, #15
 8000578:	4013      	ands	r3, r2
 800057a:	613b      	str	r3, [r7, #16]
 800057c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PF0-OSC_IN     ------> I2C1_SDA
    PF1-OSC_OUT     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800057e:	0021      	movs	r1, r4
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2203      	movs	r2, #3
 8000584:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2212      	movs	r2, #18
 800058a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2203      	movs	r2, #3
 8000596:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2201      	movs	r2, #1
 800059c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	4a0d      	ldr	r2, [pc, #52]	@ (80005d8 <HAL_I2C_MspInit+0x98>)
 80005a2:	0019      	movs	r1, r3
 80005a4:	0010      	movs	r0, r2
 80005a6:	f000 ff57 	bl	8001458 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005aa:	4b0a      	ldr	r3, [pc, #40]	@ (80005d4 <HAL_I2C_MspInit+0x94>)
 80005ac:	69da      	ldr	r2, [r3, #28]
 80005ae:	4b09      	ldr	r3, [pc, #36]	@ (80005d4 <HAL_I2C_MspInit+0x94>)
 80005b0:	2180      	movs	r1, #128	@ 0x80
 80005b2:	0389      	lsls	r1, r1, #14
 80005b4:	430a      	orrs	r2, r1
 80005b6:	61da      	str	r2, [r3, #28]
 80005b8:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <HAL_I2C_MspInit+0x94>)
 80005ba:	69da      	ldr	r2, [r3, #28]
 80005bc:	2380      	movs	r3, #128	@ 0x80
 80005be:	039b      	lsls	r3, r3, #14
 80005c0:	4013      	ands	r3, r2
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b00b      	add	sp, #44	@ 0x2c
 80005cc:	bd90      	pop	{r4, r7, pc}
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	40005400 	.word	0x40005400
 80005d4:	40021000 	.word	0x40021000
 80005d8:	48001400 	.word	0x48001400

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08e      	sub	sp, #56	@ 0x38
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 facb 	bl	8000b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f845 	bl	8000674 <SystemClock_Config>
  //uint16_t t_sens_adc;
  uint32_t t_x_adc;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f7ff fee7 	bl	80003bc <MX_GPIO_Init>
  MX_ADC_Init();
 80005ee:	f7ff fe29 	bl	8000244 <MX_ADC_Init>
  MX_I2C1_Init();
 80005f2:	f7ff ff65 	bl	80004c0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80005f6:	f000 f8b7 	bl	8000768 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80005fa:	f000 f9b9 	bl	8000970 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80005fe:	f000 fa35 	bl	8000a6c <MX_USB_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADC_Start(&hadc);
 8000602:	4b18      	ldr	r3, [pc, #96]	@ (8000664 <main+0x88>)
 8000604:	0018      	movs	r0, r3
 8000606:	f000 fc81 	bl	8000f0c <HAL_ADC_Start>
  HAL_UART_Transmit(&huart1, (uint8_t*)"UART status OK", sizeof("UART status OK") , 1000);
 800060a:	23fa      	movs	r3, #250	@ 0xfa
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	4916      	ldr	r1, [pc, #88]	@ (8000668 <main+0x8c>)
 8000610:	4816      	ldr	r0, [pc, #88]	@ (800066c <main+0x90>)
 8000612:	220f      	movs	r2, #15
 8000614:	f002 f9ee 	bl	80029f4 <HAL_UART_Transmit>
  while (1)
  {
	  t_x_adc = HAL_ADC_GetValue(&hadc); // lettura sensore temperatura analogico
 8000618:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <main+0x88>)
 800061a:	0018      	movs	r0, r3
 800061c:	f000 fcca 	bl	8000fb4 <HAL_ADC_GetValue>
 8000620:	0003      	movs	r3, r0
 8000622:	637b      	str	r3, [r7, #52]	@ 0x34
	  //HAL_ADC_Stop(&hadc);
	  memset(str,0,sizeof(str));
 8000624:	003b      	movs	r3, r7
 8000626:	2232      	movs	r2, #50	@ 0x32
 8000628:	2100      	movs	r1, #0
 800062a:	0018      	movs	r0, r3
 800062c:	f002 fe4a 	bl	80032c4 <memset>
	  //x = 20.3;
	  //uint16_t temp_c = 20;//((uint32_t)adc * 340u + 2048u) >> 12;
	  sprintf((char*)str, "temp: %ld \n",t_x_adc);
 8000630:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000632:	490f      	ldr	r1, [pc, #60]	@ (8000670 <main+0x94>)
 8000634:	003b      	movs	r3, r7
 8000636:	0018      	movs	r0, r3
 8000638:	f002 fe22 	bl	8003280 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)&str, strlen((char*)str), 1000);
 800063c:	003b      	movs	r3, r7
 800063e:	0018      	movs	r0, r3
 8000640:	f7ff fd62 	bl	8000108 <strlen>
 8000644:	0003      	movs	r3, r0
 8000646:	b29a      	uxth	r2, r3
 8000648:	23fa      	movs	r3, #250	@ 0xfa
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	0039      	movs	r1, r7
 800064e:	4807      	ldr	r0, [pc, #28]	@ (800066c <main+0x90>)
 8000650:	f002 f9d0 	bl	80029f4 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000654:	23fa      	movs	r3, #250	@ 0xfa
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	0018      	movs	r0, r3
 800065a:	f000 faf3 	bl	8000c44 <HAL_Delay>
	  t_x_adc = HAL_ADC_GetValue(&hadc); // lettura sensore temperatura analogico
 800065e:	46c0      	nop			@ (mov r8, r8)
 8000660:	e7da      	b.n	8000618 <main+0x3c>
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	20000078 	.word	0x20000078
 8000668:	08003bd0 	.word	0x08003bd0
 800066c:	20000174 	.word	0x20000174
 8000670:	08003be0 	.word	0x08003be0

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b099      	sub	sp, #100	@ 0x64
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	242c      	movs	r4, #44	@ 0x2c
 800067c:	193b      	adds	r3, r7, r4
 800067e:	0018      	movs	r0, r3
 8000680:	2334      	movs	r3, #52	@ 0x34
 8000682:	001a      	movs	r2, r3
 8000684:	2100      	movs	r1, #0
 8000686:	f002 fe1d 	bl	80032c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068a:	231c      	movs	r3, #28
 800068c:	18fb      	adds	r3, r7, r3
 800068e:	0018      	movs	r0, r3
 8000690:	2310      	movs	r3, #16
 8000692:	001a      	movs	r2, r3
 8000694:	2100      	movs	r1, #0
 8000696:	f002 fe15 	bl	80032c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	0018      	movs	r0, r3
 800069e:	2318      	movs	r3, #24
 80006a0:	001a      	movs	r2, r3
 80006a2:	2100      	movs	r1, #0
 80006a4:	f002 fe0e 	bl	80032c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80006a8:	0021      	movs	r1, r4
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2232      	movs	r2, #50	@ 0x32
 80006ae:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2201      	movs	r2, #1
 80006b4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2201      	movs	r2, #1
 80006ba:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2201      	movs	r2, #1
 80006c0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2210      	movs	r2, #16
 80006c6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2210      	movs	r2, #16
 80006cc:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2202      	movs	r2, #2
 80006d2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2280      	movs	r2, #128	@ 0x80
 80006d8:	0212      	lsls	r2, r2, #8
 80006da:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2280      	movs	r2, #128	@ 0x80
 80006e0:	0352      	lsls	r2, r2, #13
 80006e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2200      	movs	r2, #0
 80006e8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	0018      	movs	r0, r3
 80006ee:	f001 fa95 	bl	8001c1c <HAL_RCC_OscConfig>
 80006f2:	1e03      	subs	r3, r0, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x86>
  {
    Error_Handler();
 80006f6:	f000 f831 	bl	800075c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fa:	211c      	movs	r1, #28
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2207      	movs	r2, #7
 8000700:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2202      	movs	r2, #2
 8000706:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	22a0      	movs	r2, #160	@ 0xa0
 8000712:	00d2      	lsls	r2, r2, #3
 8000714:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2101      	movs	r1, #1
 800071a:	0018      	movs	r0, r3
 800071c:	f001 fe04 	bl	8002328 <HAL_RCC_ClockConfig>
 8000720:	1e03      	subs	r3, r0, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000724:	f000 f81a 	bl	800075c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	4a0b      	ldr	r2, [pc, #44]	@ (8000758 <SystemClock_Config+0xe4>)
 800072c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2200      	movs	r2, #0
 800073e:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	0018      	movs	r0, r3
 8000744:	f001 ff5c 	bl	8002600 <HAL_RCCEx_PeriphCLKConfig>
 8000748:	1e03      	subs	r3, r0, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800074c:	f000 f806 	bl	800075c <Error_Handler>
  }
}
 8000750:	46c0      	nop			@ (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	b019      	add	sp, #100	@ 0x64
 8000756:	bd90      	pop	{r4, r7, pc}
 8000758:	00020021 	.word	0x00020021

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000764:	46c0      	nop			@ (mov r8, r8)
 8000766:	e7fd      	b.n	8000764 <Error_Handler+0x8>

08000768 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800076c:	4b1b      	ldr	r3, [pc, #108]	@ (80007dc <MX_SPI1_Init+0x74>)
 800076e:	4a1c      	ldr	r2, [pc, #112]	@ (80007e0 <MX_SPI1_Init+0x78>)
 8000770:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000772:	4b1a      	ldr	r3, [pc, #104]	@ (80007dc <MX_SPI1_Init+0x74>)
 8000774:	2282      	movs	r2, #130	@ 0x82
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800077a:	4b18      	ldr	r3, [pc, #96]	@ (80007dc <MX_SPI1_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000780:	4b16      	ldr	r3, [pc, #88]	@ (80007dc <MX_SPI1_Init+0x74>)
 8000782:	22c0      	movs	r2, #192	@ 0xc0
 8000784:	0092      	lsls	r2, r2, #2
 8000786:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000788:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <MX_SPI1_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800078e:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <MX_SPI1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000794:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <MX_SPI1_Init+0x74>)
 8000796:	2280      	movs	r2, #128	@ 0x80
 8000798:	0092      	lsls	r2, r2, #2
 800079a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800079c:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <MX_SPI1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <MX_SPI1_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <MX_SPI1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <MX_SPI1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_SPI1_Init+0x74>)
 80007b6:	2207      	movs	r2, #7
 80007b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <MX_SPI1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_SPI1_Init+0x74>)
 80007c2:	2208      	movs	r2, #8
 80007c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007c6:	4b05      	ldr	r3, [pc, #20]	@ (80007dc <MX_SPI1_Init+0x74>)
 80007c8:	0018      	movs	r0, r3
 80007ca:	f002 f807 	bl	80027dc <HAL_SPI_Init>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d001      	beq.n	80007d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007d2:	f7ff ffc3 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007d6:	46c0      	nop			@ (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	2000010c 	.word	0x2000010c
 80007e0:	40013000 	.word	0x40013000

080007e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80007e4:	b590      	push	{r4, r7, lr}
 80007e6:	b08b      	sub	sp, #44	@ 0x2c
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	2414      	movs	r4, #20
 80007ee:	193b      	adds	r3, r7, r4
 80007f0:	0018      	movs	r0, r3
 80007f2:	2314      	movs	r3, #20
 80007f4:	001a      	movs	r2, r3
 80007f6:	2100      	movs	r1, #0
 80007f8:	f002 fd64 	bl	80032c4 <memset>
  if(spiHandle->Instance==SPI1)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a1c      	ldr	r2, [pc, #112]	@ (8000874 <HAL_SPI_MspInit+0x90>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d132      	bne.n	800086c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000806:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <HAL_SPI_MspInit+0x94>)
 8000808:	699a      	ldr	r2, [r3, #24]
 800080a:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <HAL_SPI_MspInit+0x94>)
 800080c:	2180      	movs	r1, #128	@ 0x80
 800080e:	0149      	lsls	r1, r1, #5
 8000810:	430a      	orrs	r2, r1
 8000812:	619a      	str	r2, [r3, #24]
 8000814:	4b18      	ldr	r3, [pc, #96]	@ (8000878 <HAL_SPI_MspInit+0x94>)
 8000816:	699a      	ldr	r2, [r3, #24]
 8000818:	2380      	movs	r3, #128	@ 0x80
 800081a:	015b      	lsls	r3, r3, #5
 800081c:	4013      	ands	r3, r2
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <HAL_SPI_MspInit+0x94>)
 8000824:	695a      	ldr	r2, [r3, #20]
 8000826:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <HAL_SPI_MspInit+0x94>)
 8000828:	2180      	movs	r1, #128	@ 0x80
 800082a:	0289      	lsls	r1, r1, #10
 800082c:	430a      	orrs	r2, r1
 800082e:	615a      	str	r2, [r3, #20]
 8000830:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <HAL_SPI_MspInit+0x94>)
 8000832:	695a      	ldr	r2, [r3, #20]
 8000834:	2380      	movs	r3, #128	@ 0x80
 8000836:	029b      	lsls	r3, r3, #10
 8000838:	4013      	ands	r3, r2
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800083e:	0021      	movs	r1, r4
 8000840:	187b      	adds	r3, r7, r1
 8000842:	22e0      	movs	r2, #224	@ 0xe0
 8000844:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2202      	movs	r2, #2
 800084a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2203      	movs	r2, #3
 8000856:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085e:	187a      	adds	r2, r7, r1
 8000860:	2390      	movs	r3, #144	@ 0x90
 8000862:	05db      	lsls	r3, r3, #23
 8000864:	0011      	movs	r1, r2
 8000866:	0018      	movs	r0, r3
 8000868:	f000 fdf6 	bl	8001458 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800086c:	46c0      	nop			@ (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	b00b      	add	sp, #44	@ 0x2c
 8000872:	bd90      	pop	{r4, r7, pc}
 8000874:	40013000 	.word	0x40013000
 8000878:	40021000 	.word	0x40021000

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <HAL_MspInit+0x44>)
 8000884:	699a      	ldr	r2, [r3, #24]
 8000886:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <HAL_MspInit+0x44>)
 8000888:	2101      	movs	r1, #1
 800088a:	430a      	orrs	r2, r1
 800088c:	619a      	str	r2, [r3, #24]
 800088e:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <HAL_MspInit+0x44>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	2201      	movs	r2, #1
 8000894:	4013      	ands	r3, r2
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <HAL_MspInit+0x44>)
 800089c:	69da      	ldr	r2, [r3, #28]
 800089e:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <HAL_MspInit+0x44>)
 80008a0:	2180      	movs	r1, #128	@ 0x80
 80008a2:	0549      	lsls	r1, r1, #21
 80008a4:	430a      	orrs	r2, r1
 80008a6:	61da      	str	r2, [r3, #28]
 80008a8:	4b05      	ldr	r3, [pc, #20]	@ (80008c0 <HAL_MspInit+0x44>)
 80008aa:	69da      	ldr	r2, [r3, #28]
 80008ac:	2380      	movs	r3, #128	@ 0x80
 80008ae:	055b      	lsls	r3, r3, #21
 80008b0:	4013      	ands	r3, r2
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b6:	46c0      	nop			@ (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b002      	add	sp, #8
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			@ (mov r8, r8)
 80008c0:	40021000 	.word	0x40021000

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c8:	46c0      	nop			@ (mov r8, r8)
 80008ca:	e7fd      	b.n	80008c8 <NMI_Handler+0x4>

080008cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d0:	46c0      	nop			@ (mov r8, r8)
 80008d2:	e7fd      	b.n	80008d0 <HardFault_Handler+0x4>

080008d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008d8:	46c0      	nop			@ (mov r8, r8)
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e2:	46c0      	nop			@ (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ec:	f000 f98e 	bl	8000c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f0:	46c0      	nop			@ (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000900:	4a14      	ldr	r2, [pc, #80]	@ (8000954 <_sbrk+0x5c>)
 8000902:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <_sbrk+0x60>)
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800090c:	4b13      	ldr	r3, [pc, #76]	@ (800095c <_sbrk+0x64>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d102      	bne.n	800091a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000914:	4b11      	ldr	r3, [pc, #68]	@ (800095c <_sbrk+0x64>)
 8000916:	4a12      	ldr	r2, [pc, #72]	@ (8000960 <_sbrk+0x68>)
 8000918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800091a:	4b10      	ldr	r3, [pc, #64]	@ (800095c <_sbrk+0x64>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	18d3      	adds	r3, r2, r3
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	429a      	cmp	r2, r3
 8000926:	d207      	bcs.n	8000938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000928:	f002 fcd4 	bl	80032d4 <__errno>
 800092c:	0003      	movs	r3, r0
 800092e:	220c      	movs	r2, #12
 8000930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000932:	2301      	movs	r3, #1
 8000934:	425b      	negs	r3, r3
 8000936:	e009      	b.n	800094c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000938:	4b08      	ldr	r3, [pc, #32]	@ (800095c <_sbrk+0x64>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800093e:	4b07      	ldr	r3, [pc, #28]	@ (800095c <_sbrk+0x64>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	18d2      	adds	r2, r2, r3
 8000946:	4b05      	ldr	r3, [pc, #20]	@ (800095c <_sbrk+0x64>)
 8000948:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800094a:	68fb      	ldr	r3, [r7, #12]
}
 800094c:	0018      	movs	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	b006      	add	sp, #24
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20001800 	.word	0x20001800
 8000958:	00000400 	.word	0x00000400
 800095c:	20000170 	.word	0x20000170
 8000960:	20000628 	.word	0x20000628

08000964 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000968:	46c0      	nop			@ (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000974:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <MX_USART1_UART_Init+0x58>)
 8000976:	4a15      	ldr	r2, [pc, #84]	@ (80009cc <MX_USART1_UART_Init+0x5c>)
 8000978:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800097a:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <MX_USART1_UART_Init+0x58>)
 800097c:	2296      	movs	r2, #150	@ 0x96
 800097e:	0192      	lsls	r2, r2, #6
 8000980:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000982:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <MX_USART1_UART_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000988:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <MX_USART1_UART_Init+0x58>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800098e:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <MX_USART1_UART_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000994:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <MX_USART1_UART_Init+0x58>)
 8000996:	220c      	movs	r2, #12
 8000998:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <MX_USART1_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a0:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <MX_USART1_UART_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a6:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <MX_USART1_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <MX_USART1_UART_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009b2:	4b05      	ldr	r3, [pc, #20]	@ (80009c8 <MX_USART1_UART_Init+0x58>)
 80009b4:	0018      	movs	r0, r3
 80009b6:	f001 ffc9 	bl	800294c <HAL_UART_Init>
 80009ba:	1e03      	subs	r3, r0, #0
 80009bc:	d001      	beq.n	80009c2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009be:	f7ff fecd 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009c2:	46c0      	nop			@ (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000174 	.word	0x20000174
 80009cc:	40013800 	.word	0x40013800

080009d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b08b      	sub	sp, #44	@ 0x2c
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	2414      	movs	r4, #20
 80009da:	193b      	adds	r3, r7, r4
 80009dc:	0018      	movs	r0, r3
 80009de:	2314      	movs	r3, #20
 80009e0:	001a      	movs	r2, r3
 80009e2:	2100      	movs	r1, #0
 80009e4:	f002 fc6e 	bl	80032c4 <memset>
  if(uartHandle->Instance==USART1)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a1d      	ldr	r2, [pc, #116]	@ (8000a64 <HAL_UART_MspInit+0x94>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d133      	bne.n	8000a5a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a68 <HAL_UART_MspInit+0x98>)
 80009f4:	699a      	ldr	r2, [r3, #24]
 80009f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a68 <HAL_UART_MspInit+0x98>)
 80009f8:	2180      	movs	r1, #128	@ 0x80
 80009fa:	01c9      	lsls	r1, r1, #7
 80009fc:	430a      	orrs	r2, r1
 80009fe:	619a      	str	r2, [r3, #24]
 8000a00:	4b19      	ldr	r3, [pc, #100]	@ (8000a68 <HAL_UART_MspInit+0x98>)
 8000a02:	699a      	ldr	r2, [r3, #24]
 8000a04:	2380      	movs	r3, #128	@ 0x80
 8000a06:	01db      	lsls	r3, r3, #7
 8000a08:	4013      	ands	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <HAL_UART_MspInit+0x98>)
 8000a10:	695a      	ldr	r2, [r3, #20]
 8000a12:	4b15      	ldr	r3, [pc, #84]	@ (8000a68 <HAL_UART_MspInit+0x98>)
 8000a14:	2180      	movs	r1, #128	@ 0x80
 8000a16:	0289      	lsls	r1, r1, #10
 8000a18:	430a      	orrs	r2, r1
 8000a1a:	615a      	str	r2, [r3, #20]
 8000a1c:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <HAL_UART_MspInit+0x98>)
 8000a1e:	695a      	ldr	r2, [r3, #20]
 8000a20:	2380      	movs	r3, #128	@ 0x80
 8000a22:	029b      	lsls	r3, r3, #10
 8000a24:	4013      	ands	r3, r2
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	22c0      	movs	r2, #192	@ 0xc0
 8000a2e:	00d2      	lsls	r2, r2, #3
 8000a30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	0021      	movs	r1, r4
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2202      	movs	r2, #2
 8000a38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2203      	movs	r2, #3
 8000a44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2201      	movs	r2, #1
 8000a4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	187a      	adds	r2, r7, r1
 8000a4e:	2390      	movs	r3, #144	@ 0x90
 8000a50:	05db      	lsls	r3, r3, #23
 8000a52:	0011      	movs	r1, r2
 8000a54:	0018      	movs	r0, r3
 8000a56:	f000 fcff 	bl	8001458 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b00b      	add	sp, #44	@ 0x2c
 8000a60:	bd90      	pop	{r4, r7, pc}
 8000a62:	46c0      	nop			@ (mov r8, r8)
 8000a64:	40013800 	.word	0x40013800
 8000a68:	40021000 	.word	0x40021000

08000a6c <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <MX_USB_PCD_Init+0x44>)
 8000a72:	4a10      	ldr	r2, [pc, #64]	@ (8000ab4 <MX_USB_PCD_Init+0x48>)
 8000a74:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab0 <MX_USB_PCD_Init+0x44>)
 8000a78:	2208      	movs	r2, #8
 8000a7a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab0 <MX_USB_PCD_Init+0x44>)
 8000a7e:	2202      	movs	r2, #2
 8000a80:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab0 <MX_USB_PCD_Init+0x44>)
 8000a84:	2202      	movs	r2, #2
 8000a86:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000a88:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <MX_USB_PCD_Init+0x44>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	@ (8000ab0 <MX_USB_PCD_Init+0x44>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000a94:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <MX_USB_PCD_Init+0x44>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a9a:	4b05      	ldr	r3, [pc, #20]	@ (8000ab0 <MX_USB_PCD_Init+0x44>)
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f000 ff9f 	bl	80019e0 <HAL_PCD_Init>
 8000aa2:	1e03      	subs	r3, r0, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8000aa6:	f7ff fe59 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000aaa:	46c0      	nop			@ (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200001fc 	.word	0x200001fc
 8000ab4:	40005c00 	.word	0x40005c00

08000ab8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0a      	ldr	r2, [pc, #40]	@ (8000af0 <HAL_PCD_MspInit+0x38>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d10d      	bne.n	8000ae6 <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000aca:	4b0a      	ldr	r3, [pc, #40]	@ (8000af4 <HAL_PCD_MspInit+0x3c>)
 8000acc:	69da      	ldr	r2, [r3, #28]
 8000ace:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <HAL_PCD_MspInit+0x3c>)
 8000ad0:	2180      	movs	r1, #128	@ 0x80
 8000ad2:	0409      	lsls	r1, r1, #16
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	61da      	str	r2, [r3, #28]
 8000ad8:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <HAL_PCD_MspInit+0x3c>)
 8000ada:	69da      	ldr	r2, [r3, #28]
 8000adc:	2380      	movs	r3, #128	@ 0x80
 8000ade:	041b      	lsls	r3, r3, #16
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000ae6:	46c0      	nop			@ (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b004      	add	sp, #16
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			@ (mov r8, r8)
 8000af0:	40005c00 	.word	0x40005c00
 8000af4:	40021000 	.word	0x40021000

08000af8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000af8:	4813      	ldr	r0, [pc, #76]	@ (8000b48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000afa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000afc:	f7ff ff32 	bl	8000964 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000b00:	4812      	ldr	r0, [pc, #72]	@ (8000b4c <LoopForever+0x6>)
    LDR R1, [R0]
 8000b02:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000b04:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000b06:	4a12      	ldr	r2, [pc, #72]	@ (8000b50 <LoopForever+0xa>)
    CMP R1, R2
 8000b08:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000b0a:	d105      	bne.n	8000b18 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000b0c:	4811      	ldr	r0, [pc, #68]	@ (8000b54 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000b0e:	4912      	ldr	r1, [pc, #72]	@ (8000b58 <LoopForever+0x12>)
    STR R1, [R0]
 8000b10:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000b12:	4812      	ldr	r0, [pc, #72]	@ (8000b5c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000b14:	4912      	ldr	r1, [pc, #72]	@ (8000b60 <LoopForever+0x1a>)
    STR R1, [R0]
 8000b16:	6001      	str	r1, [r0, #0]

08000b18 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b18:	4812      	ldr	r0, [pc, #72]	@ (8000b64 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000b1a:	4913      	ldr	r1, [pc, #76]	@ (8000b68 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000b1c:	4a13      	ldr	r2, [pc, #76]	@ (8000b6c <LoopForever+0x26>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b20:	e002      	b.n	8000b28 <LoopCopyDataInit>

08000b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b26:	3304      	adds	r3, #4

08000b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b2c:	d3f9      	bcc.n	8000b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2e:	4a10      	ldr	r2, [pc, #64]	@ (8000b70 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000b30:	4c10      	ldr	r4, [pc, #64]	@ (8000b74 <LoopForever+0x2e>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b34:	e001      	b.n	8000b3a <LoopFillZerobss>

08000b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b38:	3204      	adds	r2, #4

08000b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b3c:	d3fb      	bcc.n	8000b36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b3e:	f002 fbcf 	bl	80032e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b42:	f7ff fd4b 	bl	80005dc <main>

08000b46 <LoopForever>:

LoopForever:
    b LoopForever
 8000b46:	e7fe      	b.n	8000b46 <LoopForever>
  ldr   r0, =_estack
 8000b48:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000b4c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000b50:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000b54:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000b58:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000b5c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000b60:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b68:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b6c:	08003c60 	.word	0x08003c60
  ldr r2, =_sbss
 8000b70:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b74:	20000624 	.word	0x20000624

08000b78 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <ADC1_IRQHandler>
	...

08000b7c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b80:	4b07      	ldr	r3, [pc, #28]	@ (8000ba0 <HAL_Init+0x24>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <HAL_Init+0x24>)
 8000b86:	2110      	movs	r1, #16
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b8c:	2003      	movs	r0, #3
 8000b8e:	f000 f809 	bl	8000ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b92:	f7ff fe73 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b96:	2300      	movs	r3, #0
}
 8000b98:	0018      	movs	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	46c0      	nop			@ (mov r8, r8)
 8000ba0:	40022000 	.word	0x40022000

08000ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bac:	4b14      	ldr	r3, [pc, #80]	@ (8000c00 <HAL_InitTick+0x5c>)
 8000bae:	681c      	ldr	r4, [r3, #0]
 8000bb0:	4b14      	ldr	r3, [pc, #80]	@ (8000c04 <HAL_InitTick+0x60>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	0019      	movs	r1, r3
 8000bb6:	23fa      	movs	r3, #250	@ 0xfa
 8000bb8:	0098      	lsls	r0, r3, #2
 8000bba:	f7ff fab7 	bl	800012c <__udivsi3>
 8000bbe:	0003      	movs	r3, r0
 8000bc0:	0019      	movs	r1, r3
 8000bc2:	0020      	movs	r0, r4
 8000bc4:	f7ff fab2 	bl	800012c <__udivsi3>
 8000bc8:	0003      	movs	r3, r0
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f000 fc37 	bl	800143e <HAL_SYSTICK_Config>
 8000bd0:	1e03      	subs	r3, r0, #0
 8000bd2:	d001      	beq.n	8000bd8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e00f      	b.n	8000bf8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b03      	cmp	r3, #3
 8000bdc:	d80b      	bhi.n	8000bf6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bde:	6879      	ldr	r1, [r7, #4]
 8000be0:	2301      	movs	r3, #1
 8000be2:	425b      	negs	r3, r3
 8000be4:	2200      	movs	r2, #0
 8000be6:	0018      	movs	r0, r3
 8000be8:	f000 fc14 	bl	8001414 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bec:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <HAL_InitTick+0x64>)
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e000      	b.n	8000bf8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b003      	add	sp, #12
 8000bfe:	bd90      	pop	{r4, r7, pc}
 8000c00:	20000000 	.word	0x20000000
 8000c04:	20000008 	.word	0x20000008
 8000c08:	20000004 	.word	0x20000004

08000c0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c10:	4b05      	ldr	r3, [pc, #20]	@ (8000c28 <HAL_IncTick+0x1c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	001a      	movs	r2, r3
 8000c16:	4b05      	ldr	r3, [pc, #20]	@ (8000c2c <HAL_IncTick+0x20>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	18d2      	adds	r2, r2, r3
 8000c1c:	4b03      	ldr	r3, [pc, #12]	@ (8000c2c <HAL_IncTick+0x20>)
 8000c1e:	601a      	str	r2, [r3, #0]
}
 8000c20:	46c0      	nop			@ (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	200004d8 	.word	0x200004d8

08000c30 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  return uwTick;
 8000c34:	4b02      	ldr	r3, [pc, #8]	@ (8000c40 <HAL_GetTick+0x10>)
 8000c36:	681b      	ldr	r3, [r3, #0]
}
 8000c38:	0018      	movs	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	200004d8 	.word	0x200004d8

08000c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c4c:	f7ff fff0 	bl	8000c30 <HAL_GetTick>
 8000c50:	0003      	movs	r3, r0
 8000c52:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	d005      	beq.n	8000c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <HAL_Delay+0x44>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	001a      	movs	r2, r3
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	189b      	adds	r3, r3, r2
 8000c68:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	f7ff ffe0 	bl	8000c30 <HAL_GetTick>
 8000c70:	0002      	movs	r2, r0
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d8f7      	bhi.n	8000c6c <HAL_Delay+0x28>
  {
  }
}
 8000c7c:	46c0      	nop			@ (mov r8, r8)
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b004      	add	sp, #16
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	20000008 	.word	0x20000008

08000c8c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c94:	230f      	movs	r3, #15
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d101      	bne.n	8000caa <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e125      	b.n	8000ef6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d10a      	bne.n	8000cc8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2234      	movs	r2, #52	@ 0x34
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f7ff fb34 	bl	8000330 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ccc:	2210      	movs	r2, #16
 8000cce:	4013      	ands	r3, r2
 8000cd0:	d000      	beq.n	8000cd4 <HAL_ADC_Init+0x48>
 8000cd2:	e103      	b.n	8000edc <HAL_ADC_Init+0x250>
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d000      	beq.n	8000ce0 <HAL_ADC_Init+0x54>
 8000cde:	e0fd      	b.n	8000edc <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	2204      	movs	r2, #4
 8000ce8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000cea:	d000      	beq.n	8000cee <HAL_ADC_Init+0x62>
 8000cec:	e0f6      	b.n	8000edc <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cf2:	4a83      	ldr	r2, [pc, #524]	@ (8000f00 <HAL_ADC_Init+0x274>)
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	2203      	movs	r2, #3
 8000d06:	4013      	ands	r3, r2
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d112      	bne.n	8000d32 <HAL_ADC_Init+0xa6>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2201      	movs	r2, #1
 8000d14:	4013      	ands	r3, r2
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d009      	beq.n	8000d2e <HAL_ADC_Init+0xa2>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	68da      	ldr	r2, [r3, #12]
 8000d20:	2380      	movs	r3, #128	@ 0x80
 8000d22:	021b      	lsls	r3, r3, #8
 8000d24:	401a      	ands	r2, r3
 8000d26:	2380      	movs	r3, #128	@ 0x80
 8000d28:	021b      	lsls	r3, r3, #8
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d101      	bne.n	8000d32 <HAL_ADC_Init+0xa6>
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e000      	b.n	8000d34 <HAL_ADC_Init+0xa8>
 8000d32:	2300      	movs	r3, #0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d116      	bne.n	8000d66 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	2218      	movs	r2, #24
 8000d40:	4393      	bics	r3, r2
 8000d42:	0019      	movs	r1, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	689a      	ldr	r2, [r3, #8]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	691b      	ldr	r3, [r3, #16]
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	0899      	lsrs	r1, r3, #2
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	430a      	orrs	r2, r1
 8000d64:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	68da      	ldr	r2, [r3, #12]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4964      	ldr	r1, [pc, #400]	@ (8000f04 <HAL_ADC_Init+0x278>)
 8000d72:	400a      	ands	r2, r1
 8000d74:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	7e1b      	ldrb	r3, [r3, #24]
 8000d7a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	7e5b      	ldrb	r3, [r3, #25]
 8000d80:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d82:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	7e9b      	ldrb	r3, [r3, #26]
 8000d88:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000d8a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d002      	beq.n	8000d9a <HAL_ADC_Init+0x10e>
 8000d94:	2380      	movs	r3, #128	@ 0x80
 8000d96:	015b      	lsls	r3, r3, #5
 8000d98:	e000      	b.n	8000d9c <HAL_ADC_Init+0x110>
 8000d9a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d9c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000da2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	691b      	ldr	r3, [r3, #16]
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d101      	bne.n	8000db0 <HAL_ADC_Init+0x124>
 8000dac:	2304      	movs	r3, #4
 8000dae:	e000      	b.n	8000db2 <HAL_ADC_Init+0x126>
 8000db0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000db2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2124      	movs	r1, #36	@ 0x24
 8000db8:	5c5b      	ldrb	r3, [r3, r1]
 8000dba:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000dbc:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	7edb      	ldrb	r3, [r3, #27]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d115      	bne.n	8000df8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	7e9b      	ldrb	r3, [r3, #26]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d105      	bne.n	8000de0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	2280      	movs	r2, #128	@ 0x80
 8000dd8:	0252      	lsls	r2, r2, #9
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	e00b      	b.n	8000df8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000de4:	2220      	movs	r2, #32
 8000de6:	431a      	orrs	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000df0:	2201      	movs	r2, #1
 8000df2:	431a      	orrs	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	69da      	ldr	r2, [r3, #28]
 8000dfc:	23c2      	movs	r3, #194	@ 0xc2
 8000dfe:	33ff      	adds	r3, #255	@ 0xff
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d007      	beq.n	8000e14 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	68d9      	ldr	r1, [r3, #12]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	430a      	orrs	r2, r1
 8000e22:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e28:	2380      	movs	r3, #128	@ 0x80
 8000e2a:	055b      	lsls	r3, r3, #21
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d01b      	beq.n	8000e68 <HAL_ADC_Init+0x1dc>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d017      	beq.n	8000e68 <HAL_ADC_Init+0x1dc>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d013      	beq.n	8000e68 <HAL_ADC_Init+0x1dc>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d00f      	beq.n	8000e68 <HAL_ADC_Init+0x1dc>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e4c:	2b04      	cmp	r3, #4
 8000e4e:	d00b      	beq.n	8000e68 <HAL_ADC_Init+0x1dc>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e54:	2b05      	cmp	r3, #5
 8000e56:	d007      	beq.n	8000e68 <HAL_ADC_Init+0x1dc>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e5c:	2b06      	cmp	r3, #6
 8000e5e:	d003      	beq.n	8000e68 <HAL_ADC_Init+0x1dc>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e64:	2b07      	cmp	r3, #7
 8000e66:	d112      	bne.n	8000e8e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	695a      	ldr	r2, [r3, #20]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2107      	movs	r1, #7
 8000e74:	438a      	bics	r2, r1
 8000e76:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	6959      	ldr	r1, [r3, #20]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e82:	2207      	movs	r2, #7
 8000e84:	401a      	ands	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	4a1c      	ldr	r2, [pc, #112]	@ (8000f08 <HAL_ADC_Init+0x27c>)
 8000e96:	4013      	ands	r3, r2
 8000e98:	68ba      	ldr	r2, [r7, #8]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d10b      	bne.n	8000eb6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	4393      	bics	r3, r2
 8000eac:	2201      	movs	r2, #1
 8000eae:	431a      	orrs	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000eb4:	e01c      	b.n	8000ef0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000eba:	2212      	movs	r2, #18
 8000ebc:	4393      	bics	r3, r2
 8000ebe:	2210      	movs	r2, #16
 8000ec0:	431a      	orrs	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000eca:	2201      	movs	r2, #1
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000ed2:	230f      	movs	r3, #15
 8000ed4:	18fb      	adds	r3, r7, r3
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000eda:	e009      	b.n	8000ef0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ee0:	2210      	movs	r2, #16
 8000ee2:	431a      	orrs	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000ee8:	230f      	movs	r3, #15
 8000eea:	18fb      	adds	r3, r7, r3
 8000eec:	2201      	movs	r2, #1
 8000eee:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	18fb      	adds	r3, r7, r3
 8000ef4:	781b      	ldrb	r3, [r3, #0]
}
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b004      	add	sp, #16
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	46c0      	nop			@ (mov r8, r8)
 8000f00:	fffffefd 	.word	0xfffffefd
 8000f04:	fffe0219 	.word	0xfffe0219
 8000f08:	833fffe7 	.word	0x833fffe7

08000f0c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f14:	230f      	movs	r3, #15
 8000f16:	18fb      	adds	r3, r7, r3
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	2204      	movs	r2, #4
 8000f24:	4013      	ands	r3, r2
 8000f26:	d138      	bne.n	8000f9a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2234      	movs	r2, #52	@ 0x34
 8000f2c:	5c9b      	ldrb	r3, [r3, r2]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d101      	bne.n	8000f36 <HAL_ADC_Start+0x2a>
 8000f32:	2302      	movs	r3, #2
 8000f34:	e038      	b.n	8000fa8 <HAL_ADC_Start+0x9c>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2234      	movs	r2, #52	@ 0x34
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	7e5b      	ldrb	r3, [r3, #25]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d007      	beq.n	8000f56 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000f46:	230f      	movs	r3, #15
 8000f48:	18fc      	adds	r4, r7, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f000 f94b 	bl	80011e8 <ADC_Enable>
 8000f52:	0003      	movs	r3, r0
 8000f54:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f56:	230f      	movs	r3, #15
 8000f58:	18fb      	adds	r3, r7, r3
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d120      	bne.n	8000fa2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f64:	4a12      	ldr	r2, [pc, #72]	@ (8000fb0 <HAL_ADC_Start+0xa4>)
 8000f66:	4013      	ands	r3, r2
 8000f68:	2280      	movs	r2, #128	@ 0x80
 8000f6a:	0052      	lsls	r2, r2, #1
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2234      	movs	r2, #52	@ 0x34
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	221c      	movs	r2, #28
 8000f86:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	689a      	ldr	r2, [r3, #8]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2104      	movs	r1, #4
 8000f94:	430a      	orrs	r2, r1
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	e003      	b.n	8000fa2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f9a:	230f      	movs	r3, #15
 8000f9c:	18fb      	adds	r3, r7, r3
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fa2:	230f      	movs	r3, #15
 8000fa4:	18fb      	adds	r3, r7, r3
 8000fa6:	781b      	ldrb	r3, [r3, #0]
}
 8000fa8:	0018      	movs	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	b005      	add	sp, #20
 8000fae:	bd90      	pop	{r4, r7, pc}
 8000fb0:	fffff0fe 	.word	0xfffff0fe

08000fb4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	b002      	add	sp, #8
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fd6:	230f      	movs	r3, #15
 8000fd8:	18fb      	adds	r3, r7, r3
 8000fda:	2200      	movs	r2, #0
 8000fdc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fe6:	2380      	movs	r3, #128	@ 0x80
 8000fe8:	055b      	lsls	r3, r3, #21
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d011      	beq.n	8001012 <HAL_ADC_ConfigChannel+0x46>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d00d      	beq.n	8001012 <HAL_ADC_ConfigChannel+0x46>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d009      	beq.n	8001012 <HAL_ADC_ConfigChannel+0x46>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001002:	2b03      	cmp	r3, #3
 8001004:	d005      	beq.n	8001012 <HAL_ADC_ConfigChannel+0x46>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800100a:	2b04      	cmp	r3, #4
 800100c:	d001      	beq.n	8001012 <HAL_ADC_ConfigChannel+0x46>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2234      	movs	r2, #52	@ 0x34
 8001016:	5c9b      	ldrb	r3, [r3, r2]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d101      	bne.n	8001020 <HAL_ADC_ConfigChannel+0x54>
 800101c:	2302      	movs	r3, #2
 800101e:	e0d0      	b.n	80011c2 <HAL_ADC_ConfigChannel+0x1f6>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2234      	movs	r2, #52	@ 0x34
 8001024:	2101      	movs	r1, #1
 8001026:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	2204      	movs	r2, #4
 8001030:	4013      	ands	r3, r2
 8001032:	d000      	beq.n	8001036 <HAL_ADC_ConfigChannel+0x6a>
 8001034:	e0b4      	b.n	80011a0 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	4a64      	ldr	r2, [pc, #400]	@ (80011cc <HAL_ADC_ConfigChannel+0x200>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d100      	bne.n	8001042 <HAL_ADC_ConfigChannel+0x76>
 8001040:	e082      	b.n	8001148 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2201      	movs	r2, #1
 800104e:	409a      	lsls	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	430a      	orrs	r2, r1
 8001056:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800105c:	2380      	movs	r3, #128	@ 0x80
 800105e:	055b      	lsls	r3, r3, #21
 8001060:	429a      	cmp	r2, r3
 8001062:	d037      	beq.n	80010d4 <HAL_ADC_ConfigChannel+0x108>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001068:	2b01      	cmp	r3, #1
 800106a:	d033      	beq.n	80010d4 <HAL_ADC_ConfigChannel+0x108>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001070:	2b02      	cmp	r3, #2
 8001072:	d02f      	beq.n	80010d4 <HAL_ADC_ConfigChannel+0x108>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001078:	2b03      	cmp	r3, #3
 800107a:	d02b      	beq.n	80010d4 <HAL_ADC_ConfigChannel+0x108>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001080:	2b04      	cmp	r3, #4
 8001082:	d027      	beq.n	80010d4 <HAL_ADC_ConfigChannel+0x108>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001088:	2b05      	cmp	r3, #5
 800108a:	d023      	beq.n	80010d4 <HAL_ADC_ConfigChannel+0x108>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001090:	2b06      	cmp	r3, #6
 8001092:	d01f      	beq.n	80010d4 <HAL_ADC_ConfigChannel+0x108>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001098:	2b07      	cmp	r3, #7
 800109a:	d01b      	beq.n	80010d4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	2107      	movs	r1, #7
 80010a8:	400b      	ands	r3, r1
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d012      	beq.n	80010d4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	695a      	ldr	r2, [r3, #20]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2107      	movs	r1, #7
 80010ba:	438a      	bics	r2, r1
 80010bc:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6959      	ldr	r1, [r3, #20]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	2207      	movs	r2, #7
 80010ca:	401a      	ands	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	430a      	orrs	r2, r1
 80010d2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b10      	cmp	r3, #16
 80010da:	d007      	beq.n	80010ec <HAL_ADC_ConfigChannel+0x120>
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b11      	cmp	r3, #17
 80010e2:	d003      	beq.n	80010ec <HAL_ADC_ConfigChannel+0x120>
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b12      	cmp	r3, #18
 80010ea:	d163      	bne.n	80011b4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80010ec:	4b38      	ldr	r3, [pc, #224]	@ (80011d0 <HAL_ADC_ConfigChannel+0x204>)
 80010ee:	6819      	ldr	r1, [r3, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b10      	cmp	r3, #16
 80010f6:	d009      	beq.n	800110c <HAL_ADC_ConfigChannel+0x140>
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b11      	cmp	r3, #17
 80010fe:	d102      	bne.n	8001106 <HAL_ADC_ConfigChannel+0x13a>
 8001100:	2380      	movs	r3, #128	@ 0x80
 8001102:	03db      	lsls	r3, r3, #15
 8001104:	e004      	b.n	8001110 <HAL_ADC_ConfigChannel+0x144>
 8001106:	2380      	movs	r3, #128	@ 0x80
 8001108:	045b      	lsls	r3, r3, #17
 800110a:	e001      	b.n	8001110 <HAL_ADC_ConfigChannel+0x144>
 800110c:	2380      	movs	r3, #128	@ 0x80
 800110e:	041b      	lsls	r3, r3, #16
 8001110:	4a2f      	ldr	r2, [pc, #188]	@ (80011d0 <HAL_ADC_ConfigChannel+0x204>)
 8001112:	430b      	orrs	r3, r1
 8001114:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2b10      	cmp	r3, #16
 800111c:	d14a      	bne.n	80011b4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800111e:	4b2d      	ldr	r3, [pc, #180]	@ (80011d4 <HAL_ADC_ConfigChannel+0x208>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	492d      	ldr	r1, [pc, #180]	@ (80011d8 <HAL_ADC_ConfigChannel+0x20c>)
 8001124:	0018      	movs	r0, r3
 8001126:	f7ff f801 	bl	800012c <__udivsi3>
 800112a:	0003      	movs	r3, r0
 800112c:	001a      	movs	r2, r3
 800112e:	0013      	movs	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	189b      	adds	r3, r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001138:	e002      	b.n	8001140 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	3b01      	subs	r3, #1
 800113e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f9      	bne.n	800113a <HAL_ADC_ConfigChannel+0x16e>
 8001146:	e035      	b.n	80011b4 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2101      	movs	r1, #1
 8001154:	4099      	lsls	r1, r3
 8001156:	000b      	movs	r3, r1
 8001158:	43d9      	mvns	r1, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	400a      	ands	r2, r1
 8001160:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b10      	cmp	r3, #16
 8001168:	d007      	beq.n	800117a <HAL_ADC_ConfigChannel+0x1ae>
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b11      	cmp	r3, #17
 8001170:	d003      	beq.n	800117a <HAL_ADC_ConfigChannel+0x1ae>
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b12      	cmp	r3, #18
 8001178:	d11c      	bne.n	80011b4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800117a:	4b15      	ldr	r3, [pc, #84]	@ (80011d0 <HAL_ADC_ConfigChannel+0x204>)
 800117c:	6819      	ldr	r1, [r3, #0]
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2b10      	cmp	r3, #16
 8001184:	d007      	beq.n	8001196 <HAL_ADC_ConfigChannel+0x1ca>
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b11      	cmp	r3, #17
 800118c:	d101      	bne.n	8001192 <HAL_ADC_ConfigChannel+0x1c6>
 800118e:	4b13      	ldr	r3, [pc, #76]	@ (80011dc <HAL_ADC_ConfigChannel+0x210>)
 8001190:	e002      	b.n	8001198 <HAL_ADC_ConfigChannel+0x1cc>
 8001192:	4b13      	ldr	r3, [pc, #76]	@ (80011e0 <HAL_ADC_ConfigChannel+0x214>)
 8001194:	e000      	b.n	8001198 <HAL_ADC_ConfigChannel+0x1cc>
 8001196:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <HAL_ADC_ConfigChannel+0x218>)
 8001198:	4a0d      	ldr	r2, [pc, #52]	@ (80011d0 <HAL_ADC_ConfigChannel+0x204>)
 800119a:	400b      	ands	r3, r1
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	e009      	b.n	80011b4 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011a4:	2220      	movs	r2, #32
 80011a6:	431a      	orrs	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 80011ac:	230f      	movs	r3, #15
 80011ae:	18fb      	adds	r3, r7, r3
 80011b0:	2201      	movs	r2, #1
 80011b2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2234      	movs	r2, #52	@ 0x34
 80011b8:	2100      	movs	r1, #0
 80011ba:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80011bc:	230f      	movs	r3, #15
 80011be:	18fb      	adds	r3, r7, r3
 80011c0:	781b      	ldrb	r3, [r3, #0]
}
 80011c2:	0018      	movs	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b004      	add	sp, #16
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	46c0      	nop			@ (mov r8, r8)
 80011cc:	00001001 	.word	0x00001001
 80011d0:	40012708 	.word	0x40012708
 80011d4:	20000000 	.word	0x20000000
 80011d8:	000f4240 	.word	0x000f4240
 80011dc:	ffbfffff 	.word	0xffbfffff
 80011e0:	feffffff 	.word	0xfeffffff
 80011e4:	ff7fffff 	.word	0xff7fffff

080011e8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	2203      	movs	r2, #3
 8001200:	4013      	ands	r3, r2
 8001202:	2b01      	cmp	r3, #1
 8001204:	d112      	bne.n	800122c <ADC_Enable+0x44>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2201      	movs	r2, #1
 800120e:	4013      	ands	r3, r2
 8001210:	2b01      	cmp	r3, #1
 8001212:	d009      	beq.n	8001228 <ADC_Enable+0x40>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	68da      	ldr	r2, [r3, #12]
 800121a:	2380      	movs	r3, #128	@ 0x80
 800121c:	021b      	lsls	r3, r3, #8
 800121e:	401a      	ands	r2, r3
 8001220:	2380      	movs	r3, #128	@ 0x80
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	429a      	cmp	r2, r3
 8001226:	d101      	bne.n	800122c <ADC_Enable+0x44>
 8001228:	2301      	movs	r3, #1
 800122a:	e000      	b.n	800122e <ADC_Enable+0x46>
 800122c:	2300      	movs	r3, #0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d152      	bne.n	80012d8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	4a2a      	ldr	r2, [pc, #168]	@ (80012e4 <ADC_Enable+0xfc>)
 800123a:	4013      	ands	r3, r2
 800123c:	d00d      	beq.n	800125a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001242:	2210      	movs	r2, #16
 8001244:	431a      	orrs	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800124e:	2201      	movs	r2, #1
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e03f      	b.n	80012da <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2101      	movs	r1, #1
 8001266:	430a      	orrs	r2, r1
 8001268:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800126a:	4b1f      	ldr	r3, [pc, #124]	@ (80012e8 <ADC_Enable+0x100>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	491f      	ldr	r1, [pc, #124]	@ (80012ec <ADC_Enable+0x104>)
 8001270:	0018      	movs	r0, r3
 8001272:	f7fe ff5b 	bl	800012c <__udivsi3>
 8001276:	0003      	movs	r3, r0
 8001278:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800127a:	e002      	b.n	8001282 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	3b01      	subs	r3, #1
 8001280:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1f9      	bne.n	800127c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001288:	f7ff fcd2 	bl	8000c30 <HAL_GetTick>
 800128c:	0003      	movs	r3, r0
 800128e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001290:	e01b      	b.n	80012ca <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001292:	f7ff fccd 	bl	8000c30 <HAL_GetTick>
 8001296:	0002      	movs	r2, r0
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d914      	bls.n	80012ca <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2201      	movs	r2, #1
 80012a8:	4013      	ands	r3, r2
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d00d      	beq.n	80012ca <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012b2:	2210      	movs	r2, #16
 80012b4:	431a      	orrs	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012be:	2201      	movs	r2, #1
 80012c0:	431a      	orrs	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e007      	b.n	80012da <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2201      	movs	r2, #1
 80012d2:	4013      	ands	r3, r2
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d1dc      	bne.n	8001292 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	0018      	movs	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	b004      	add	sp, #16
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	46c0      	nop			@ (mov r8, r8)
 80012e4:	80000017 	.word	0x80000017
 80012e8:	20000000 	.word	0x20000000
 80012ec:	000f4240 	.word	0x000f4240

080012f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	0002      	movs	r2, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	1dfb      	adds	r3, r7, #7
 80012fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012fe:	1dfb      	adds	r3, r7, #7
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b7f      	cmp	r3, #127	@ 0x7f
 8001304:	d828      	bhi.n	8001358 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001306:	4a2f      	ldr	r2, [pc, #188]	@ (80013c4 <__NVIC_SetPriority+0xd4>)
 8001308:	1dfb      	adds	r3, r7, #7
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	b25b      	sxtb	r3, r3
 800130e:	089b      	lsrs	r3, r3, #2
 8001310:	33c0      	adds	r3, #192	@ 0xc0
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	589b      	ldr	r3, [r3, r2]
 8001316:	1dfa      	adds	r2, r7, #7
 8001318:	7812      	ldrb	r2, [r2, #0]
 800131a:	0011      	movs	r1, r2
 800131c:	2203      	movs	r2, #3
 800131e:	400a      	ands	r2, r1
 8001320:	00d2      	lsls	r2, r2, #3
 8001322:	21ff      	movs	r1, #255	@ 0xff
 8001324:	4091      	lsls	r1, r2
 8001326:	000a      	movs	r2, r1
 8001328:	43d2      	mvns	r2, r2
 800132a:	401a      	ands	r2, r3
 800132c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	019b      	lsls	r3, r3, #6
 8001332:	22ff      	movs	r2, #255	@ 0xff
 8001334:	401a      	ands	r2, r3
 8001336:	1dfb      	adds	r3, r7, #7
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	0018      	movs	r0, r3
 800133c:	2303      	movs	r3, #3
 800133e:	4003      	ands	r3, r0
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001344:	481f      	ldr	r0, [pc, #124]	@ (80013c4 <__NVIC_SetPriority+0xd4>)
 8001346:	1dfb      	adds	r3, r7, #7
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b25b      	sxtb	r3, r3
 800134c:	089b      	lsrs	r3, r3, #2
 800134e:	430a      	orrs	r2, r1
 8001350:	33c0      	adds	r3, #192	@ 0xc0
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001356:	e031      	b.n	80013bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001358:	4a1b      	ldr	r2, [pc, #108]	@ (80013c8 <__NVIC_SetPriority+0xd8>)
 800135a:	1dfb      	adds	r3, r7, #7
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	0019      	movs	r1, r3
 8001360:	230f      	movs	r3, #15
 8001362:	400b      	ands	r3, r1
 8001364:	3b08      	subs	r3, #8
 8001366:	089b      	lsrs	r3, r3, #2
 8001368:	3306      	adds	r3, #6
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	18d3      	adds	r3, r2, r3
 800136e:	3304      	adds	r3, #4
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	1dfa      	adds	r2, r7, #7
 8001374:	7812      	ldrb	r2, [r2, #0]
 8001376:	0011      	movs	r1, r2
 8001378:	2203      	movs	r2, #3
 800137a:	400a      	ands	r2, r1
 800137c:	00d2      	lsls	r2, r2, #3
 800137e:	21ff      	movs	r1, #255	@ 0xff
 8001380:	4091      	lsls	r1, r2
 8001382:	000a      	movs	r2, r1
 8001384:	43d2      	mvns	r2, r2
 8001386:	401a      	ands	r2, r3
 8001388:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	019b      	lsls	r3, r3, #6
 800138e:	22ff      	movs	r2, #255	@ 0xff
 8001390:	401a      	ands	r2, r3
 8001392:	1dfb      	adds	r3, r7, #7
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	0018      	movs	r0, r3
 8001398:	2303      	movs	r3, #3
 800139a:	4003      	ands	r3, r0
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013a0:	4809      	ldr	r0, [pc, #36]	@ (80013c8 <__NVIC_SetPriority+0xd8>)
 80013a2:	1dfb      	adds	r3, r7, #7
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	001c      	movs	r4, r3
 80013a8:	230f      	movs	r3, #15
 80013aa:	4023      	ands	r3, r4
 80013ac:	3b08      	subs	r3, #8
 80013ae:	089b      	lsrs	r3, r3, #2
 80013b0:	430a      	orrs	r2, r1
 80013b2:	3306      	adds	r3, #6
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	18c3      	adds	r3, r0, r3
 80013b8:	3304      	adds	r3, #4
 80013ba:	601a      	str	r2, [r3, #0]
}
 80013bc:	46c0      	nop			@ (mov r8, r8)
 80013be:	46bd      	mov	sp, r7
 80013c0:	b003      	add	sp, #12
 80013c2:	bd90      	pop	{r4, r7, pc}
 80013c4:	e000e100 	.word	0xe000e100
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	1e5a      	subs	r2, r3, #1
 80013d8:	2380      	movs	r3, #128	@ 0x80
 80013da:	045b      	lsls	r3, r3, #17
 80013dc:	429a      	cmp	r2, r3
 80013de:	d301      	bcc.n	80013e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e0:	2301      	movs	r3, #1
 80013e2:	e010      	b.n	8001406 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001410 <SysTick_Config+0x44>)
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	3a01      	subs	r2, #1
 80013ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ec:	2301      	movs	r3, #1
 80013ee:	425b      	negs	r3, r3
 80013f0:	2103      	movs	r1, #3
 80013f2:	0018      	movs	r0, r3
 80013f4:	f7ff ff7c 	bl	80012f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f8:	4b05      	ldr	r3, [pc, #20]	@ (8001410 <SysTick_Config+0x44>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fe:	4b04      	ldr	r3, [pc, #16]	@ (8001410 <SysTick_Config+0x44>)
 8001400:	2207      	movs	r2, #7
 8001402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001404:	2300      	movs	r3, #0
}
 8001406:	0018      	movs	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	b002      	add	sp, #8
 800140c:	bd80      	pop	{r7, pc}
 800140e:	46c0      	nop			@ (mov r8, r8)
 8001410:	e000e010 	.word	0xe000e010

08001414 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	210f      	movs	r1, #15
 8001420:	187b      	adds	r3, r7, r1
 8001422:	1c02      	adds	r2, r0, #0
 8001424:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	187b      	adds	r3, r7, r1
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b25b      	sxtb	r3, r3
 800142e:	0011      	movs	r1, r2
 8001430:	0018      	movs	r0, r3
 8001432:	f7ff ff5d 	bl	80012f0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	46bd      	mov	sp, r7
 800143a:	b004      	add	sp, #16
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	0018      	movs	r0, r3
 800144a:	f7ff ffbf 	bl	80013cc <SysTick_Config>
 800144e:	0003      	movs	r3, r0
}
 8001450:	0018      	movs	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	b002      	add	sp, #8
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001466:	e149      	b.n	80016fc <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2101      	movs	r1, #1
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	4091      	lsls	r1, r2
 8001472:	000a      	movs	r2, r1
 8001474:	4013      	ands	r3, r2
 8001476:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d100      	bne.n	8001480 <HAL_GPIO_Init+0x28>
 800147e:	e13a      	b.n	80016f6 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2203      	movs	r2, #3
 8001486:	4013      	ands	r3, r2
 8001488:	2b01      	cmp	r3, #1
 800148a:	d005      	beq.n	8001498 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2203      	movs	r2, #3
 8001492:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001494:	2b02      	cmp	r3, #2
 8001496:	d130      	bne.n	80014fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	2203      	movs	r2, #3
 80014a4:	409a      	lsls	r2, r3
 80014a6:	0013      	movs	r3, r2
 80014a8:	43da      	mvns	r2, r3
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	68da      	ldr	r2, [r3, #12]
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	409a      	lsls	r2, r3
 80014ba:	0013      	movs	r3, r2
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014ce:	2201      	movs	r2, #1
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	409a      	lsls	r2, r3
 80014d4:	0013      	movs	r3, r2
 80014d6:	43da      	mvns	r2, r3
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	4013      	ands	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	091b      	lsrs	r3, r3, #4
 80014e4:	2201      	movs	r2, #1
 80014e6:	401a      	ands	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	409a      	lsls	r2, r3
 80014ec:	0013      	movs	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2203      	movs	r2, #3
 8001500:	4013      	ands	r3, r2
 8001502:	2b03      	cmp	r3, #3
 8001504:	d017      	beq.n	8001536 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	2203      	movs	r2, #3
 8001512:	409a      	lsls	r2, r3
 8001514:	0013      	movs	r3, r2
 8001516:	43da      	mvns	r2, r3
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	4013      	ands	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	689a      	ldr	r2, [r3, #8]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	409a      	lsls	r2, r3
 8001528:	0013      	movs	r3, r2
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2203      	movs	r2, #3
 800153c:	4013      	ands	r3, r2
 800153e:	2b02      	cmp	r3, #2
 8001540:	d123      	bne.n	800158a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	08da      	lsrs	r2, r3, #3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3208      	adds	r2, #8
 800154a:	0092      	lsls	r2, r2, #2
 800154c:	58d3      	ldr	r3, [r2, r3]
 800154e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	2207      	movs	r2, #7
 8001554:	4013      	ands	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	220f      	movs	r2, #15
 800155a:	409a      	lsls	r2, r3
 800155c:	0013      	movs	r3, r2
 800155e:	43da      	mvns	r2, r3
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	691a      	ldr	r2, [r3, #16]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	2107      	movs	r1, #7
 800156e:	400b      	ands	r3, r1
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	409a      	lsls	r2, r3
 8001574:	0013      	movs	r3, r2
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	08da      	lsrs	r2, r3, #3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3208      	adds	r2, #8
 8001584:	0092      	lsls	r2, r2, #2
 8001586:	6939      	ldr	r1, [r7, #16]
 8001588:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	2203      	movs	r2, #3
 8001596:	409a      	lsls	r2, r3
 8001598:	0013      	movs	r3, r2
 800159a:	43da      	mvns	r2, r3
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2203      	movs	r2, #3
 80015a8:	401a      	ands	r2, r3
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	409a      	lsls	r2, r3
 80015b0:	0013      	movs	r3, r2
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	23c0      	movs	r3, #192	@ 0xc0
 80015c4:	029b      	lsls	r3, r3, #10
 80015c6:	4013      	ands	r3, r2
 80015c8:	d100      	bne.n	80015cc <HAL_GPIO_Init+0x174>
 80015ca:	e094      	b.n	80016f6 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015cc:	4b51      	ldr	r3, [pc, #324]	@ (8001714 <HAL_GPIO_Init+0x2bc>)
 80015ce:	699a      	ldr	r2, [r3, #24]
 80015d0:	4b50      	ldr	r3, [pc, #320]	@ (8001714 <HAL_GPIO_Init+0x2bc>)
 80015d2:	2101      	movs	r1, #1
 80015d4:	430a      	orrs	r2, r1
 80015d6:	619a      	str	r2, [r3, #24]
 80015d8:	4b4e      	ldr	r3, [pc, #312]	@ (8001714 <HAL_GPIO_Init+0x2bc>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	2201      	movs	r2, #1
 80015de:	4013      	ands	r3, r2
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015e4:	4a4c      	ldr	r2, [pc, #304]	@ (8001718 <HAL_GPIO_Init+0x2c0>)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	3302      	adds	r3, #2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	589b      	ldr	r3, [r3, r2]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	2203      	movs	r2, #3
 80015f6:	4013      	ands	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	220f      	movs	r2, #15
 80015fc:	409a      	lsls	r2, r3
 80015fe:	0013      	movs	r3, r2
 8001600:	43da      	mvns	r2, r3
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	2390      	movs	r3, #144	@ 0x90
 800160c:	05db      	lsls	r3, r3, #23
 800160e:	429a      	cmp	r2, r3
 8001610:	d00d      	beq.n	800162e <HAL_GPIO_Init+0x1d6>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a41      	ldr	r2, [pc, #260]	@ (800171c <HAL_GPIO_Init+0x2c4>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d007      	beq.n	800162a <HAL_GPIO_Init+0x1d2>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a40      	ldr	r2, [pc, #256]	@ (8001720 <HAL_GPIO_Init+0x2c8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d101      	bne.n	8001626 <HAL_GPIO_Init+0x1ce>
 8001622:	2302      	movs	r3, #2
 8001624:	e004      	b.n	8001630 <HAL_GPIO_Init+0x1d8>
 8001626:	2305      	movs	r3, #5
 8001628:	e002      	b.n	8001630 <HAL_GPIO_Init+0x1d8>
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <HAL_GPIO_Init+0x1d8>
 800162e:	2300      	movs	r3, #0
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	2103      	movs	r1, #3
 8001634:	400a      	ands	r2, r1
 8001636:	0092      	lsls	r2, r2, #2
 8001638:	4093      	lsls	r3, r2
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001640:	4935      	ldr	r1, [pc, #212]	@ (8001718 <HAL_GPIO_Init+0x2c0>)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	089b      	lsrs	r3, r3, #2
 8001646:	3302      	adds	r3, #2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800164e:	4b35      	ldr	r3, [pc, #212]	@ (8001724 <HAL_GPIO_Init+0x2cc>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	43da      	mvns	r2, r3
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	2380      	movs	r3, #128	@ 0x80
 8001664:	035b      	lsls	r3, r3, #13
 8001666:	4013      	ands	r3, r2
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4313      	orrs	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001672:	4b2c      	ldr	r3, [pc, #176]	@ (8001724 <HAL_GPIO_Init+0x2cc>)
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001678:	4b2a      	ldr	r3, [pc, #168]	@ (8001724 <HAL_GPIO_Init+0x2cc>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	43da      	mvns	r2, r3
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4013      	ands	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	2380      	movs	r3, #128	@ 0x80
 800168e:	039b      	lsls	r3, r3, #14
 8001690:	4013      	ands	r3, r2
 8001692:	d003      	beq.n	800169c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800169c:	4b21      	ldr	r3, [pc, #132]	@ (8001724 <HAL_GPIO_Init+0x2cc>)
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80016a2:	4b20      	ldr	r3, [pc, #128]	@ (8001724 <HAL_GPIO_Init+0x2cc>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	43da      	mvns	r2, r3
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	2380      	movs	r3, #128	@ 0x80
 80016b8:	029b      	lsls	r3, r3, #10
 80016ba:	4013      	ands	r3, r2
 80016bc:	d003      	beq.n	80016c6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016c6:	4b17      	ldr	r3, [pc, #92]	@ (8001724 <HAL_GPIO_Init+0x2cc>)
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80016cc:	4b15      	ldr	r3, [pc, #84]	@ (8001724 <HAL_GPIO_Init+0x2cc>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	43da      	mvns	r2, r3
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	2380      	movs	r3, #128	@ 0x80
 80016e2:	025b      	lsls	r3, r3, #9
 80016e4:	4013      	ands	r3, r2
 80016e6:	d003      	beq.n	80016f0 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <HAL_GPIO_Init+0x2cc>)
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	3301      	adds	r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	40da      	lsrs	r2, r3
 8001704:	1e13      	subs	r3, r2, #0
 8001706:	d000      	beq.n	800170a <HAL_GPIO_Init+0x2b2>
 8001708:	e6ae      	b.n	8001468 <HAL_GPIO_Init+0x10>
  } 
}
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	46c0      	nop			@ (mov r8, r8)
 800170e:	46bd      	mov	sp, r7
 8001710:	b006      	add	sp, #24
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40021000 	.word	0x40021000
 8001718:	40010000 	.word	0x40010000
 800171c:	48000400 	.word	0x48000400
 8001720:	48000800 	.word	0x48000800
 8001724:	40010400 	.word	0x40010400

08001728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	0008      	movs	r0, r1
 8001732:	0011      	movs	r1, r2
 8001734:	1cbb      	adds	r3, r7, #2
 8001736:	1c02      	adds	r2, r0, #0
 8001738:	801a      	strh	r2, [r3, #0]
 800173a:	1c7b      	adds	r3, r7, #1
 800173c:	1c0a      	adds	r2, r1, #0
 800173e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001740:	1c7b      	adds	r3, r7, #1
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d004      	beq.n	8001752 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001748:	1cbb      	adds	r3, r7, #2
 800174a:	881a      	ldrh	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001750:	e003      	b.n	800175a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001752:	1cbb      	adds	r3, r7, #2
 8001754:	881a      	ldrh	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800175a:	46c0      	nop			@ (mov r8, r8)
 800175c:	46bd      	mov	sp, r7
 800175e:	b002      	add	sp, #8
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e08f      	b.n	8001896 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2241      	movs	r2, #65	@ 0x41
 800177a:	5c9b      	ldrb	r3, [r3, r2]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d107      	bne.n	8001792 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2240      	movs	r2, #64	@ 0x40
 8001786:	2100      	movs	r1, #0
 8001788:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	0018      	movs	r0, r3
 800178e:	f7fe fed7 	bl	8000540 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2241      	movs	r2, #65	@ 0x41
 8001796:	2124      	movs	r1, #36	@ 0x24
 8001798:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2101      	movs	r1, #1
 80017a6:	438a      	bics	r2, r1
 80017a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	493b      	ldr	r1, [pc, #236]	@ (80018a0 <HAL_I2C_Init+0x13c>)
 80017b4:	400a      	ands	r2, r1
 80017b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4938      	ldr	r1, [pc, #224]	@ (80018a4 <HAL_I2C_Init+0x140>)
 80017c4:	400a      	ands	r2, r1
 80017c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d108      	bne.n	80017e2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2180      	movs	r1, #128	@ 0x80
 80017da:	0209      	lsls	r1, r1, #8
 80017dc:	430a      	orrs	r2, r1
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	e007      	b.n	80017f2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2184      	movs	r1, #132	@ 0x84
 80017ec:	0209      	lsls	r1, r1, #8
 80017ee:	430a      	orrs	r2, r1
 80017f0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d109      	bne.n	800180e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	685a      	ldr	r2, [r3, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2180      	movs	r1, #128	@ 0x80
 8001806:	0109      	lsls	r1, r1, #4
 8001808:	430a      	orrs	r2, r1
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	e007      	b.n	800181e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4923      	ldr	r1, [pc, #140]	@ (80018a8 <HAL_I2C_Init+0x144>)
 800181a:	400a      	ands	r2, r1
 800181c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4920      	ldr	r1, [pc, #128]	@ (80018ac <HAL_I2C_Init+0x148>)
 800182a:	430a      	orrs	r2, r1
 800182c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68da      	ldr	r2, [r3, #12]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	491a      	ldr	r1, [pc, #104]	@ (80018a4 <HAL_I2C_Init+0x140>)
 800183a:	400a      	ands	r2, r1
 800183c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691a      	ldr	r2, [r3, #16]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	431a      	orrs	r2, r3
 8001848:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69d9      	ldr	r1, [r3, #28]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a1a      	ldr	r2, [r3, #32]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	430a      	orrs	r2, r1
 8001866:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2101      	movs	r1, #1
 8001874:	430a      	orrs	r2, r1
 8001876:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2241      	movs	r2, #65	@ 0x41
 8001882:	2120      	movs	r1, #32
 8001884:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2242      	movs	r2, #66	@ 0x42
 8001890:	2100      	movs	r1, #0
 8001892:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	0018      	movs	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	b002      	add	sp, #8
 800189c:	bd80      	pop	{r7, pc}
 800189e:	46c0      	nop			@ (mov r8, r8)
 80018a0:	f0ffffff 	.word	0xf0ffffff
 80018a4:	ffff7fff 	.word	0xffff7fff
 80018a8:	fffff7ff 	.word	0xfffff7ff
 80018ac:	02008000 	.word	0x02008000

080018b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2241      	movs	r2, #65	@ 0x41
 80018be:	5c9b      	ldrb	r3, [r3, r2]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b20      	cmp	r3, #32
 80018c4:	d138      	bne.n	8001938 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2240      	movs	r2, #64	@ 0x40
 80018ca:	5c9b      	ldrb	r3, [r3, r2]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d101      	bne.n	80018d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e032      	b.n	800193a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2240      	movs	r2, #64	@ 0x40
 80018d8:	2101      	movs	r1, #1
 80018da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2241      	movs	r2, #65	@ 0x41
 80018e0:	2124      	movs	r1, #36	@ 0x24
 80018e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2101      	movs	r1, #1
 80018f0:	438a      	bics	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4911      	ldr	r1, [pc, #68]	@ (8001944 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001900:	400a      	ands	r2, r1
 8001902:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6819      	ldr	r1, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2101      	movs	r1, #1
 8001920:	430a      	orrs	r2, r1
 8001922:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2241      	movs	r2, #65	@ 0x41
 8001928:	2120      	movs	r1, #32
 800192a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2240      	movs	r2, #64	@ 0x40
 8001930:	2100      	movs	r1, #0
 8001932:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001934:	2300      	movs	r3, #0
 8001936:	e000      	b.n	800193a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001938:	2302      	movs	r3, #2
  }
}
 800193a:	0018      	movs	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	b002      	add	sp, #8
 8001940:	bd80      	pop	{r7, pc}
 8001942:	46c0      	nop			@ (mov r8, r8)
 8001944:	ffffefff 	.word	0xffffefff

08001948 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2241      	movs	r2, #65	@ 0x41
 8001956:	5c9b      	ldrb	r3, [r3, r2]
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b20      	cmp	r3, #32
 800195c:	d139      	bne.n	80019d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2240      	movs	r2, #64	@ 0x40
 8001962:	5c9b      	ldrb	r3, [r3, r2]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d101      	bne.n	800196c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001968:	2302      	movs	r3, #2
 800196a:	e033      	b.n	80019d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2240      	movs	r2, #64	@ 0x40
 8001970:	2101      	movs	r1, #1
 8001972:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2241      	movs	r2, #65	@ 0x41
 8001978:	2124      	movs	r1, #36	@ 0x24
 800197a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2101      	movs	r1, #1
 8001988:	438a      	bics	r2, r1
 800198a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4a11      	ldr	r2, [pc, #68]	@ (80019dc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001998:	4013      	ands	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	021b      	lsls	r3, r3, #8
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2101      	movs	r1, #1
 80019ba:	430a      	orrs	r2, r1
 80019bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2241      	movs	r2, #65	@ 0x41
 80019c2:	2120      	movs	r1, #32
 80019c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2240      	movs	r2, #64	@ 0x40
 80019ca:	2100      	movs	r1, #0
 80019cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e000      	b.n	80019d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80019d2:	2302      	movs	r3, #2
  }
}
 80019d4:	0018      	movs	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	b004      	add	sp, #16
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	fffff0ff 	.word	0xfffff0ff

080019e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019e0:	b590      	push	{r4, r7, lr}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e0e4      	b.n	8001bbc <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a73      	ldr	r2, [pc, #460]	@ (8001bc4 <HAL_PCD_Init+0x1e4>)
 80019f6:	5c9b      	ldrb	r3, [r3, r2]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d108      	bne.n	8001a10 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	23a4      	movs	r3, #164	@ 0xa4
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	2100      	movs	r1, #0
 8001a06:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f7ff f854 	bl	8000ab8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a6c      	ldr	r2, [pc, #432]	@ (8001bc4 <HAL_PCD_Init+0x1e4>)
 8001a14:	2103      	movs	r1, #3
 8001a16:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f001 fbf9 	bl	8003214 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a22:	230f      	movs	r3, #15
 8001a24:	18fb      	adds	r3, r7, r3
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
 8001a2a:	e047      	b.n	8001abc <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a2c:	200f      	movs	r0, #15
 8001a2e:	183b      	adds	r3, r7, r0
 8001a30:	781a      	ldrb	r2, [r3, #0]
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	0013      	movs	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	189b      	adds	r3, r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	18cb      	adds	r3, r1, r3
 8001a3e:	3311      	adds	r3, #17
 8001a40:	2201      	movs	r2, #1
 8001a42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a44:	183b      	adds	r3, r7, r0
 8001a46:	781a      	ldrb	r2, [r3, #0]
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	0013      	movs	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	189b      	adds	r3, r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	18cb      	adds	r3, r1, r3
 8001a54:	3310      	adds	r3, #16
 8001a56:	183a      	adds	r2, r7, r0
 8001a58:	7812      	ldrb	r2, [r2, #0]
 8001a5a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a5c:	183b      	adds	r3, r7, r0
 8001a5e:	781a      	ldrb	r2, [r3, #0]
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	0013      	movs	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	189b      	adds	r3, r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	18cb      	adds	r3, r1, r3
 8001a6c:	3313      	adds	r3, #19
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a72:	183b      	adds	r3, r7, r0
 8001a74:	781a      	ldrb	r2, [r3, #0]
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	0013      	movs	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	189b      	adds	r3, r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	18cb      	adds	r3, r1, r3
 8001a82:	3320      	adds	r3, #32
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a88:	183b      	adds	r3, r7, r0
 8001a8a:	781a      	ldrb	r2, [r3, #0]
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	0013      	movs	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	189b      	adds	r3, r3, r2
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	18cb      	adds	r3, r1, r3
 8001a98:	3324      	adds	r3, #36	@ 0x24
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a9e:	183b      	adds	r3, r7, r0
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	1c5a      	adds	r2, r3, #1
 8001aa6:	0013      	movs	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	189b      	adds	r3, r3, r2
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	2200      	movs	r2, #0
 8001ab0:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ab2:	183b      	adds	r3, r7, r0
 8001ab4:	781a      	ldrb	r2, [r3, #0]
 8001ab6:	183b      	adds	r3, r7, r0
 8001ab8:	3201      	adds	r2, #1
 8001aba:	701a      	strb	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	791b      	ldrb	r3, [r3, #4]
 8001ac0:	210f      	movs	r1, #15
 8001ac2:	187a      	adds	r2, r7, r1
 8001ac4:	7812      	ldrb	r2, [r2, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d3b0      	bcc.n	8001a2c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aca:	187b      	adds	r3, r7, r1
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
 8001ad0:	e056      	b.n	8001b80 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ad2:	240f      	movs	r4, #15
 8001ad4:	193b      	adds	r3, r7, r4
 8001ad6:	781a      	ldrb	r2, [r3, #0]
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	2352      	movs	r3, #82	@ 0x52
 8001adc:	33ff      	adds	r3, #255	@ 0xff
 8001ade:	0019      	movs	r1, r3
 8001ae0:	0013      	movs	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	189b      	adds	r3, r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	18c3      	adds	r3, r0, r3
 8001aea:	185b      	adds	r3, r3, r1
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001af0:	193b      	adds	r3, r7, r4
 8001af2:	781a      	ldrb	r2, [r3, #0]
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	23a8      	movs	r3, #168	@ 0xa8
 8001af8:	0059      	lsls	r1, r3, #1
 8001afa:	0013      	movs	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	189b      	adds	r3, r3, r2
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	18c3      	adds	r3, r0, r3
 8001b04:	185b      	adds	r3, r3, r1
 8001b06:	193a      	adds	r2, r7, r4
 8001b08:	7812      	ldrb	r2, [r2, #0]
 8001b0a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b0c:	193b      	adds	r3, r7, r4
 8001b0e:	781a      	ldrb	r2, [r3, #0]
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	2354      	movs	r3, #84	@ 0x54
 8001b14:	33ff      	adds	r3, #255	@ 0xff
 8001b16:	0019      	movs	r1, r3
 8001b18:	0013      	movs	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	189b      	adds	r3, r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	18c3      	adds	r3, r0, r3
 8001b22:	185b      	adds	r3, r3, r1
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b28:	193b      	adds	r3, r7, r4
 8001b2a:	781a      	ldrb	r2, [r3, #0]
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	23b0      	movs	r3, #176	@ 0xb0
 8001b30:	0059      	lsls	r1, r3, #1
 8001b32:	0013      	movs	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	189b      	adds	r3, r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	18c3      	adds	r3, r0, r3
 8001b3c:	185b      	adds	r3, r3, r1
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b42:	193b      	adds	r3, r7, r4
 8001b44:	781a      	ldrb	r2, [r3, #0]
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	23b2      	movs	r3, #178	@ 0xb2
 8001b4a:	0059      	lsls	r1, r3, #1
 8001b4c:	0013      	movs	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	189b      	adds	r3, r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	18c3      	adds	r3, r0, r3
 8001b56:	185b      	adds	r3, r3, r1
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b5c:	193b      	adds	r3, r7, r4
 8001b5e:	781a      	ldrb	r2, [r3, #0]
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	23b4      	movs	r3, #180	@ 0xb4
 8001b64:	0059      	lsls	r1, r3, #1
 8001b66:	0013      	movs	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	189b      	adds	r3, r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	18c3      	adds	r3, r0, r3
 8001b70:	185b      	adds	r3, r3, r1
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b76:	193b      	adds	r3, r7, r4
 8001b78:	781a      	ldrb	r2, [r3, #0]
 8001b7a:	193b      	adds	r3, r7, r4
 8001b7c:	3201      	adds	r2, #1
 8001b7e:	701a      	strb	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	791b      	ldrb	r3, [r3, #4]
 8001b84:	220f      	movs	r2, #15
 8001b86:	18ba      	adds	r2, r7, r2
 8001b88:	7812      	ldrb	r2, [r2, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d3a1      	bcc.n	8001ad2 <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6818      	ldr	r0, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6859      	ldr	r1, [r3, #4]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	f001 fb56 	bl	8003248 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a07      	ldr	r2, [pc, #28]	@ (8001bc4 <HAL_PCD_Init+0x1e4>)
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	7a9b      	ldrb	r3, [r3, #10]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d103      	bne.n	8001bba <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f000 f807 	bl	8001bc8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b005      	add	sp, #20
 8001bc2:	bd90      	pop	{r4, r7, pc}
 8001bc4:	00000291 	.word	0x00000291

08001bc8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	23b4      	movs	r3, #180	@ 0xb4
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	2101      	movs	r1, #1
 8001bde:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	23b2      	movs	r3, #178	@ 0xb2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	2100      	movs	r1, #0
 8001be8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2254      	movs	r2, #84	@ 0x54
 8001bee:	5a9b      	ldrh	r3, [r3, r2]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	b299      	uxth	r1, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2254      	movs	r2, #84	@ 0x54
 8001bfc:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2254      	movs	r2, #84	@ 0x54
 8001c02:	5a9b      	ldrh	r3, [r3, r2]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	2202      	movs	r2, #2
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	b299      	uxth	r1, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2254      	movs	r2, #84	@ 0x54
 8001c10:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	0018      	movs	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	b004      	add	sp, #16
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d102      	bne.n	8001c30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	f000 fb76 	bl	800231c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2201      	movs	r2, #1
 8001c36:	4013      	ands	r3, r2
 8001c38:	d100      	bne.n	8001c3c <HAL_RCC_OscConfig+0x20>
 8001c3a:	e08e      	b.n	8001d5a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c3c:	4bc5      	ldr	r3, [pc, #788]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	220c      	movs	r2, #12
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d00e      	beq.n	8001c66 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c48:	4bc2      	ldr	r3, [pc, #776]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	220c      	movs	r2, #12
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d117      	bne.n	8001c84 <HAL_RCC_OscConfig+0x68>
 8001c54:	4bbf      	ldr	r3, [pc, #764]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	23c0      	movs	r3, #192	@ 0xc0
 8001c5a:	025b      	lsls	r3, r3, #9
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	2380      	movs	r3, #128	@ 0x80
 8001c60:	025b      	lsls	r3, r3, #9
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d10e      	bne.n	8001c84 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c66:	4bbb      	ldr	r3, [pc, #748]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	2380      	movs	r3, #128	@ 0x80
 8001c6c:	029b      	lsls	r3, r3, #10
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d100      	bne.n	8001c74 <HAL_RCC_OscConfig+0x58>
 8001c72:	e071      	b.n	8001d58 <HAL_RCC_OscConfig+0x13c>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d000      	beq.n	8001c7e <HAL_RCC_OscConfig+0x62>
 8001c7c:	e06c      	b.n	8001d58 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	f000 fb4c 	bl	800231c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d107      	bne.n	8001c9c <HAL_RCC_OscConfig+0x80>
 8001c8c:	4bb1      	ldr	r3, [pc, #708]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4bb0      	ldr	r3, [pc, #704]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001c92:	2180      	movs	r1, #128	@ 0x80
 8001c94:	0249      	lsls	r1, r1, #9
 8001c96:	430a      	orrs	r2, r1
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	e02f      	b.n	8001cfc <HAL_RCC_OscConfig+0xe0>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10c      	bne.n	8001cbe <HAL_RCC_OscConfig+0xa2>
 8001ca4:	4bab      	ldr	r3, [pc, #684]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4baa      	ldr	r3, [pc, #680]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001caa:	49ab      	ldr	r1, [pc, #684]	@ (8001f58 <HAL_RCC_OscConfig+0x33c>)
 8001cac:	400a      	ands	r2, r1
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	4ba8      	ldr	r3, [pc, #672]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4ba7      	ldr	r3, [pc, #668]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001cb6:	49a9      	ldr	r1, [pc, #676]	@ (8001f5c <HAL_RCC_OscConfig+0x340>)
 8001cb8:	400a      	ands	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	e01e      	b.n	8001cfc <HAL_RCC_OscConfig+0xe0>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b05      	cmp	r3, #5
 8001cc4:	d10e      	bne.n	8001ce4 <HAL_RCC_OscConfig+0xc8>
 8001cc6:	4ba3      	ldr	r3, [pc, #652]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	4ba2      	ldr	r3, [pc, #648]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001ccc:	2180      	movs	r1, #128	@ 0x80
 8001cce:	02c9      	lsls	r1, r1, #11
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	4b9f      	ldr	r3, [pc, #636]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b9e      	ldr	r3, [pc, #632]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001cda:	2180      	movs	r1, #128	@ 0x80
 8001cdc:	0249      	lsls	r1, r1, #9
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	e00b      	b.n	8001cfc <HAL_RCC_OscConfig+0xe0>
 8001ce4:	4b9b      	ldr	r3, [pc, #620]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b9a      	ldr	r3, [pc, #616]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001cea:	499b      	ldr	r1, [pc, #620]	@ (8001f58 <HAL_RCC_OscConfig+0x33c>)
 8001cec:	400a      	ands	r2, r1
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	4b98      	ldr	r3, [pc, #608]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b97      	ldr	r3, [pc, #604]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001cf6:	4999      	ldr	r1, [pc, #612]	@ (8001f5c <HAL_RCC_OscConfig+0x340>)
 8001cf8:	400a      	ands	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d014      	beq.n	8001d2e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7fe ff94 	bl	8000c30 <HAL_GetTick>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d0e:	f7fe ff8f 	bl	8000c30 <HAL_GetTick>
 8001d12:	0002      	movs	r2, r0
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b64      	cmp	r3, #100	@ 0x64
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e2fd      	b.n	800231c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d20:	4b8c      	ldr	r3, [pc, #560]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	2380      	movs	r3, #128	@ 0x80
 8001d26:	029b      	lsls	r3, r3, #10
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0xf2>
 8001d2c:	e015      	b.n	8001d5a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2e:	f7fe ff7f 	bl	8000c30 <HAL_GetTick>
 8001d32:	0003      	movs	r3, r0
 8001d34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d38:	f7fe ff7a 	bl	8000c30 <HAL_GetTick>
 8001d3c:	0002      	movs	r2, r0
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b64      	cmp	r3, #100	@ 0x64
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e2e8      	b.n	800231c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4a:	4b82      	ldr	r3, [pc, #520]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	2380      	movs	r3, #128	@ 0x80
 8001d50:	029b      	lsls	r3, r3, #10
 8001d52:	4013      	ands	r3, r2
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x11c>
 8001d56:	e000      	b.n	8001d5a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d58:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	4013      	ands	r3, r2
 8001d62:	d100      	bne.n	8001d66 <HAL_RCC_OscConfig+0x14a>
 8001d64:	e06c      	b.n	8001e40 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d66:	4b7b      	ldr	r3, [pc, #492]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d00e      	beq.n	8001d8e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d70:	4b78      	ldr	r3, [pc, #480]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	220c      	movs	r2, #12
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d11f      	bne.n	8001dbc <HAL_RCC_OscConfig+0x1a0>
 8001d7c:	4b75      	ldr	r3, [pc, #468]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	23c0      	movs	r3, #192	@ 0xc0
 8001d82:	025b      	lsls	r3, r3, #9
 8001d84:	401a      	ands	r2, r3
 8001d86:	2380      	movs	r3, #128	@ 0x80
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d116      	bne.n	8001dbc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8e:	4b71      	ldr	r3, [pc, #452]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2202      	movs	r2, #2
 8001d94:	4013      	ands	r3, r2
 8001d96:	d005      	beq.n	8001da4 <HAL_RCC_OscConfig+0x188>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d001      	beq.n	8001da4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e2bb      	b.n	800231c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da4:	4b6b      	ldr	r3, [pc, #428]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	22f8      	movs	r2, #248	@ 0xf8
 8001daa:	4393      	bics	r3, r2
 8001dac:	0019      	movs	r1, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	00da      	lsls	r2, r3, #3
 8001db4:	4b67      	ldr	r3, [pc, #412]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001db6:	430a      	orrs	r2, r1
 8001db8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dba:	e041      	b.n	8001e40 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d024      	beq.n	8001e0e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc4:	4b63      	ldr	r3, [pc, #396]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b62      	ldr	r3, [pc, #392]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001dca:	2101      	movs	r1, #1
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd0:	f7fe ff2e 	bl	8000c30 <HAL_GetTick>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dda:	f7fe ff29 	bl	8000c30 <HAL_GetTick>
 8001dde:	0002      	movs	r2, r0
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e297      	b.n	800231c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dec:	4b59      	ldr	r3, [pc, #356]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2202      	movs	r2, #2
 8001df2:	4013      	ands	r3, r2
 8001df4:	d0f1      	beq.n	8001dda <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df6:	4b57      	ldr	r3, [pc, #348]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	22f8      	movs	r2, #248	@ 0xf8
 8001dfc:	4393      	bics	r3, r2
 8001dfe:	0019      	movs	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	00da      	lsls	r2, r3, #3
 8001e06:	4b53      	ldr	r3, [pc, #332]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	e018      	b.n	8001e40 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e0e:	4b51      	ldr	r3, [pc, #324]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	4b50      	ldr	r3, [pc, #320]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001e14:	2101      	movs	r1, #1
 8001e16:	438a      	bics	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1a:	f7fe ff09 	bl	8000c30 <HAL_GetTick>
 8001e1e:	0003      	movs	r3, r0
 8001e20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e24:	f7fe ff04 	bl	8000c30 <HAL_GetTick>
 8001e28:	0002      	movs	r2, r0
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e272      	b.n	800231c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e36:	4b47      	ldr	r3, [pc, #284]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d1f1      	bne.n	8001e24 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2208      	movs	r2, #8
 8001e46:	4013      	ands	r3, r2
 8001e48:	d036      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d019      	beq.n	8001e86 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e52:	4b40      	ldr	r3, [pc, #256]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001e54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e56:	4b3f      	ldr	r3, [pc, #252]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001e58:	2101      	movs	r1, #1
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5e:	f7fe fee7 	bl	8000c30 <HAL_GetTick>
 8001e62:	0003      	movs	r3, r0
 8001e64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e68:	f7fe fee2 	bl	8000c30 <HAL_GetTick>
 8001e6c:	0002      	movs	r2, r0
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e250      	b.n	800231c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7a:	4b36      	ldr	r3, [pc, #216]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7e:	2202      	movs	r2, #2
 8001e80:	4013      	ands	r3, r2
 8001e82:	d0f1      	beq.n	8001e68 <HAL_RCC_OscConfig+0x24c>
 8001e84:	e018      	b.n	8001eb8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e86:	4b33      	ldr	r3, [pc, #204]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001e88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e8a:	4b32      	ldr	r3, [pc, #200]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	438a      	bics	r2, r1
 8001e90:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e92:	f7fe fecd 	bl	8000c30 <HAL_GetTick>
 8001e96:	0003      	movs	r3, r0
 8001e98:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e9c:	f7fe fec8 	bl	8000c30 <HAL_GetTick>
 8001ea0:	0002      	movs	r2, r0
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e236      	b.n	800231c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eae:	4b29      	ldr	r3, [pc, #164]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d1f1      	bne.n	8001e9c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d100      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x2a8>
 8001ec2:	e0b5      	b.n	8002030 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec4:	201f      	movs	r0, #31
 8001ec6:	183b      	adds	r3, r7, r0
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ecc:	4b21      	ldr	r3, [pc, #132]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001ece:	69da      	ldr	r2, [r3, #28]
 8001ed0:	2380      	movs	r3, #128	@ 0x80
 8001ed2:	055b      	lsls	r3, r3, #21
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d110      	bne.n	8001efa <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed8:	4b1e      	ldr	r3, [pc, #120]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001eda:	69da      	ldr	r2, [r3, #28]
 8001edc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001ede:	2180      	movs	r1, #128	@ 0x80
 8001ee0:	0549      	lsls	r1, r1, #21
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	61da      	str	r2, [r3, #28]
 8001ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001ee8:	69da      	ldr	r2, [r3, #28]
 8001eea:	2380      	movs	r3, #128	@ 0x80
 8001eec:	055b      	lsls	r3, r3, #21
 8001eee:	4013      	ands	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ef4:	183b      	adds	r3, r7, r0
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efa:	4b19      	ldr	r3, [pc, #100]	@ (8001f60 <HAL_RCC_OscConfig+0x344>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	2380      	movs	r3, #128	@ 0x80
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	4013      	ands	r3, r2
 8001f04:	d11a      	bne.n	8001f3c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f06:	4b16      	ldr	r3, [pc, #88]	@ (8001f60 <HAL_RCC_OscConfig+0x344>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <HAL_RCC_OscConfig+0x344>)
 8001f0c:	2180      	movs	r1, #128	@ 0x80
 8001f0e:	0049      	lsls	r1, r1, #1
 8001f10:	430a      	orrs	r2, r1
 8001f12:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f14:	f7fe fe8c 	bl	8000c30 <HAL_GetTick>
 8001f18:	0003      	movs	r3, r0
 8001f1a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1e:	f7fe fe87 	bl	8000c30 <HAL_GetTick>
 8001f22:	0002      	movs	r2, r0
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b64      	cmp	r3, #100	@ 0x64
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e1f5      	b.n	800231c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f30:	4b0b      	ldr	r3, [pc, #44]	@ (8001f60 <HAL_RCC_OscConfig+0x344>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	2380      	movs	r3, #128	@ 0x80
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d10f      	bne.n	8001f64 <HAL_RCC_OscConfig+0x348>
 8001f44:	4b03      	ldr	r3, [pc, #12]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001f46:	6a1a      	ldr	r2, [r3, #32]
 8001f48:	4b02      	ldr	r3, [pc, #8]	@ (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	621a      	str	r2, [r3, #32]
 8001f50:	e036      	b.n	8001fc0 <HAL_RCC_OscConfig+0x3a4>
 8001f52:	46c0      	nop			@ (mov r8, r8)
 8001f54:	40021000 	.word	0x40021000
 8001f58:	fffeffff 	.word	0xfffeffff
 8001f5c:	fffbffff 	.word	0xfffbffff
 8001f60:	40007000 	.word	0x40007000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10c      	bne.n	8001f86 <HAL_RCC_OscConfig+0x36a>
 8001f6c:	4bca      	ldr	r3, [pc, #808]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001f6e:	6a1a      	ldr	r2, [r3, #32]
 8001f70:	4bc9      	ldr	r3, [pc, #804]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001f72:	2101      	movs	r1, #1
 8001f74:	438a      	bics	r2, r1
 8001f76:	621a      	str	r2, [r3, #32]
 8001f78:	4bc7      	ldr	r3, [pc, #796]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001f7a:	6a1a      	ldr	r2, [r3, #32]
 8001f7c:	4bc6      	ldr	r3, [pc, #792]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001f7e:	2104      	movs	r1, #4
 8001f80:	438a      	bics	r2, r1
 8001f82:	621a      	str	r2, [r3, #32]
 8001f84:	e01c      	b.n	8001fc0 <HAL_RCC_OscConfig+0x3a4>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2b05      	cmp	r3, #5
 8001f8c:	d10c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x38c>
 8001f8e:	4bc2      	ldr	r3, [pc, #776]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001f90:	6a1a      	ldr	r2, [r3, #32]
 8001f92:	4bc1      	ldr	r3, [pc, #772]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001f94:	2104      	movs	r1, #4
 8001f96:	430a      	orrs	r2, r1
 8001f98:	621a      	str	r2, [r3, #32]
 8001f9a:	4bbf      	ldr	r3, [pc, #764]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001f9c:	6a1a      	ldr	r2, [r3, #32]
 8001f9e:	4bbe      	ldr	r3, [pc, #760]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	621a      	str	r2, [r3, #32]
 8001fa6:	e00b      	b.n	8001fc0 <HAL_RCC_OscConfig+0x3a4>
 8001fa8:	4bbb      	ldr	r3, [pc, #748]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001faa:	6a1a      	ldr	r2, [r3, #32]
 8001fac:	4bba      	ldr	r3, [pc, #744]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001fae:	2101      	movs	r1, #1
 8001fb0:	438a      	bics	r2, r1
 8001fb2:	621a      	str	r2, [r3, #32]
 8001fb4:	4bb8      	ldr	r3, [pc, #736]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001fb6:	6a1a      	ldr	r2, [r3, #32]
 8001fb8:	4bb7      	ldr	r3, [pc, #732]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001fba:	2104      	movs	r1, #4
 8001fbc:	438a      	bics	r2, r1
 8001fbe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d014      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc8:	f7fe fe32 	bl	8000c30 <HAL_GetTick>
 8001fcc:	0003      	movs	r3, r0
 8001fce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd0:	e009      	b.n	8001fe6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd2:	f7fe fe2d 	bl	8000c30 <HAL_GetTick>
 8001fd6:	0002      	movs	r2, r0
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	4aaf      	ldr	r2, [pc, #700]	@ (800229c <HAL_RCC_OscConfig+0x680>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e19a      	b.n	800231c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe6:	4bac      	ldr	r3, [pc, #688]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	2202      	movs	r2, #2
 8001fec:	4013      	ands	r3, r2
 8001fee:	d0f0      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x3b6>
 8001ff0:	e013      	b.n	800201a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff2:	f7fe fe1d 	bl	8000c30 <HAL_GetTick>
 8001ff6:	0003      	movs	r3, r0
 8001ff8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ffa:	e009      	b.n	8002010 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ffc:	f7fe fe18 	bl	8000c30 <HAL_GetTick>
 8002000:	0002      	movs	r2, r0
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	4aa5      	ldr	r2, [pc, #660]	@ (800229c <HAL_RCC_OscConfig+0x680>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e185      	b.n	800231c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002010:	4ba1      	ldr	r3, [pc, #644]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	2202      	movs	r2, #2
 8002016:	4013      	ands	r3, r2
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800201a:	231f      	movs	r3, #31
 800201c:	18fb      	adds	r3, r7, r3
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d105      	bne.n	8002030 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002024:	4b9c      	ldr	r3, [pc, #624]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002026:	69da      	ldr	r2, [r3, #28]
 8002028:	4b9b      	ldr	r3, [pc, #620]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 800202a:	499d      	ldr	r1, [pc, #628]	@ (80022a0 <HAL_RCC_OscConfig+0x684>)
 800202c:	400a      	ands	r2, r1
 800202e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2210      	movs	r2, #16
 8002036:	4013      	ands	r3, r2
 8002038:	d063      	beq.n	8002102 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d12a      	bne.n	8002098 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002042:	4b95      	ldr	r3, [pc, #596]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002044:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002046:	4b94      	ldr	r3, [pc, #592]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002048:	2104      	movs	r1, #4
 800204a:	430a      	orrs	r2, r1
 800204c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800204e:	4b92      	ldr	r3, [pc, #584]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002050:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002052:	4b91      	ldr	r3, [pc, #580]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002054:	2101      	movs	r1, #1
 8002056:	430a      	orrs	r2, r1
 8002058:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205a:	f7fe fde9 	bl	8000c30 <HAL_GetTick>
 800205e:	0003      	movs	r3, r0
 8002060:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002064:	f7fe fde4 	bl	8000c30 <HAL_GetTick>
 8002068:	0002      	movs	r2, r0
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e152      	b.n	800231c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002076:	4b88      	ldr	r3, [pc, #544]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800207a:	2202      	movs	r2, #2
 800207c:	4013      	ands	r3, r2
 800207e:	d0f1      	beq.n	8002064 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002080:	4b85      	ldr	r3, [pc, #532]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002084:	22f8      	movs	r2, #248	@ 0xf8
 8002086:	4393      	bics	r3, r2
 8002088:	0019      	movs	r1, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	00da      	lsls	r2, r3, #3
 8002090:	4b81      	ldr	r3, [pc, #516]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002092:	430a      	orrs	r2, r1
 8002094:	635a      	str	r2, [r3, #52]	@ 0x34
 8002096:	e034      	b.n	8002102 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	3305      	adds	r3, #5
 800209e:	d111      	bne.n	80020c4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80020a0:	4b7d      	ldr	r3, [pc, #500]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 80020a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020a4:	4b7c      	ldr	r3, [pc, #496]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 80020a6:	2104      	movs	r1, #4
 80020a8:	438a      	bics	r2, r1
 80020aa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020ac:	4b7a      	ldr	r3, [pc, #488]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 80020ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020b0:	22f8      	movs	r2, #248	@ 0xf8
 80020b2:	4393      	bics	r3, r2
 80020b4:	0019      	movs	r1, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	00da      	lsls	r2, r3, #3
 80020bc:	4b76      	ldr	r3, [pc, #472]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 80020be:	430a      	orrs	r2, r1
 80020c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80020c2:	e01e      	b.n	8002102 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80020c4:	4b74      	ldr	r3, [pc, #464]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 80020c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020c8:	4b73      	ldr	r3, [pc, #460]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 80020ca:	2104      	movs	r1, #4
 80020cc:	430a      	orrs	r2, r1
 80020ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80020d0:	4b71      	ldr	r3, [pc, #452]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 80020d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020d4:	4b70      	ldr	r3, [pc, #448]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 80020d6:	2101      	movs	r1, #1
 80020d8:	438a      	bics	r2, r1
 80020da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020dc:	f7fe fda8 	bl	8000c30 <HAL_GetTick>
 80020e0:	0003      	movs	r3, r0
 80020e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020e6:	f7fe fda3 	bl	8000c30 <HAL_GetTick>
 80020ea:	0002      	movs	r2, r0
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e111      	b.n	800231c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80020f8:	4b67      	ldr	r3, [pc, #412]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 80020fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020fc:	2202      	movs	r2, #2
 80020fe:	4013      	ands	r3, r2
 8002100:	d1f1      	bne.n	80020e6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2220      	movs	r2, #32
 8002108:	4013      	ands	r3, r2
 800210a:	d05c      	beq.n	80021c6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800210c:	4b62      	ldr	r3, [pc, #392]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	220c      	movs	r2, #12
 8002112:	4013      	ands	r3, r2
 8002114:	2b0c      	cmp	r3, #12
 8002116:	d00e      	beq.n	8002136 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002118:	4b5f      	ldr	r3, [pc, #380]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	220c      	movs	r2, #12
 800211e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002120:	2b08      	cmp	r3, #8
 8002122:	d114      	bne.n	800214e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002124:	4b5c      	ldr	r3, [pc, #368]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	23c0      	movs	r3, #192	@ 0xc0
 800212a:	025b      	lsls	r3, r3, #9
 800212c:	401a      	ands	r2, r3
 800212e:	23c0      	movs	r3, #192	@ 0xc0
 8002130:	025b      	lsls	r3, r3, #9
 8002132:	429a      	cmp	r2, r3
 8002134:	d10b      	bne.n	800214e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002136:	4b58      	ldr	r3, [pc, #352]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002138:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800213a:	2380      	movs	r3, #128	@ 0x80
 800213c:	029b      	lsls	r3, r3, #10
 800213e:	4013      	ands	r3, r2
 8002140:	d040      	beq.n	80021c4 <HAL_RCC_OscConfig+0x5a8>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d03c      	beq.n	80021c4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e0e6      	b.n	800231c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d01b      	beq.n	800218e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002156:	4b50      	ldr	r3, [pc, #320]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002158:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800215a:	4b4f      	ldr	r3, [pc, #316]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 800215c:	2180      	movs	r1, #128	@ 0x80
 800215e:	0249      	lsls	r1, r1, #9
 8002160:	430a      	orrs	r2, r1
 8002162:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7fe fd64 	bl	8000c30 <HAL_GetTick>
 8002168:	0003      	movs	r3, r0
 800216a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800216e:	f7fe fd5f 	bl	8000c30 <HAL_GetTick>
 8002172:	0002      	movs	r2, r0
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e0cd      	b.n	800231c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002180:	4b45      	ldr	r3, [pc, #276]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002182:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002184:	2380      	movs	r3, #128	@ 0x80
 8002186:	029b      	lsls	r3, r3, #10
 8002188:	4013      	ands	r3, r2
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x552>
 800218c:	e01b      	b.n	80021c6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800218e:	4b42      	ldr	r3, [pc, #264]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002190:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002192:	4b41      	ldr	r3, [pc, #260]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002194:	4943      	ldr	r1, [pc, #268]	@ (80022a4 <HAL_RCC_OscConfig+0x688>)
 8002196:	400a      	ands	r2, r1
 8002198:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219a:	f7fe fd49 	bl	8000c30 <HAL_GetTick>
 800219e:	0003      	movs	r3, r0
 80021a0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021a4:	f7fe fd44 	bl	8000c30 <HAL_GetTick>
 80021a8:	0002      	movs	r2, r0
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e0b2      	b.n	800231c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80021b6:	4b38      	ldr	r3, [pc, #224]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 80021b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021ba:	2380      	movs	r3, #128	@ 0x80
 80021bc:	029b      	lsls	r3, r3, #10
 80021be:	4013      	ands	r3, r2
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x588>
 80021c2:	e000      	b.n	80021c6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80021c4:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d100      	bne.n	80021d0 <HAL_RCC_OscConfig+0x5b4>
 80021ce:	e0a4      	b.n	800231a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021d0:	4b31      	ldr	r3, [pc, #196]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	220c      	movs	r2, #12
 80021d6:	4013      	ands	r3, r2
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d100      	bne.n	80021de <HAL_RCC_OscConfig+0x5c2>
 80021dc:	e078      	b.n	80022d0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d14c      	bne.n	8002280 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 80021ec:	492e      	ldr	r1, [pc, #184]	@ (80022a8 <HAL_RCC_OscConfig+0x68c>)
 80021ee:	400a      	ands	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f2:	f7fe fd1d 	bl	8000c30 <HAL_GetTick>
 80021f6:	0003      	movs	r3, r0
 80021f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021fc:	f7fe fd18 	bl	8000c30 <HAL_GetTick>
 8002200:	0002      	movs	r2, r0
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e086      	b.n	800231c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800220e:	4b22      	ldr	r3, [pc, #136]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	2380      	movs	r3, #128	@ 0x80
 8002214:	049b      	lsls	r3, r3, #18
 8002216:	4013      	ands	r3, r2
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800221a:	4b1f      	ldr	r3, [pc, #124]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 800221c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800221e:	220f      	movs	r2, #15
 8002220:	4393      	bics	r3, r2
 8002222:	0019      	movs	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002228:	4b1b      	ldr	r3, [pc, #108]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 800222a:	430a      	orrs	r2, r1
 800222c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800222e:	4b1a      	ldr	r3, [pc, #104]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	4a1e      	ldr	r2, [pc, #120]	@ (80022ac <HAL_RCC_OscConfig+0x690>)
 8002234:	4013      	ands	r3, r2
 8002236:	0019      	movs	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002240:	431a      	orrs	r2, r3
 8002242:	4b15      	ldr	r3, [pc, #84]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002244:	430a      	orrs	r2, r1
 8002246:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002248:	4b13      	ldr	r3, [pc, #76]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4b12      	ldr	r3, [pc, #72]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 800224e:	2180      	movs	r1, #128	@ 0x80
 8002250:	0449      	lsls	r1, r1, #17
 8002252:	430a      	orrs	r2, r1
 8002254:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002256:	f7fe fceb 	bl	8000c30 <HAL_GetTick>
 800225a:	0003      	movs	r3, r0
 800225c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002260:	f7fe fce6 	bl	8000c30 <HAL_GetTick>
 8002264:	0002      	movs	r2, r0
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e054      	b.n	800231c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002272:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	2380      	movs	r3, #128	@ 0x80
 8002278:	049b      	lsls	r3, r3, #18
 800227a:	4013      	ands	r3, r2
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0x644>
 800227e:	e04c      	b.n	800231a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002280:	4b05      	ldr	r3, [pc, #20]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b04      	ldr	r3, [pc, #16]	@ (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002286:	4908      	ldr	r1, [pc, #32]	@ (80022a8 <HAL_RCC_OscConfig+0x68c>)
 8002288:	400a      	ands	r2, r1
 800228a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7fe fcd0 	bl	8000c30 <HAL_GetTick>
 8002290:	0003      	movs	r3, r0
 8002292:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002294:	e015      	b.n	80022c2 <HAL_RCC_OscConfig+0x6a6>
 8002296:	46c0      	nop			@ (mov r8, r8)
 8002298:	40021000 	.word	0x40021000
 800229c:	00001388 	.word	0x00001388
 80022a0:	efffffff 	.word	0xefffffff
 80022a4:	fffeffff 	.word	0xfffeffff
 80022a8:	feffffff 	.word	0xfeffffff
 80022ac:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b0:	f7fe fcbe 	bl	8000c30 <HAL_GetTick>
 80022b4:	0002      	movs	r2, r0
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e02c      	b.n	800231c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c2:	4b18      	ldr	r3, [pc, #96]	@ (8002324 <HAL_RCC_OscConfig+0x708>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	2380      	movs	r3, #128	@ 0x80
 80022c8:	049b      	lsls	r3, r3, #18
 80022ca:	4013      	ands	r3, r2
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x694>
 80022ce:	e024      	b.n	800231a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e01f      	b.n	800231c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80022dc:	4b11      	ldr	r3, [pc, #68]	@ (8002324 <HAL_RCC_OscConfig+0x708>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80022e2:	4b10      	ldr	r3, [pc, #64]	@ (8002324 <HAL_RCC_OscConfig+0x708>)
 80022e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	23c0      	movs	r3, #192	@ 0xc0
 80022ec:	025b      	lsls	r3, r3, #9
 80022ee:	401a      	ands	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d10e      	bne.n	8002316 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	220f      	movs	r2, #15
 80022fc:	401a      	ands	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002302:	429a      	cmp	r2, r3
 8002304:	d107      	bne.n	8002316 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	23f0      	movs	r3, #240	@ 0xf0
 800230a:	039b      	lsls	r3, r3, #14
 800230c:	401a      	ands	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002312:	429a      	cmp	r2, r3
 8002314:	d001      	beq.n	800231a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	0018      	movs	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	b008      	add	sp, #32
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40021000 	.word	0x40021000

08002328 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0bf      	b.n	80024bc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800233c:	4b61      	ldr	r3, [pc, #388]	@ (80024c4 <HAL_RCC_ClockConfig+0x19c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2201      	movs	r2, #1
 8002342:	4013      	ands	r3, r2
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d911      	bls.n	800236e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234a:	4b5e      	ldr	r3, [pc, #376]	@ (80024c4 <HAL_RCC_ClockConfig+0x19c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2201      	movs	r2, #1
 8002350:	4393      	bics	r3, r2
 8002352:	0019      	movs	r1, r3
 8002354:	4b5b      	ldr	r3, [pc, #364]	@ (80024c4 <HAL_RCC_ClockConfig+0x19c>)
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235c:	4b59      	ldr	r3, [pc, #356]	@ (80024c4 <HAL_RCC_ClockConfig+0x19c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2201      	movs	r2, #1
 8002362:	4013      	ands	r3, r2
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d001      	beq.n	800236e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e0a6      	b.n	80024bc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2202      	movs	r2, #2
 8002374:	4013      	ands	r3, r2
 8002376:	d015      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2204      	movs	r2, #4
 800237e:	4013      	ands	r3, r2
 8002380:	d006      	beq.n	8002390 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002382:	4b51      	ldr	r3, [pc, #324]	@ (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	4b50      	ldr	r3, [pc, #320]	@ (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002388:	21e0      	movs	r1, #224	@ 0xe0
 800238a:	00c9      	lsls	r1, r1, #3
 800238c:	430a      	orrs	r2, r1
 800238e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002390:	4b4d      	ldr	r3, [pc, #308]	@ (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	22f0      	movs	r2, #240	@ 0xf0
 8002396:	4393      	bics	r3, r2
 8002398:	0019      	movs	r1, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	4b4a      	ldr	r3, [pc, #296]	@ (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 80023a0:	430a      	orrs	r2, r1
 80023a2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2201      	movs	r2, #1
 80023aa:	4013      	ands	r3, r2
 80023ac:	d04c      	beq.n	8002448 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d107      	bne.n	80023c6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	4b44      	ldr	r3, [pc, #272]	@ (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	2380      	movs	r3, #128	@ 0x80
 80023bc:	029b      	lsls	r3, r3, #10
 80023be:	4013      	ands	r3, r2
 80023c0:	d120      	bne.n	8002404 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e07a      	b.n	80024bc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d107      	bne.n	80023de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ce:	4b3e      	ldr	r3, [pc, #248]	@ (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	2380      	movs	r3, #128	@ 0x80
 80023d4:	049b      	lsls	r3, r3, #18
 80023d6:	4013      	ands	r3, r2
 80023d8:	d114      	bne.n	8002404 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e06e      	b.n	80024bc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d107      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80023e6:	4b38      	ldr	r3, [pc, #224]	@ (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 80023e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023ea:	2380      	movs	r3, #128	@ 0x80
 80023ec:	029b      	lsls	r3, r3, #10
 80023ee:	4013      	ands	r3, r2
 80023f0:	d108      	bne.n	8002404 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e062      	b.n	80024bc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f6:	4b34      	ldr	r3, [pc, #208]	@ (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2202      	movs	r2, #2
 80023fc:	4013      	ands	r3, r2
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e05b      	b.n	80024bc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002404:	4b30      	ldr	r3, [pc, #192]	@ (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2203      	movs	r2, #3
 800240a:	4393      	bics	r3, r2
 800240c:	0019      	movs	r1, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	4b2d      	ldr	r3, [pc, #180]	@ (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002414:	430a      	orrs	r2, r1
 8002416:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002418:	f7fe fc0a 	bl	8000c30 <HAL_GetTick>
 800241c:	0003      	movs	r3, r0
 800241e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002420:	e009      	b.n	8002436 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002422:	f7fe fc05 	bl	8000c30 <HAL_GetTick>
 8002426:	0002      	movs	r2, r0
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	4a27      	ldr	r2, [pc, #156]	@ (80024cc <HAL_RCC_ClockConfig+0x1a4>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e042      	b.n	80024bc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002436:	4b24      	ldr	r3, [pc, #144]	@ (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	220c      	movs	r2, #12
 800243c:	401a      	ands	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	429a      	cmp	r2, r3
 8002446:	d1ec      	bne.n	8002422 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002448:	4b1e      	ldr	r3, [pc, #120]	@ (80024c4 <HAL_RCC_ClockConfig+0x19c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2201      	movs	r2, #1
 800244e:	4013      	ands	r3, r2
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d211      	bcs.n	800247a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002456:	4b1b      	ldr	r3, [pc, #108]	@ (80024c4 <HAL_RCC_ClockConfig+0x19c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2201      	movs	r2, #1
 800245c:	4393      	bics	r3, r2
 800245e:	0019      	movs	r1, r3
 8002460:	4b18      	ldr	r3, [pc, #96]	@ (80024c4 <HAL_RCC_ClockConfig+0x19c>)
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002468:	4b16      	ldr	r3, [pc, #88]	@ (80024c4 <HAL_RCC_ClockConfig+0x19c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2201      	movs	r2, #1
 800246e:	4013      	ands	r3, r2
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d001      	beq.n	800247a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e020      	b.n	80024bc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2204      	movs	r2, #4
 8002480:	4013      	ands	r3, r2
 8002482:	d009      	beq.n	8002498 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002484:	4b10      	ldr	r3, [pc, #64]	@ (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4a11      	ldr	r2, [pc, #68]	@ (80024d0 <HAL_RCC_ClockConfig+0x1a8>)
 800248a:	4013      	ands	r3, r2
 800248c:	0019      	movs	r1, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	4b0d      	ldr	r3, [pc, #52]	@ (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002494:	430a      	orrs	r2, r1
 8002496:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002498:	f000 f820 	bl	80024dc <HAL_RCC_GetSysClockFreq>
 800249c:	0001      	movs	r1, r0
 800249e:	4b0a      	ldr	r3, [pc, #40]	@ (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	091b      	lsrs	r3, r3, #4
 80024a4:	220f      	movs	r2, #15
 80024a6:	4013      	ands	r3, r2
 80024a8:	4a0a      	ldr	r2, [pc, #40]	@ (80024d4 <HAL_RCC_ClockConfig+0x1ac>)
 80024aa:	5cd3      	ldrb	r3, [r2, r3]
 80024ac:	000a      	movs	r2, r1
 80024ae:	40da      	lsrs	r2, r3
 80024b0:	4b09      	ldr	r3, [pc, #36]	@ (80024d8 <HAL_RCC_ClockConfig+0x1b0>)
 80024b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80024b4:	2003      	movs	r0, #3
 80024b6:	f7fe fb75 	bl	8000ba4 <HAL_InitTick>
  
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	0018      	movs	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	b004      	add	sp, #16
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40022000 	.word	0x40022000
 80024c8:	40021000 	.word	0x40021000
 80024cc:	00001388 	.word	0x00001388
 80024d0:	fffff8ff 	.word	0xfffff8ff
 80024d4:	08003bec 	.word	0x08003bec
 80024d8:	20000000 	.word	0x20000000

080024dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	2300      	movs	r3, #0
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	2300      	movs	r3, #0
 80024f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80024f6:	4b2d      	ldr	r3, [pc, #180]	@ (80025ac <HAL_RCC_GetSysClockFreq+0xd0>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	220c      	movs	r2, #12
 8002500:	4013      	ands	r3, r2
 8002502:	2b0c      	cmp	r3, #12
 8002504:	d046      	beq.n	8002594 <HAL_RCC_GetSysClockFreq+0xb8>
 8002506:	d848      	bhi.n	800259a <HAL_RCC_GetSysClockFreq+0xbe>
 8002508:	2b04      	cmp	r3, #4
 800250a:	d002      	beq.n	8002512 <HAL_RCC_GetSysClockFreq+0x36>
 800250c:	2b08      	cmp	r3, #8
 800250e:	d003      	beq.n	8002518 <HAL_RCC_GetSysClockFreq+0x3c>
 8002510:	e043      	b.n	800259a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002512:	4b27      	ldr	r3, [pc, #156]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002514:	613b      	str	r3, [r7, #16]
      break;
 8002516:	e043      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	0c9b      	lsrs	r3, r3, #18
 800251c:	220f      	movs	r2, #15
 800251e:	4013      	ands	r3, r2
 8002520:	4a24      	ldr	r2, [pc, #144]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002522:	5cd3      	ldrb	r3, [r2, r3]
 8002524:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002526:	4b21      	ldr	r3, [pc, #132]	@ (80025ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8002528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800252a:	220f      	movs	r2, #15
 800252c:	4013      	ands	r3, r2
 800252e:	4a22      	ldr	r2, [pc, #136]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002530:	5cd3      	ldrb	r3, [r2, r3]
 8002532:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	23c0      	movs	r3, #192	@ 0xc0
 8002538:	025b      	lsls	r3, r3, #9
 800253a:	401a      	ands	r2, r3
 800253c:	2380      	movs	r3, #128	@ 0x80
 800253e:	025b      	lsls	r3, r3, #9
 8002540:	429a      	cmp	r2, r3
 8002542:	d109      	bne.n	8002558 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002544:	68b9      	ldr	r1, [r7, #8]
 8002546:	481a      	ldr	r0, [pc, #104]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002548:	f7fd fdf0 	bl	800012c <__udivsi3>
 800254c:	0003      	movs	r3, r0
 800254e:	001a      	movs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4353      	muls	r3, r2
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	e01a      	b.n	800258e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	23c0      	movs	r3, #192	@ 0xc0
 800255c:	025b      	lsls	r3, r3, #9
 800255e:	401a      	ands	r2, r3
 8002560:	23c0      	movs	r3, #192	@ 0xc0
 8002562:	025b      	lsls	r3, r3, #9
 8002564:	429a      	cmp	r2, r3
 8002566:	d109      	bne.n	800257c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	4814      	ldr	r0, [pc, #80]	@ (80025bc <HAL_RCC_GetSysClockFreq+0xe0>)
 800256c:	f7fd fdde 	bl	800012c <__udivsi3>
 8002570:	0003      	movs	r3, r0
 8002572:	001a      	movs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4353      	muls	r3, r2
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	e008      	b.n	800258e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	480c      	ldr	r0, [pc, #48]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002580:	f7fd fdd4 	bl	800012c <__udivsi3>
 8002584:	0003      	movs	r3, r0
 8002586:	001a      	movs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4353      	muls	r3, r2
 800258c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	613b      	str	r3, [r7, #16]
      break;
 8002592:	e005      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002594:	4b09      	ldr	r3, [pc, #36]	@ (80025bc <HAL_RCC_GetSysClockFreq+0xe0>)
 8002596:	613b      	str	r3, [r7, #16]
      break;
 8002598:	e002      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800259a:	4b05      	ldr	r3, [pc, #20]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 800259c:	613b      	str	r3, [r7, #16]
      break;
 800259e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80025a0:	693b      	ldr	r3, [r7, #16]
}
 80025a2:	0018      	movs	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b006      	add	sp, #24
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	46c0      	nop			@ (mov r8, r8)
 80025ac:	40021000 	.word	0x40021000
 80025b0:	007a1200 	.word	0x007a1200
 80025b4:	08003c04 	.word	0x08003c04
 80025b8:	08003c14 	.word	0x08003c14
 80025bc:	02dc6c00 	.word	0x02dc6c00

080025c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c4:	4b02      	ldr	r3, [pc, #8]	@ (80025d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80025c6:	681b      	ldr	r3, [r3, #0]
}
 80025c8:	0018      	movs	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	46c0      	nop			@ (mov r8, r8)
 80025d0:	20000000 	.word	0x20000000

080025d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80025d8:	f7ff fff2 	bl	80025c0 <HAL_RCC_GetHCLKFreq>
 80025dc:	0001      	movs	r1, r0
 80025de:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	0a1b      	lsrs	r3, r3, #8
 80025e4:	2207      	movs	r2, #7
 80025e6:	4013      	ands	r3, r2
 80025e8:	4a04      	ldr	r2, [pc, #16]	@ (80025fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80025ea:	5cd3      	ldrb	r3, [r2, r3]
 80025ec:	40d9      	lsrs	r1, r3
 80025ee:	000b      	movs	r3, r1
}    
 80025f0:	0018      	movs	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	46c0      	nop			@ (mov r8, r8)
 80025f8:	40021000 	.word	0x40021000
 80025fc:	08003bfc 	.word	0x08003bfc

08002600 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	2380      	movs	r3, #128	@ 0x80
 8002616:	025b      	lsls	r3, r3, #9
 8002618:	4013      	ands	r3, r2
 800261a:	d100      	bne.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800261c:	e08e      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800261e:	2017      	movs	r0, #23
 8002620:	183b      	adds	r3, r7, r0
 8002622:	2200      	movs	r2, #0
 8002624:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002626:	4b67      	ldr	r3, [pc, #412]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002628:	69da      	ldr	r2, [r3, #28]
 800262a:	2380      	movs	r3, #128	@ 0x80
 800262c:	055b      	lsls	r3, r3, #21
 800262e:	4013      	ands	r3, r2
 8002630:	d110      	bne.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002632:	4b64      	ldr	r3, [pc, #400]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002634:	69da      	ldr	r2, [r3, #28]
 8002636:	4b63      	ldr	r3, [pc, #396]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002638:	2180      	movs	r1, #128	@ 0x80
 800263a:	0549      	lsls	r1, r1, #21
 800263c:	430a      	orrs	r2, r1
 800263e:	61da      	str	r2, [r3, #28]
 8002640:	4b60      	ldr	r3, [pc, #384]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002642:	69da      	ldr	r2, [r3, #28]
 8002644:	2380      	movs	r3, #128	@ 0x80
 8002646:	055b      	lsls	r3, r3, #21
 8002648:	4013      	ands	r3, r2
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800264e:	183b      	adds	r3, r7, r0
 8002650:	2201      	movs	r2, #1
 8002652:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002654:	4b5c      	ldr	r3, [pc, #368]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	2380      	movs	r3, #128	@ 0x80
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	4013      	ands	r3, r2
 800265e:	d11a      	bne.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002660:	4b59      	ldr	r3, [pc, #356]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	4b58      	ldr	r3, [pc, #352]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002666:	2180      	movs	r1, #128	@ 0x80
 8002668:	0049      	lsls	r1, r1, #1
 800266a:	430a      	orrs	r2, r1
 800266c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800266e:	f7fe fadf 	bl	8000c30 <HAL_GetTick>
 8002672:	0003      	movs	r3, r0
 8002674:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002676:	e008      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002678:	f7fe fada 	bl	8000c30 <HAL_GetTick>
 800267c:	0002      	movs	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b64      	cmp	r3, #100	@ 0x64
 8002684:	d901      	bls.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e097      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268a:	4b4f      	ldr	r3, [pc, #316]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	2380      	movs	r3, #128	@ 0x80
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	4013      	ands	r3, r2
 8002694:	d0f0      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002696:	4b4b      	ldr	r3, [pc, #300]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002698:	6a1a      	ldr	r2, [r3, #32]
 800269a:	23c0      	movs	r3, #192	@ 0xc0
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4013      	ands	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d034      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	23c0      	movs	r3, #192	@ 0xc0
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4013      	ands	r3, r2
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d02c      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026b8:	4b42      	ldr	r3, [pc, #264]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	4a43      	ldr	r2, [pc, #268]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80026be:	4013      	ands	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026c2:	4b40      	ldr	r3, [pc, #256]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80026c4:	6a1a      	ldr	r2, [r3, #32]
 80026c6:	4b3f      	ldr	r3, [pc, #252]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80026c8:	2180      	movs	r1, #128	@ 0x80
 80026ca:	0249      	lsls	r1, r1, #9
 80026cc:	430a      	orrs	r2, r1
 80026ce:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026d0:	4b3c      	ldr	r3, [pc, #240]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80026d2:	6a1a      	ldr	r2, [r3, #32]
 80026d4:	4b3b      	ldr	r3, [pc, #236]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80026d6:	493e      	ldr	r1, [pc, #248]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d8:	400a      	ands	r2, r1
 80026da:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026dc:	4b39      	ldr	r3, [pc, #228]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2201      	movs	r2, #1
 80026e6:	4013      	ands	r3, r2
 80026e8:	d013      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ea:	f7fe faa1 	bl	8000c30 <HAL_GetTick>
 80026ee:	0003      	movs	r3, r0
 80026f0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f2:	e009      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f4:	f7fe fa9c 	bl	8000c30 <HAL_GetTick>
 80026f8:	0002      	movs	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	4a35      	ldr	r2, [pc, #212]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d901      	bls.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e058      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002708:	4b2e      	ldr	r3, [pc, #184]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	2202      	movs	r2, #2
 800270e:	4013      	ands	r3, r2
 8002710:	d0f0      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002712:	4b2c      	ldr	r3, [pc, #176]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	4a2d      	ldr	r2, [pc, #180]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002718:	4013      	ands	r3, r2
 800271a:	0019      	movs	r1, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	4b28      	ldr	r3, [pc, #160]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002722:	430a      	orrs	r2, r1
 8002724:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002726:	2317      	movs	r3, #23
 8002728:	18fb      	adds	r3, r7, r3
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d105      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002730:	4b24      	ldr	r3, [pc, #144]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002732:	69da      	ldr	r2, [r3, #28]
 8002734:	4b23      	ldr	r3, [pc, #140]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002736:	4928      	ldr	r1, [pc, #160]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002738:	400a      	ands	r2, r1
 800273a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2201      	movs	r2, #1
 8002742:	4013      	ands	r3, r2
 8002744:	d009      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002746:	4b1f      	ldr	r3, [pc, #124]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274a:	2203      	movs	r2, #3
 800274c:	4393      	bics	r3, r2
 800274e:	0019      	movs	r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	4b1b      	ldr	r3, [pc, #108]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002756:	430a      	orrs	r2, r1
 8002758:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2220      	movs	r2, #32
 8002760:	4013      	ands	r3, r2
 8002762:	d009      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002764:	4b17      	ldr	r3, [pc, #92]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002768:	2210      	movs	r2, #16
 800276a:	4393      	bics	r3, r2
 800276c:	0019      	movs	r1, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	4b14      	ldr	r3, [pc, #80]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002774:	430a      	orrs	r2, r1
 8002776:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	2380      	movs	r3, #128	@ 0x80
 800277e:	029b      	lsls	r3, r3, #10
 8002780:	4013      	ands	r3, r2
 8002782:	d009      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002784:	4b0f      	ldr	r3, [pc, #60]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002788:	2280      	movs	r2, #128	@ 0x80
 800278a:	4393      	bics	r3, r2
 800278c:	0019      	movs	r1, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695a      	ldr	r2, [r3, #20]
 8002792:	4b0c      	ldr	r3, [pc, #48]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002794:	430a      	orrs	r2, r1
 8002796:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	2380      	movs	r3, #128	@ 0x80
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4013      	ands	r3, r2
 80027a2:	d009      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027a4:	4b07      	ldr	r3, [pc, #28]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80027a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a8:	2240      	movs	r2, #64	@ 0x40
 80027aa:	4393      	bics	r3, r2
 80027ac:	0019      	movs	r1, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691a      	ldr	r2, [r3, #16]
 80027b2:	4b04      	ldr	r3, [pc, #16]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80027b4:	430a      	orrs	r2, r1
 80027b6:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	0018      	movs	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	b006      	add	sp, #24
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	46c0      	nop			@ (mov r8, r8)
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40007000 	.word	0x40007000
 80027cc:	fffffcff 	.word	0xfffffcff
 80027d0:	fffeffff 	.word	0xfffeffff
 80027d4:	00001388 	.word	0x00001388
 80027d8:	efffffff 	.word	0xefffffff

080027dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e0a8      	b.n	8002940 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	2382      	movs	r3, #130	@ 0x82
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	429a      	cmp	r2, r3
 8002800:	d009      	beq.n	8002816 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	61da      	str	r2, [r3, #28]
 8002808:	e005      	b.n	8002816 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	225d      	movs	r2, #93	@ 0x5d
 8002820:	5c9b      	ldrb	r3, [r3, r2]
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	d107      	bne.n	8002838 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	225c      	movs	r2, #92	@ 0x5c
 800282c:	2100      	movs	r1, #0
 800282e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	0018      	movs	r0, r3
 8002834:	f7fd ffd6 	bl	80007e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	225d      	movs	r2, #93	@ 0x5d
 800283c:	2102      	movs	r1, #2
 800283e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2140      	movs	r1, #64	@ 0x40
 800284c:	438a      	bics	r2, r1
 800284e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	23e0      	movs	r3, #224	@ 0xe0
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	429a      	cmp	r2, r3
 800285a:	d902      	bls.n	8002862 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800285c:	2300      	movs	r3, #0
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	e002      	b.n	8002868 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002862:	2380      	movs	r3, #128	@ 0x80
 8002864:	015b      	lsls	r3, r3, #5
 8002866:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	23f0      	movs	r3, #240	@ 0xf0
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	429a      	cmp	r2, r3
 8002872:	d008      	beq.n	8002886 <HAL_SPI_Init+0xaa>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	23e0      	movs	r3, #224	@ 0xe0
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	429a      	cmp	r2, r3
 800287e:	d002      	beq.n	8002886 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	2382      	movs	r3, #130	@ 0x82
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	401a      	ands	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6899      	ldr	r1, [r3, #8]
 8002894:	2384      	movs	r3, #132	@ 0x84
 8002896:	021b      	lsls	r3, r3, #8
 8002898:	400b      	ands	r3, r1
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	2102      	movs	r1, #2
 80028a2:	400b      	ands	r3, r1
 80028a4:	431a      	orrs	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	2101      	movs	r1, #1
 80028ac:	400b      	ands	r3, r1
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6999      	ldr	r1, [r3, #24]
 80028b4:	2380      	movs	r3, #128	@ 0x80
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	400b      	ands	r3, r1
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	2138      	movs	r1, #56	@ 0x38
 80028c2:	400b      	ands	r3, r1
 80028c4:	431a      	orrs	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	2180      	movs	r1, #128	@ 0x80
 80028cc:	400b      	ands	r3, r1
 80028ce:	431a      	orrs	r2, r3
 80028d0:	0011      	movs	r1, r2
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028d6:	2380      	movs	r3, #128	@ 0x80
 80028d8:	019b      	lsls	r3, r3, #6
 80028da:	401a      	ands	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	0c1b      	lsrs	r3, r3, #16
 80028ea:	2204      	movs	r2, #4
 80028ec:	401a      	ands	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f2:	2110      	movs	r1, #16
 80028f4:	400b      	ands	r3, r1
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028fc:	2108      	movs	r1, #8
 80028fe:	400b      	ands	r3, r1
 8002900:	431a      	orrs	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68d9      	ldr	r1, [r3, #12]
 8002906:	23f0      	movs	r3, #240	@ 0xf0
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	400b      	ands	r3, r1
 800290c:	431a      	orrs	r2, r3
 800290e:	0011      	movs	r1, r2
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	2380      	movs	r3, #128	@ 0x80
 8002914:	015b      	lsls	r3, r3, #5
 8002916:	401a      	ands	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	69da      	ldr	r2, [r3, #28]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4907      	ldr	r1, [pc, #28]	@ (8002948 <HAL_SPI_Init+0x16c>)
 800292c:	400a      	ands	r2, r1
 800292e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	225d      	movs	r2, #93	@ 0x5d
 800293a:	2101      	movs	r1, #1
 800293c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	0018      	movs	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	b004      	add	sp, #16
 8002946:	bd80      	pop	{r7, pc}
 8002948:	fffff7ff 	.word	0xfffff7ff

0800294c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e044      	b.n	80029e8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002962:	2b00      	cmp	r3, #0
 8002964:	d107      	bne.n	8002976 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2278      	movs	r2, #120	@ 0x78
 800296a:	2100      	movs	r1, #0
 800296c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	0018      	movs	r0, r3
 8002972:	f7fe f82d 	bl	80009d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2224      	movs	r2, #36	@ 0x24
 800297a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2101      	movs	r1, #1
 8002988:	438a      	bics	r2, r1
 800298a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	0018      	movs	r0, r3
 8002998:	f000 fa0c 	bl	8002db4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	0018      	movs	r0, r3
 80029a0:	f000 f8c8 	bl	8002b34 <UART_SetConfig>
 80029a4:	0003      	movs	r3, r0
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d101      	bne.n	80029ae <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e01c      	b.n	80029e8 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	490d      	ldr	r1, [pc, #52]	@ (80029f0 <HAL_UART_Init+0xa4>)
 80029ba:	400a      	ands	r2, r1
 80029bc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	212a      	movs	r1, #42	@ 0x2a
 80029ca:	438a      	bics	r2, r1
 80029cc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2101      	movs	r1, #1
 80029da:	430a      	orrs	r2, r1
 80029dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	0018      	movs	r0, r3
 80029e2:	f000 fa9b 	bl	8002f1c <UART_CheckIdleState>
 80029e6:	0003      	movs	r3, r0
}
 80029e8:	0018      	movs	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	b002      	add	sp, #8
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	ffffb7ff 	.word	0xffffb7ff

080029f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08a      	sub	sp, #40	@ 0x28
 80029f8:	af02      	add	r7, sp, #8
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	1dbb      	adds	r3, r7, #6
 8002a02:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a08:	2b20      	cmp	r3, #32
 8002a0a:	d000      	beq.n	8002a0e <HAL_UART_Transmit+0x1a>
 8002a0c:	e08c      	b.n	8002b28 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <HAL_UART_Transmit+0x28>
 8002a14:	1dbb      	adds	r3, r7, #6
 8002a16:	881b      	ldrh	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e084      	b.n	8002b2a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	2380      	movs	r3, #128	@ 0x80
 8002a26:	015b      	lsls	r3, r3, #5
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d109      	bne.n	8002a40 <HAL_UART_Transmit+0x4c>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d105      	bne.n	8002a40 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2201      	movs	r2, #1
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d001      	beq.n	8002a40 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e074      	b.n	8002b2a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2284      	movs	r2, #132	@ 0x84
 8002a44:	2100      	movs	r1, #0
 8002a46:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2221      	movs	r2, #33	@ 0x21
 8002a4c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a4e:	f7fe f8ef 	bl	8000c30 <HAL_GetTick>
 8002a52:	0003      	movs	r3, r0
 8002a54:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1dba      	adds	r2, r7, #6
 8002a5a:	2150      	movs	r1, #80	@ 0x50
 8002a5c:	8812      	ldrh	r2, [r2, #0]
 8002a5e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	1dba      	adds	r2, r7, #6
 8002a64:	2152      	movs	r1, #82	@ 0x52
 8002a66:	8812      	ldrh	r2, [r2, #0]
 8002a68:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	2380      	movs	r3, #128	@ 0x80
 8002a70:	015b      	lsls	r3, r3, #5
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d108      	bne.n	8002a88 <HAL_UART_Transmit+0x94>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d104      	bne.n	8002a88 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	61bb      	str	r3, [r7, #24]
 8002a86:	e003      	b.n	8002a90 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a90:	e02f      	b.n	8002af2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	0013      	movs	r3, r2
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2180      	movs	r1, #128	@ 0x80
 8002aa0:	f000 fae4 	bl	800306c <UART_WaitOnFlagUntilTimeout>
 8002aa4:	1e03      	subs	r3, r0, #0
 8002aa6:	d004      	beq.n	8002ab2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e03b      	b.n	8002b2a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10b      	bne.n	8002ad0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	881a      	ldrh	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	05d2      	lsls	r2, r2, #23
 8002ac2:	0dd2      	lsrs	r2, r2, #23
 8002ac4:	b292      	uxth	r2, r2
 8002ac6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	3302      	adds	r3, #2
 8002acc:	61bb      	str	r3, [r7, #24]
 8002ace:	e007      	b.n	8002ae0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	781a      	ldrb	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	3301      	adds	r3, #1
 8002ade:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2252      	movs	r2, #82	@ 0x52
 8002ae4:	5a9b      	ldrh	r3, [r3, r2]
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b299      	uxth	r1, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2252      	movs	r2, #82	@ 0x52
 8002af0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2252      	movs	r2, #82	@ 0x52
 8002af6:	5a9b      	ldrh	r3, [r3, r2]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1c9      	bne.n	8002a92 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	0013      	movs	r3, r2
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2140      	movs	r1, #64	@ 0x40
 8002b0c:	f000 faae 	bl	800306c <UART_WaitOnFlagUntilTimeout>
 8002b10:	1e03      	subs	r3, r0, #0
 8002b12:	d004      	beq.n	8002b1e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2220      	movs	r2, #32
 8002b18:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e005      	b.n	8002b2a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2220      	movs	r2, #32
 8002b22:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002b24:	2300      	movs	r3, #0
 8002b26:	e000      	b.n	8002b2a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002b28:	2302      	movs	r3, #2
  }
}
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b008      	add	sp, #32
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b3c:	231e      	movs	r3, #30
 8002b3e:	18fb      	adds	r3, r7, r3
 8002b40:	2200      	movs	r2, #0
 8002b42:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a8d      	ldr	r2, [pc, #564]	@ (8002d98 <UART_SetConfig+0x264>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	0019      	movs	r1, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	4a88      	ldr	r2, [pc, #544]	@ (8002d9c <UART_SetConfig+0x268>)
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	0019      	movs	r1, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	4a7f      	ldr	r2, [pc, #508]	@ (8002da0 <UART_SetConfig+0x26c>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	0019      	movs	r1, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a7b      	ldr	r2, [pc, #492]	@ (8002da4 <UART_SetConfig+0x270>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d127      	bne.n	8002c0a <UART_SetConfig+0xd6>
 8002bba:	4b7b      	ldr	r3, [pc, #492]	@ (8002da8 <UART_SetConfig+0x274>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	d00d      	beq.n	8002be2 <UART_SetConfig+0xae>
 8002bc6:	d81b      	bhi.n	8002c00 <UART_SetConfig+0xcc>
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d014      	beq.n	8002bf6 <UART_SetConfig+0xc2>
 8002bcc:	d818      	bhi.n	8002c00 <UART_SetConfig+0xcc>
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d002      	beq.n	8002bd8 <UART_SetConfig+0xa4>
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d00a      	beq.n	8002bec <UART_SetConfig+0xb8>
 8002bd6:	e013      	b.n	8002c00 <UART_SetConfig+0xcc>
 8002bd8:	231f      	movs	r3, #31
 8002bda:	18fb      	adds	r3, r7, r3
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]
 8002be0:	e021      	b.n	8002c26 <UART_SetConfig+0xf2>
 8002be2:	231f      	movs	r3, #31
 8002be4:	18fb      	adds	r3, r7, r3
 8002be6:	2202      	movs	r2, #2
 8002be8:	701a      	strb	r2, [r3, #0]
 8002bea:	e01c      	b.n	8002c26 <UART_SetConfig+0xf2>
 8002bec:	231f      	movs	r3, #31
 8002bee:	18fb      	adds	r3, r7, r3
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	701a      	strb	r2, [r3, #0]
 8002bf4:	e017      	b.n	8002c26 <UART_SetConfig+0xf2>
 8002bf6:	231f      	movs	r3, #31
 8002bf8:	18fb      	adds	r3, r7, r3
 8002bfa:	2208      	movs	r2, #8
 8002bfc:	701a      	strb	r2, [r3, #0]
 8002bfe:	e012      	b.n	8002c26 <UART_SetConfig+0xf2>
 8002c00:	231f      	movs	r3, #31
 8002c02:	18fb      	adds	r3, r7, r3
 8002c04:	2210      	movs	r2, #16
 8002c06:	701a      	strb	r2, [r3, #0]
 8002c08:	e00d      	b.n	8002c26 <UART_SetConfig+0xf2>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a67      	ldr	r2, [pc, #412]	@ (8002dac <UART_SetConfig+0x278>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d104      	bne.n	8002c1e <UART_SetConfig+0xea>
 8002c14:	231f      	movs	r3, #31
 8002c16:	18fb      	adds	r3, r7, r3
 8002c18:	2200      	movs	r2, #0
 8002c1a:	701a      	strb	r2, [r3, #0]
 8002c1c:	e003      	b.n	8002c26 <UART_SetConfig+0xf2>
 8002c1e:	231f      	movs	r3, #31
 8002c20:	18fb      	adds	r3, r7, r3
 8002c22:	2210      	movs	r2, #16
 8002c24:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69da      	ldr	r2, [r3, #28]
 8002c2a:	2380      	movs	r3, #128	@ 0x80
 8002c2c:	021b      	lsls	r3, r3, #8
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d15c      	bne.n	8002cec <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002c32:	231f      	movs	r3, #31
 8002c34:	18fb      	adds	r3, r7, r3
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d015      	beq.n	8002c68 <UART_SetConfig+0x134>
 8002c3c:	dc18      	bgt.n	8002c70 <UART_SetConfig+0x13c>
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d00d      	beq.n	8002c5e <UART_SetConfig+0x12a>
 8002c42:	dc15      	bgt.n	8002c70 <UART_SetConfig+0x13c>
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <UART_SetConfig+0x11a>
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d005      	beq.n	8002c58 <UART_SetConfig+0x124>
 8002c4c:	e010      	b.n	8002c70 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c4e:	f7ff fcc1 	bl	80025d4 <HAL_RCC_GetPCLK1Freq>
 8002c52:	0003      	movs	r3, r0
 8002c54:	61bb      	str	r3, [r7, #24]
        break;
 8002c56:	e012      	b.n	8002c7e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c58:	4b55      	ldr	r3, [pc, #340]	@ (8002db0 <UART_SetConfig+0x27c>)
 8002c5a:	61bb      	str	r3, [r7, #24]
        break;
 8002c5c:	e00f      	b.n	8002c7e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c5e:	f7ff fc3d 	bl	80024dc <HAL_RCC_GetSysClockFreq>
 8002c62:	0003      	movs	r3, r0
 8002c64:	61bb      	str	r3, [r7, #24]
        break;
 8002c66:	e00a      	b.n	8002c7e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c68:	2380      	movs	r3, #128	@ 0x80
 8002c6a:	021b      	lsls	r3, r3, #8
 8002c6c:	61bb      	str	r3, [r7, #24]
        break;
 8002c6e:	e006      	b.n	8002c7e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c74:	231e      	movs	r3, #30
 8002c76:	18fb      	adds	r3, r7, r3
 8002c78:	2201      	movs	r2, #1
 8002c7a:	701a      	strb	r2, [r3, #0]
        break;
 8002c7c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d100      	bne.n	8002c86 <UART_SetConfig+0x152>
 8002c84:	e07a      	b.n	8002d7c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	005a      	lsls	r2, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	085b      	lsrs	r3, r3, #1
 8002c90:	18d2      	adds	r2, r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	0019      	movs	r1, r3
 8002c98:	0010      	movs	r0, r2
 8002c9a:	f7fd fa47 	bl	800012c <__udivsi3>
 8002c9e:	0003      	movs	r3, r0
 8002ca0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	2b0f      	cmp	r3, #15
 8002ca6:	d91c      	bls.n	8002ce2 <UART_SetConfig+0x1ae>
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	2380      	movs	r3, #128	@ 0x80
 8002cac:	025b      	lsls	r3, r3, #9
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d217      	bcs.n	8002ce2 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	200e      	movs	r0, #14
 8002cb8:	183b      	adds	r3, r7, r0
 8002cba:	210f      	movs	r1, #15
 8002cbc:	438a      	bics	r2, r1
 8002cbe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	085b      	lsrs	r3, r3, #1
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	2207      	movs	r2, #7
 8002cc8:	4013      	ands	r3, r2
 8002cca:	b299      	uxth	r1, r3
 8002ccc:	183b      	adds	r3, r7, r0
 8002cce:	183a      	adds	r2, r7, r0
 8002cd0:	8812      	ldrh	r2, [r2, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	183a      	adds	r2, r7, r0
 8002cdc:	8812      	ldrh	r2, [r2, #0]
 8002cde:	60da      	str	r2, [r3, #12]
 8002ce0:	e04c      	b.n	8002d7c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002ce2:	231e      	movs	r3, #30
 8002ce4:	18fb      	adds	r3, r7, r3
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	701a      	strb	r2, [r3, #0]
 8002cea:	e047      	b.n	8002d7c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cec:	231f      	movs	r3, #31
 8002cee:	18fb      	adds	r3, r7, r3
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d015      	beq.n	8002d22 <UART_SetConfig+0x1ee>
 8002cf6:	dc18      	bgt.n	8002d2a <UART_SetConfig+0x1f6>
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d00d      	beq.n	8002d18 <UART_SetConfig+0x1e4>
 8002cfc:	dc15      	bgt.n	8002d2a <UART_SetConfig+0x1f6>
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <UART_SetConfig+0x1d4>
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d005      	beq.n	8002d12 <UART_SetConfig+0x1de>
 8002d06:	e010      	b.n	8002d2a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d08:	f7ff fc64 	bl	80025d4 <HAL_RCC_GetPCLK1Freq>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	61bb      	str	r3, [r7, #24]
        break;
 8002d10:	e012      	b.n	8002d38 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d12:	4b27      	ldr	r3, [pc, #156]	@ (8002db0 <UART_SetConfig+0x27c>)
 8002d14:	61bb      	str	r3, [r7, #24]
        break;
 8002d16:	e00f      	b.n	8002d38 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d18:	f7ff fbe0 	bl	80024dc <HAL_RCC_GetSysClockFreq>
 8002d1c:	0003      	movs	r3, r0
 8002d1e:	61bb      	str	r3, [r7, #24]
        break;
 8002d20:	e00a      	b.n	8002d38 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d22:	2380      	movs	r3, #128	@ 0x80
 8002d24:	021b      	lsls	r3, r3, #8
 8002d26:	61bb      	str	r3, [r7, #24]
        break;
 8002d28:	e006      	b.n	8002d38 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d2e:	231e      	movs	r3, #30
 8002d30:	18fb      	adds	r3, r7, r3
 8002d32:	2201      	movs	r2, #1
 8002d34:	701a      	strb	r2, [r3, #0]
        break;
 8002d36:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d01e      	beq.n	8002d7c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	085a      	lsrs	r2, r3, #1
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	18d2      	adds	r2, r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	0019      	movs	r1, r3
 8002d4e:	0010      	movs	r0, r2
 8002d50:	f7fd f9ec 	bl	800012c <__udivsi3>
 8002d54:	0003      	movs	r3, r0
 8002d56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	2b0f      	cmp	r3, #15
 8002d5c:	d90a      	bls.n	8002d74 <UART_SetConfig+0x240>
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	2380      	movs	r3, #128	@ 0x80
 8002d62:	025b      	lsls	r3, r3, #9
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d205      	bcs.n	8002d74 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	60da      	str	r2, [r3, #12]
 8002d72:	e003      	b.n	8002d7c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002d74:	231e      	movs	r3, #30
 8002d76:	18fb      	adds	r3, r7, r3
 8002d78:	2201      	movs	r2, #1
 8002d7a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002d88:	231e      	movs	r3, #30
 8002d8a:	18fb      	adds	r3, r7, r3
 8002d8c:	781b      	ldrb	r3, [r3, #0]
}
 8002d8e:	0018      	movs	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b008      	add	sp, #32
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	46c0      	nop			@ (mov r8, r8)
 8002d98:	efff69f3 	.word	0xefff69f3
 8002d9c:	ffffcfff 	.word	0xffffcfff
 8002da0:	fffff4ff 	.word	0xfffff4ff
 8002da4:	40013800 	.word	0x40013800
 8002da8:	40021000 	.word	0x40021000
 8002dac:	40004400 	.word	0x40004400
 8002db0:	007a1200 	.word	0x007a1200

08002db4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc0:	2208      	movs	r2, #8
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d00b      	beq.n	8002dde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	4a4a      	ldr	r2, [pc, #296]	@ (8002ef8 <UART_AdvFeatureConfig+0x144>)
 8002dce:	4013      	ands	r3, r2
 8002dd0:	0019      	movs	r1, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de2:	2201      	movs	r2, #1
 8002de4:	4013      	ands	r3, r2
 8002de6:	d00b      	beq.n	8002e00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	4a43      	ldr	r2, [pc, #268]	@ (8002efc <UART_AdvFeatureConfig+0x148>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	0019      	movs	r1, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e04:	2202      	movs	r2, #2
 8002e06:	4013      	ands	r3, r2
 8002e08:	d00b      	beq.n	8002e22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	4a3b      	ldr	r2, [pc, #236]	@ (8002f00 <UART_AdvFeatureConfig+0x14c>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	0019      	movs	r1, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e26:	2204      	movs	r2, #4
 8002e28:	4013      	ands	r3, r2
 8002e2a:	d00b      	beq.n	8002e44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	4a34      	ldr	r2, [pc, #208]	@ (8002f04 <UART_AdvFeatureConfig+0x150>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	0019      	movs	r1, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e48:	2210      	movs	r2, #16
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d00b      	beq.n	8002e66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	4a2c      	ldr	r2, [pc, #176]	@ (8002f08 <UART_AdvFeatureConfig+0x154>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	0019      	movs	r1, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d00b      	beq.n	8002e88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	4a25      	ldr	r2, [pc, #148]	@ (8002f0c <UART_AdvFeatureConfig+0x158>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	0019      	movs	r1, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8c:	2240      	movs	r2, #64	@ 0x40
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d01d      	beq.n	8002ece <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	4a1d      	ldr	r2, [pc, #116]	@ (8002f10 <UART_AdvFeatureConfig+0x15c>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	0019      	movs	r1, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002eae:	2380      	movs	r3, #128	@ 0x80
 8002eb0:	035b      	lsls	r3, r3, #13
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d10b      	bne.n	8002ece <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	4a15      	ldr	r2, [pc, #84]	@ (8002f14 <UART_AdvFeatureConfig+0x160>)
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	0019      	movs	r1, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed2:	2280      	movs	r2, #128	@ 0x80
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	d00b      	beq.n	8002ef0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	4a0e      	ldr	r2, [pc, #56]	@ (8002f18 <UART_AdvFeatureConfig+0x164>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	0019      	movs	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	605a      	str	r2, [r3, #4]
  }
}
 8002ef0:	46c0      	nop			@ (mov r8, r8)
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b002      	add	sp, #8
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	ffff7fff 	.word	0xffff7fff
 8002efc:	fffdffff 	.word	0xfffdffff
 8002f00:	fffeffff 	.word	0xfffeffff
 8002f04:	fffbffff 	.word	0xfffbffff
 8002f08:	ffffefff 	.word	0xffffefff
 8002f0c:	ffffdfff 	.word	0xffffdfff
 8002f10:	ffefffff 	.word	0xffefffff
 8002f14:	ff9fffff 	.word	0xff9fffff
 8002f18:	fff7ffff 	.word	0xfff7ffff

08002f1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b092      	sub	sp, #72	@ 0x48
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2284      	movs	r2, #132	@ 0x84
 8002f28:	2100      	movs	r1, #0
 8002f2a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f2c:	f7fd fe80 	bl	8000c30 <HAL_GetTick>
 8002f30:	0003      	movs	r3, r0
 8002f32:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2208      	movs	r2, #8
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d12c      	bne.n	8002f9c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f44:	2280      	movs	r2, #128	@ 0x80
 8002f46:	0391      	lsls	r1, r2, #14
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	4a46      	ldr	r2, [pc, #280]	@ (8003064 <UART_CheckIdleState+0x148>)
 8002f4c:	9200      	str	r2, [sp, #0]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f000 f88c 	bl	800306c <UART_WaitOnFlagUntilTimeout>
 8002f54:	1e03      	subs	r3, r0, #0
 8002f56:	d021      	beq.n	8002f9c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f58:	f3ef 8310 	mrs	r3, PRIMASK
 8002f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002f60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f62:	2301      	movs	r3, #1
 8002f64:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f68:	f383 8810 	msr	PRIMASK, r3
}
 8002f6c:	46c0      	nop			@ (mov r8, r8)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2180      	movs	r1, #128	@ 0x80
 8002f7a:	438a      	bics	r2, r1
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f84:	f383 8810 	msr	PRIMASK, r3
}
 8002f88:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2278      	movs	r2, #120	@ 0x78
 8002f94:	2100      	movs	r1, #0
 8002f96:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e05f      	b.n	800305c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2204      	movs	r2, #4
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d146      	bne.n	8003038 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002faa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fac:	2280      	movs	r2, #128	@ 0x80
 8002fae:	03d1      	lsls	r1, r2, #15
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	4a2c      	ldr	r2, [pc, #176]	@ (8003064 <UART_CheckIdleState+0x148>)
 8002fb4:	9200      	str	r2, [sp, #0]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f000 f858 	bl	800306c <UART_WaitOnFlagUntilTimeout>
 8002fbc:	1e03      	subs	r3, r0, #0
 8002fbe:	d03b      	beq.n	8003038 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8002fc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fca:	2301      	movs	r3, #1
 8002fcc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	f383 8810 	msr	PRIMASK, r3
}
 8002fd4:	46c0      	nop			@ (mov r8, r8)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4921      	ldr	r1, [pc, #132]	@ (8003068 <UART_CheckIdleState+0x14c>)
 8002fe2:	400a      	ands	r2, r1
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f383 8810 	msr	PRIMASK, r3
}
 8002ff0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ff6:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ff8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ffa:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f383 8810 	msr	PRIMASK, r3
}
 8003006:	46c0      	nop			@ (mov r8, r8)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689a      	ldr	r2, [r3, #8]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2101      	movs	r1, #1
 8003014:	438a      	bics	r2, r1
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	f383 8810 	msr	PRIMASK, r3
}
 8003022:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2280      	movs	r2, #128	@ 0x80
 8003028:	2120      	movs	r1, #32
 800302a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2278      	movs	r2, #120	@ 0x78
 8003030:	2100      	movs	r1, #0
 8003032:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e011      	b.n	800305c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2220      	movs	r2, #32
 800303c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2280      	movs	r2, #128	@ 0x80
 8003042:	2120      	movs	r1, #32
 8003044:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2278      	movs	r2, #120	@ 0x78
 8003056:	2100      	movs	r1, #0
 8003058:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	0018      	movs	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	b010      	add	sp, #64	@ 0x40
 8003062:	bd80      	pop	{r7, pc}
 8003064:	01ffffff 	.word	0x01ffffff
 8003068:	fffffedf 	.word	0xfffffedf

0800306c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	603b      	str	r3, [r7, #0]
 8003078:	1dfb      	adds	r3, r7, #7
 800307a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800307c:	e051      	b.n	8003122 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	3301      	adds	r3, #1
 8003082:	d04e      	beq.n	8003122 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003084:	f7fd fdd4 	bl	8000c30 <HAL_GetTick>
 8003088:	0002      	movs	r2, r0
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	429a      	cmp	r2, r3
 8003092:	d302      	bcc.n	800309a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e051      	b.n	8003142 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2204      	movs	r2, #4
 80030a6:	4013      	ands	r3, r2
 80030a8:	d03b      	beq.n	8003122 <UART_WaitOnFlagUntilTimeout+0xb6>
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2b80      	cmp	r3, #128	@ 0x80
 80030ae:	d038      	beq.n	8003122 <UART_WaitOnFlagUntilTimeout+0xb6>
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b40      	cmp	r3, #64	@ 0x40
 80030b4:	d035      	beq.n	8003122 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	2208      	movs	r2, #8
 80030be:	4013      	ands	r3, r2
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d111      	bne.n	80030e8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2208      	movs	r2, #8
 80030ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	0018      	movs	r0, r3
 80030d0:	f000 f83c 	bl	800314c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2284      	movs	r2, #132	@ 0x84
 80030d8:	2108      	movs	r1, #8
 80030da:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2278      	movs	r2, #120	@ 0x78
 80030e0:	2100      	movs	r1, #0
 80030e2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e02c      	b.n	8003142 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	69da      	ldr	r2, [r3, #28]
 80030ee:	2380      	movs	r3, #128	@ 0x80
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	401a      	ands	r2, r3
 80030f4:	2380      	movs	r3, #128	@ 0x80
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d112      	bne.n	8003122 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2280      	movs	r2, #128	@ 0x80
 8003102:	0112      	lsls	r2, r2, #4
 8003104:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	0018      	movs	r0, r3
 800310a:	f000 f81f 	bl	800314c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2284      	movs	r2, #132	@ 0x84
 8003112:	2120      	movs	r1, #32
 8003114:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2278      	movs	r2, #120	@ 0x78
 800311a:	2100      	movs	r1, #0
 800311c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e00f      	b.n	8003142 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	4013      	ands	r3, r2
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	425a      	negs	r2, r3
 8003132:	4153      	adcs	r3, r2
 8003134:	b2db      	uxtb	r3, r3
 8003136:	001a      	movs	r2, r3
 8003138:	1dfb      	adds	r3, r7, #7
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	429a      	cmp	r2, r3
 800313e:	d09e      	beq.n	800307e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	0018      	movs	r0, r3
 8003144:	46bd      	mov	sp, r7
 8003146:	b004      	add	sp, #16
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b08e      	sub	sp, #56	@ 0x38
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003154:	f3ef 8310 	mrs	r3, PRIMASK
 8003158:	617b      	str	r3, [r7, #20]
  return(result);
 800315a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800315c:	637b      	str	r3, [r7, #52]	@ 0x34
 800315e:	2301      	movs	r3, #1
 8003160:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	f383 8810 	msr	PRIMASK, r3
}
 8003168:	46c0      	nop			@ (mov r8, r8)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4926      	ldr	r1, [pc, #152]	@ (8003210 <UART_EndRxTransfer+0xc4>)
 8003176:	400a      	ands	r2, r1
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800317c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	f383 8810 	msr	PRIMASK, r3
}
 8003184:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003186:	f3ef 8310 	mrs	r3, PRIMASK
 800318a:	623b      	str	r3, [r7, #32]
  return(result);
 800318c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800318e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003190:	2301      	movs	r3, #1
 8003192:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003196:	f383 8810 	msr	PRIMASK, r3
}
 800319a:	46c0      	nop			@ (mov r8, r8)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2101      	movs	r1, #1
 80031a8:	438a      	bics	r2, r1
 80031aa:	609a      	str	r2, [r3, #8]
 80031ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b2:	f383 8810 	msr	PRIMASK, r3
}
 80031b6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d118      	bne.n	80031f2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031c0:	f3ef 8310 	mrs	r3, PRIMASK
 80031c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80031c6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031ca:	2301      	movs	r3, #1
 80031cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f383 8810 	msr	PRIMASK, r3
}
 80031d4:	46c0      	nop			@ (mov r8, r8)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2110      	movs	r1, #16
 80031e2:	438a      	bics	r2, r1
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	f383 8810 	msr	PRIMASK, r3
}
 80031f0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2280      	movs	r2, #128	@ 0x80
 80031f6:	2120      	movs	r1, #32
 80031f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003206:	46c0      	nop			@ (mov r8, r8)
 8003208:	46bd      	mov	sp, r7
 800320a:	b00e      	add	sp, #56	@ 0x38
 800320c:	bd80      	pop	{r7, pc}
 800320e:	46c0      	nop			@ (mov r8, r8)
 8003210:	fffffedf 	.word	0xfffffedf

08003214 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800321c:	4b09      	ldr	r3, [pc, #36]	@ (8003244 <USB_DisableGlobalInt+0x30>)
 800321e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2240      	movs	r2, #64	@ 0x40
 8003224:	5a9b      	ldrh	r3, [r3, r2]
 8003226:	b29b      	uxth	r3, r3
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	b292      	uxth	r2, r2
 800322c:	43d2      	mvns	r2, r2
 800322e:	b292      	uxth	r2, r2
 8003230:	4013      	ands	r3, r2
 8003232:	b299      	uxth	r1, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2240      	movs	r2, #64	@ 0x40
 8003238:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	0018      	movs	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	b004      	add	sp, #16
 8003242:	bd80      	pop	{r7, pc}
 8003244:	0000bf80 	.word	0x0000bf80

08003248 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	1d3b      	adds	r3, r7, #4
 8003252:	6019      	str	r1, [r3, #0]
 8003254:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2240      	movs	r2, #64	@ 0x40
 800325a:	2101      	movs	r1, #1
 800325c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2240      	movs	r2, #64	@ 0x40
 8003262:	2100      	movs	r1, #0
 8003264:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2244      	movs	r2, #68	@ 0x44
 800326a:	2100      	movs	r1, #0
 800326c:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2250      	movs	r2, #80	@ 0x50
 8003272:	2100      	movs	r1, #0
 8003274:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	0018      	movs	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	b004      	add	sp, #16
 800327e:	bd80      	pop	{r7, pc}

08003280 <siprintf>:
 8003280:	b40e      	push	{r1, r2, r3}
 8003282:	b510      	push	{r4, lr}
 8003284:	2400      	movs	r4, #0
 8003286:	490c      	ldr	r1, [pc, #48]	@ (80032b8 <siprintf+0x38>)
 8003288:	b09d      	sub	sp, #116	@ 0x74
 800328a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800328c:	9002      	str	r0, [sp, #8]
 800328e:	9006      	str	r0, [sp, #24]
 8003290:	9107      	str	r1, [sp, #28]
 8003292:	9104      	str	r1, [sp, #16]
 8003294:	4809      	ldr	r0, [pc, #36]	@ (80032bc <siprintf+0x3c>)
 8003296:	490a      	ldr	r1, [pc, #40]	@ (80032c0 <siprintf+0x40>)
 8003298:	cb04      	ldmia	r3!, {r2}
 800329a:	9105      	str	r1, [sp, #20]
 800329c:	6800      	ldr	r0, [r0, #0]
 800329e:	a902      	add	r1, sp, #8
 80032a0:	9301      	str	r3, [sp, #4]
 80032a2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80032a4:	f000 f99e 	bl	80035e4 <_svfiprintf_r>
 80032a8:	9b02      	ldr	r3, [sp, #8]
 80032aa:	701c      	strb	r4, [r3, #0]
 80032ac:	b01d      	add	sp, #116	@ 0x74
 80032ae:	bc10      	pop	{r4}
 80032b0:	bc08      	pop	{r3}
 80032b2:	b003      	add	sp, #12
 80032b4:	4718      	bx	r3
 80032b6:	46c0      	nop			@ (mov r8, r8)
 80032b8:	7fffffff 	.word	0x7fffffff
 80032bc:	2000000c 	.word	0x2000000c
 80032c0:	ffff0208 	.word	0xffff0208

080032c4 <memset>:
 80032c4:	0003      	movs	r3, r0
 80032c6:	1882      	adds	r2, r0, r2
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d100      	bne.n	80032ce <memset+0xa>
 80032cc:	4770      	bx	lr
 80032ce:	7019      	strb	r1, [r3, #0]
 80032d0:	3301      	adds	r3, #1
 80032d2:	e7f9      	b.n	80032c8 <memset+0x4>

080032d4 <__errno>:
 80032d4:	4b01      	ldr	r3, [pc, #4]	@ (80032dc <__errno+0x8>)
 80032d6:	6818      	ldr	r0, [r3, #0]
 80032d8:	4770      	bx	lr
 80032da:	46c0      	nop			@ (mov r8, r8)
 80032dc:	2000000c 	.word	0x2000000c

080032e0 <__libc_init_array>:
 80032e0:	b570      	push	{r4, r5, r6, lr}
 80032e2:	2600      	movs	r6, #0
 80032e4:	4c0c      	ldr	r4, [pc, #48]	@ (8003318 <__libc_init_array+0x38>)
 80032e6:	4d0d      	ldr	r5, [pc, #52]	@ (800331c <__libc_init_array+0x3c>)
 80032e8:	1b64      	subs	r4, r4, r5
 80032ea:	10a4      	asrs	r4, r4, #2
 80032ec:	42a6      	cmp	r6, r4
 80032ee:	d109      	bne.n	8003304 <__libc_init_array+0x24>
 80032f0:	2600      	movs	r6, #0
 80032f2:	f000 fc61 	bl	8003bb8 <_init>
 80032f6:	4c0a      	ldr	r4, [pc, #40]	@ (8003320 <__libc_init_array+0x40>)
 80032f8:	4d0a      	ldr	r5, [pc, #40]	@ (8003324 <__libc_init_array+0x44>)
 80032fa:	1b64      	subs	r4, r4, r5
 80032fc:	10a4      	asrs	r4, r4, #2
 80032fe:	42a6      	cmp	r6, r4
 8003300:	d105      	bne.n	800330e <__libc_init_array+0x2e>
 8003302:	bd70      	pop	{r4, r5, r6, pc}
 8003304:	00b3      	lsls	r3, r6, #2
 8003306:	58eb      	ldr	r3, [r5, r3]
 8003308:	4798      	blx	r3
 800330a:	3601      	adds	r6, #1
 800330c:	e7ee      	b.n	80032ec <__libc_init_array+0xc>
 800330e:	00b3      	lsls	r3, r6, #2
 8003310:	58eb      	ldr	r3, [r5, r3]
 8003312:	4798      	blx	r3
 8003314:	3601      	adds	r6, #1
 8003316:	e7f2      	b.n	80032fe <__libc_init_array+0x1e>
 8003318:	08003c58 	.word	0x08003c58
 800331c:	08003c58 	.word	0x08003c58
 8003320:	08003c5c 	.word	0x08003c5c
 8003324:	08003c58 	.word	0x08003c58

08003328 <__retarget_lock_acquire_recursive>:
 8003328:	4770      	bx	lr

0800332a <__retarget_lock_release_recursive>:
 800332a:	4770      	bx	lr

0800332c <_free_r>:
 800332c:	b570      	push	{r4, r5, r6, lr}
 800332e:	0005      	movs	r5, r0
 8003330:	1e0c      	subs	r4, r1, #0
 8003332:	d010      	beq.n	8003356 <_free_r+0x2a>
 8003334:	3c04      	subs	r4, #4
 8003336:	6823      	ldr	r3, [r4, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	da00      	bge.n	800333e <_free_r+0x12>
 800333c:	18e4      	adds	r4, r4, r3
 800333e:	0028      	movs	r0, r5
 8003340:	f000 f8e0 	bl	8003504 <__malloc_lock>
 8003344:	4a1d      	ldr	r2, [pc, #116]	@ (80033bc <_free_r+0x90>)
 8003346:	6813      	ldr	r3, [r2, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d105      	bne.n	8003358 <_free_r+0x2c>
 800334c:	6063      	str	r3, [r4, #4]
 800334e:	6014      	str	r4, [r2, #0]
 8003350:	0028      	movs	r0, r5
 8003352:	f000 f8df 	bl	8003514 <__malloc_unlock>
 8003356:	bd70      	pop	{r4, r5, r6, pc}
 8003358:	42a3      	cmp	r3, r4
 800335a:	d908      	bls.n	800336e <_free_r+0x42>
 800335c:	6820      	ldr	r0, [r4, #0]
 800335e:	1821      	adds	r1, r4, r0
 8003360:	428b      	cmp	r3, r1
 8003362:	d1f3      	bne.n	800334c <_free_r+0x20>
 8003364:	6819      	ldr	r1, [r3, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	1809      	adds	r1, r1, r0
 800336a:	6021      	str	r1, [r4, #0]
 800336c:	e7ee      	b.n	800334c <_free_r+0x20>
 800336e:	001a      	movs	r2, r3
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <_free_r+0x4e>
 8003376:	42a3      	cmp	r3, r4
 8003378:	d9f9      	bls.n	800336e <_free_r+0x42>
 800337a:	6811      	ldr	r1, [r2, #0]
 800337c:	1850      	adds	r0, r2, r1
 800337e:	42a0      	cmp	r0, r4
 8003380:	d10b      	bne.n	800339a <_free_r+0x6e>
 8003382:	6820      	ldr	r0, [r4, #0]
 8003384:	1809      	adds	r1, r1, r0
 8003386:	1850      	adds	r0, r2, r1
 8003388:	6011      	str	r1, [r2, #0]
 800338a:	4283      	cmp	r3, r0
 800338c:	d1e0      	bne.n	8003350 <_free_r+0x24>
 800338e:	6818      	ldr	r0, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	1841      	adds	r1, r0, r1
 8003394:	6011      	str	r1, [r2, #0]
 8003396:	6053      	str	r3, [r2, #4]
 8003398:	e7da      	b.n	8003350 <_free_r+0x24>
 800339a:	42a0      	cmp	r0, r4
 800339c:	d902      	bls.n	80033a4 <_free_r+0x78>
 800339e:	230c      	movs	r3, #12
 80033a0:	602b      	str	r3, [r5, #0]
 80033a2:	e7d5      	b.n	8003350 <_free_r+0x24>
 80033a4:	6820      	ldr	r0, [r4, #0]
 80033a6:	1821      	adds	r1, r4, r0
 80033a8:	428b      	cmp	r3, r1
 80033aa:	d103      	bne.n	80033b4 <_free_r+0x88>
 80033ac:	6819      	ldr	r1, [r3, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	1809      	adds	r1, r1, r0
 80033b2:	6021      	str	r1, [r4, #0]
 80033b4:	6063      	str	r3, [r4, #4]
 80033b6:	6054      	str	r4, [r2, #4]
 80033b8:	e7ca      	b.n	8003350 <_free_r+0x24>
 80033ba:	46c0      	nop			@ (mov r8, r8)
 80033bc:	20000620 	.word	0x20000620

080033c0 <sbrk_aligned>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	4e0f      	ldr	r6, [pc, #60]	@ (8003400 <sbrk_aligned+0x40>)
 80033c4:	000d      	movs	r5, r1
 80033c6:	6831      	ldr	r1, [r6, #0]
 80033c8:	0004      	movs	r4, r0
 80033ca:	2900      	cmp	r1, #0
 80033cc:	d102      	bne.n	80033d4 <sbrk_aligned+0x14>
 80033ce:	f000 fb95 	bl	8003afc <_sbrk_r>
 80033d2:	6030      	str	r0, [r6, #0]
 80033d4:	0029      	movs	r1, r5
 80033d6:	0020      	movs	r0, r4
 80033d8:	f000 fb90 	bl	8003afc <_sbrk_r>
 80033dc:	1c43      	adds	r3, r0, #1
 80033de:	d103      	bne.n	80033e8 <sbrk_aligned+0x28>
 80033e0:	2501      	movs	r5, #1
 80033e2:	426d      	negs	r5, r5
 80033e4:	0028      	movs	r0, r5
 80033e6:	bd70      	pop	{r4, r5, r6, pc}
 80033e8:	2303      	movs	r3, #3
 80033ea:	1cc5      	adds	r5, r0, #3
 80033ec:	439d      	bics	r5, r3
 80033ee:	42a8      	cmp	r0, r5
 80033f0:	d0f8      	beq.n	80033e4 <sbrk_aligned+0x24>
 80033f2:	1a29      	subs	r1, r5, r0
 80033f4:	0020      	movs	r0, r4
 80033f6:	f000 fb81 	bl	8003afc <_sbrk_r>
 80033fa:	3001      	adds	r0, #1
 80033fc:	d1f2      	bne.n	80033e4 <sbrk_aligned+0x24>
 80033fe:	e7ef      	b.n	80033e0 <sbrk_aligned+0x20>
 8003400:	2000061c 	.word	0x2000061c

08003404 <_malloc_r>:
 8003404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003406:	2203      	movs	r2, #3
 8003408:	1ccb      	adds	r3, r1, #3
 800340a:	4393      	bics	r3, r2
 800340c:	3308      	adds	r3, #8
 800340e:	0005      	movs	r5, r0
 8003410:	001f      	movs	r7, r3
 8003412:	2b0c      	cmp	r3, #12
 8003414:	d234      	bcs.n	8003480 <_malloc_r+0x7c>
 8003416:	270c      	movs	r7, #12
 8003418:	42b9      	cmp	r1, r7
 800341a:	d833      	bhi.n	8003484 <_malloc_r+0x80>
 800341c:	0028      	movs	r0, r5
 800341e:	f000 f871 	bl	8003504 <__malloc_lock>
 8003422:	4e37      	ldr	r6, [pc, #220]	@ (8003500 <_malloc_r+0xfc>)
 8003424:	6833      	ldr	r3, [r6, #0]
 8003426:	001c      	movs	r4, r3
 8003428:	2c00      	cmp	r4, #0
 800342a:	d12f      	bne.n	800348c <_malloc_r+0x88>
 800342c:	0039      	movs	r1, r7
 800342e:	0028      	movs	r0, r5
 8003430:	f7ff ffc6 	bl	80033c0 <sbrk_aligned>
 8003434:	0004      	movs	r4, r0
 8003436:	1c43      	adds	r3, r0, #1
 8003438:	d15f      	bne.n	80034fa <_malloc_r+0xf6>
 800343a:	6834      	ldr	r4, [r6, #0]
 800343c:	9400      	str	r4, [sp, #0]
 800343e:	9b00      	ldr	r3, [sp, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d14a      	bne.n	80034da <_malloc_r+0xd6>
 8003444:	2c00      	cmp	r4, #0
 8003446:	d052      	beq.n	80034ee <_malloc_r+0xea>
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	0028      	movs	r0, r5
 800344c:	18e3      	adds	r3, r4, r3
 800344e:	9900      	ldr	r1, [sp, #0]
 8003450:	9301      	str	r3, [sp, #4]
 8003452:	f000 fb53 	bl	8003afc <_sbrk_r>
 8003456:	9b01      	ldr	r3, [sp, #4]
 8003458:	4283      	cmp	r3, r0
 800345a:	d148      	bne.n	80034ee <_malloc_r+0xea>
 800345c:	6823      	ldr	r3, [r4, #0]
 800345e:	0028      	movs	r0, r5
 8003460:	1aff      	subs	r7, r7, r3
 8003462:	0039      	movs	r1, r7
 8003464:	f7ff ffac 	bl	80033c0 <sbrk_aligned>
 8003468:	3001      	adds	r0, #1
 800346a:	d040      	beq.n	80034ee <_malloc_r+0xea>
 800346c:	6823      	ldr	r3, [r4, #0]
 800346e:	19db      	adds	r3, r3, r7
 8003470:	6023      	str	r3, [r4, #0]
 8003472:	6833      	ldr	r3, [r6, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	2a00      	cmp	r2, #0
 8003478:	d133      	bne.n	80034e2 <_malloc_r+0xde>
 800347a:	9b00      	ldr	r3, [sp, #0]
 800347c:	6033      	str	r3, [r6, #0]
 800347e:	e019      	b.n	80034b4 <_malloc_r+0xb0>
 8003480:	2b00      	cmp	r3, #0
 8003482:	dac9      	bge.n	8003418 <_malloc_r+0x14>
 8003484:	230c      	movs	r3, #12
 8003486:	602b      	str	r3, [r5, #0]
 8003488:	2000      	movs	r0, #0
 800348a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800348c:	6821      	ldr	r1, [r4, #0]
 800348e:	1bc9      	subs	r1, r1, r7
 8003490:	d420      	bmi.n	80034d4 <_malloc_r+0xd0>
 8003492:	290b      	cmp	r1, #11
 8003494:	d90a      	bls.n	80034ac <_malloc_r+0xa8>
 8003496:	19e2      	adds	r2, r4, r7
 8003498:	6027      	str	r7, [r4, #0]
 800349a:	42a3      	cmp	r3, r4
 800349c:	d104      	bne.n	80034a8 <_malloc_r+0xa4>
 800349e:	6032      	str	r2, [r6, #0]
 80034a0:	6863      	ldr	r3, [r4, #4]
 80034a2:	6011      	str	r1, [r2, #0]
 80034a4:	6053      	str	r3, [r2, #4]
 80034a6:	e005      	b.n	80034b4 <_malloc_r+0xb0>
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	e7f9      	b.n	80034a0 <_malloc_r+0x9c>
 80034ac:	6862      	ldr	r2, [r4, #4]
 80034ae:	42a3      	cmp	r3, r4
 80034b0:	d10e      	bne.n	80034d0 <_malloc_r+0xcc>
 80034b2:	6032      	str	r2, [r6, #0]
 80034b4:	0028      	movs	r0, r5
 80034b6:	f000 f82d 	bl	8003514 <__malloc_unlock>
 80034ba:	0020      	movs	r0, r4
 80034bc:	2207      	movs	r2, #7
 80034be:	300b      	adds	r0, #11
 80034c0:	1d23      	adds	r3, r4, #4
 80034c2:	4390      	bics	r0, r2
 80034c4:	1ac2      	subs	r2, r0, r3
 80034c6:	4298      	cmp	r0, r3
 80034c8:	d0df      	beq.n	800348a <_malloc_r+0x86>
 80034ca:	1a1b      	subs	r3, r3, r0
 80034cc:	50a3      	str	r3, [r4, r2]
 80034ce:	e7dc      	b.n	800348a <_malloc_r+0x86>
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	e7ef      	b.n	80034b4 <_malloc_r+0xb0>
 80034d4:	0023      	movs	r3, r4
 80034d6:	6864      	ldr	r4, [r4, #4]
 80034d8:	e7a6      	b.n	8003428 <_malloc_r+0x24>
 80034da:	9c00      	ldr	r4, [sp, #0]
 80034dc:	6863      	ldr	r3, [r4, #4]
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	e7ad      	b.n	800343e <_malloc_r+0x3a>
 80034e2:	001a      	movs	r2, r3
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	42a3      	cmp	r3, r4
 80034e8:	d1fb      	bne.n	80034e2 <_malloc_r+0xde>
 80034ea:	2300      	movs	r3, #0
 80034ec:	e7da      	b.n	80034a4 <_malloc_r+0xa0>
 80034ee:	230c      	movs	r3, #12
 80034f0:	0028      	movs	r0, r5
 80034f2:	602b      	str	r3, [r5, #0]
 80034f4:	f000 f80e 	bl	8003514 <__malloc_unlock>
 80034f8:	e7c6      	b.n	8003488 <_malloc_r+0x84>
 80034fa:	6007      	str	r7, [r0, #0]
 80034fc:	e7da      	b.n	80034b4 <_malloc_r+0xb0>
 80034fe:	46c0      	nop			@ (mov r8, r8)
 8003500:	20000620 	.word	0x20000620

08003504 <__malloc_lock>:
 8003504:	b510      	push	{r4, lr}
 8003506:	4802      	ldr	r0, [pc, #8]	@ (8003510 <__malloc_lock+0xc>)
 8003508:	f7ff ff0e 	bl	8003328 <__retarget_lock_acquire_recursive>
 800350c:	bd10      	pop	{r4, pc}
 800350e:	46c0      	nop			@ (mov r8, r8)
 8003510:	20000618 	.word	0x20000618

08003514 <__malloc_unlock>:
 8003514:	b510      	push	{r4, lr}
 8003516:	4802      	ldr	r0, [pc, #8]	@ (8003520 <__malloc_unlock+0xc>)
 8003518:	f7ff ff07 	bl	800332a <__retarget_lock_release_recursive>
 800351c:	bd10      	pop	{r4, pc}
 800351e:	46c0      	nop			@ (mov r8, r8)
 8003520:	20000618 	.word	0x20000618

08003524 <__ssputs_r>:
 8003524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003526:	688e      	ldr	r6, [r1, #8]
 8003528:	b085      	sub	sp, #20
 800352a:	001f      	movs	r7, r3
 800352c:	000c      	movs	r4, r1
 800352e:	680b      	ldr	r3, [r1, #0]
 8003530:	9002      	str	r0, [sp, #8]
 8003532:	9203      	str	r2, [sp, #12]
 8003534:	42be      	cmp	r6, r7
 8003536:	d830      	bhi.n	800359a <__ssputs_r+0x76>
 8003538:	210c      	movs	r1, #12
 800353a:	5e62      	ldrsh	r2, [r4, r1]
 800353c:	2190      	movs	r1, #144	@ 0x90
 800353e:	00c9      	lsls	r1, r1, #3
 8003540:	420a      	tst	r2, r1
 8003542:	d028      	beq.n	8003596 <__ssputs_r+0x72>
 8003544:	2003      	movs	r0, #3
 8003546:	6921      	ldr	r1, [r4, #16]
 8003548:	1a5b      	subs	r3, r3, r1
 800354a:	9301      	str	r3, [sp, #4]
 800354c:	6963      	ldr	r3, [r4, #20]
 800354e:	4343      	muls	r3, r0
 8003550:	9801      	ldr	r0, [sp, #4]
 8003552:	0fdd      	lsrs	r5, r3, #31
 8003554:	18ed      	adds	r5, r5, r3
 8003556:	1c7b      	adds	r3, r7, #1
 8003558:	181b      	adds	r3, r3, r0
 800355a:	106d      	asrs	r5, r5, #1
 800355c:	42ab      	cmp	r3, r5
 800355e:	d900      	bls.n	8003562 <__ssputs_r+0x3e>
 8003560:	001d      	movs	r5, r3
 8003562:	0552      	lsls	r2, r2, #21
 8003564:	d528      	bpl.n	80035b8 <__ssputs_r+0x94>
 8003566:	0029      	movs	r1, r5
 8003568:	9802      	ldr	r0, [sp, #8]
 800356a:	f7ff ff4b 	bl	8003404 <_malloc_r>
 800356e:	1e06      	subs	r6, r0, #0
 8003570:	d02c      	beq.n	80035cc <__ssputs_r+0xa8>
 8003572:	9a01      	ldr	r2, [sp, #4]
 8003574:	6921      	ldr	r1, [r4, #16]
 8003576:	f000 fade 	bl	8003b36 <memcpy>
 800357a:	89a2      	ldrh	r2, [r4, #12]
 800357c:	4b18      	ldr	r3, [pc, #96]	@ (80035e0 <__ssputs_r+0xbc>)
 800357e:	401a      	ands	r2, r3
 8003580:	2380      	movs	r3, #128	@ 0x80
 8003582:	4313      	orrs	r3, r2
 8003584:	81a3      	strh	r3, [r4, #12]
 8003586:	9b01      	ldr	r3, [sp, #4]
 8003588:	6126      	str	r6, [r4, #16]
 800358a:	18f6      	adds	r6, r6, r3
 800358c:	6026      	str	r6, [r4, #0]
 800358e:	003e      	movs	r6, r7
 8003590:	6165      	str	r5, [r4, #20]
 8003592:	1aed      	subs	r5, r5, r3
 8003594:	60a5      	str	r5, [r4, #8]
 8003596:	42be      	cmp	r6, r7
 8003598:	d900      	bls.n	800359c <__ssputs_r+0x78>
 800359a:	003e      	movs	r6, r7
 800359c:	0032      	movs	r2, r6
 800359e:	9903      	ldr	r1, [sp, #12]
 80035a0:	6820      	ldr	r0, [r4, #0]
 80035a2:	f000 fa99 	bl	8003ad8 <memmove>
 80035a6:	2000      	movs	r0, #0
 80035a8:	68a3      	ldr	r3, [r4, #8]
 80035aa:	1b9b      	subs	r3, r3, r6
 80035ac:	60a3      	str	r3, [r4, #8]
 80035ae:	6823      	ldr	r3, [r4, #0]
 80035b0:	199b      	adds	r3, r3, r6
 80035b2:	6023      	str	r3, [r4, #0]
 80035b4:	b005      	add	sp, #20
 80035b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035b8:	002a      	movs	r2, r5
 80035ba:	9802      	ldr	r0, [sp, #8]
 80035bc:	f000 fac4 	bl	8003b48 <_realloc_r>
 80035c0:	1e06      	subs	r6, r0, #0
 80035c2:	d1e0      	bne.n	8003586 <__ssputs_r+0x62>
 80035c4:	6921      	ldr	r1, [r4, #16]
 80035c6:	9802      	ldr	r0, [sp, #8]
 80035c8:	f7ff feb0 	bl	800332c <_free_r>
 80035cc:	230c      	movs	r3, #12
 80035ce:	2001      	movs	r0, #1
 80035d0:	9a02      	ldr	r2, [sp, #8]
 80035d2:	4240      	negs	r0, r0
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	89a2      	ldrh	r2, [r4, #12]
 80035d8:	3334      	adds	r3, #52	@ 0x34
 80035da:	4313      	orrs	r3, r2
 80035dc:	81a3      	strh	r3, [r4, #12]
 80035de:	e7e9      	b.n	80035b4 <__ssputs_r+0x90>
 80035e0:	fffffb7f 	.word	0xfffffb7f

080035e4 <_svfiprintf_r>:
 80035e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035e6:	b0a1      	sub	sp, #132	@ 0x84
 80035e8:	9003      	str	r0, [sp, #12]
 80035ea:	001d      	movs	r5, r3
 80035ec:	898b      	ldrh	r3, [r1, #12]
 80035ee:	000f      	movs	r7, r1
 80035f0:	0016      	movs	r6, r2
 80035f2:	061b      	lsls	r3, r3, #24
 80035f4:	d511      	bpl.n	800361a <_svfiprintf_r+0x36>
 80035f6:	690b      	ldr	r3, [r1, #16]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10e      	bne.n	800361a <_svfiprintf_r+0x36>
 80035fc:	2140      	movs	r1, #64	@ 0x40
 80035fe:	f7ff ff01 	bl	8003404 <_malloc_r>
 8003602:	6038      	str	r0, [r7, #0]
 8003604:	6138      	str	r0, [r7, #16]
 8003606:	2800      	cmp	r0, #0
 8003608:	d105      	bne.n	8003616 <_svfiprintf_r+0x32>
 800360a:	230c      	movs	r3, #12
 800360c:	9a03      	ldr	r2, [sp, #12]
 800360e:	6013      	str	r3, [r2, #0]
 8003610:	2001      	movs	r0, #1
 8003612:	4240      	negs	r0, r0
 8003614:	e0cf      	b.n	80037b6 <_svfiprintf_r+0x1d2>
 8003616:	2340      	movs	r3, #64	@ 0x40
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	2300      	movs	r3, #0
 800361c:	ac08      	add	r4, sp, #32
 800361e:	6163      	str	r3, [r4, #20]
 8003620:	3320      	adds	r3, #32
 8003622:	7663      	strb	r3, [r4, #25]
 8003624:	3310      	adds	r3, #16
 8003626:	76a3      	strb	r3, [r4, #26]
 8003628:	9507      	str	r5, [sp, #28]
 800362a:	0035      	movs	r5, r6
 800362c:	782b      	ldrb	r3, [r5, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <_svfiprintf_r+0x52>
 8003632:	2b25      	cmp	r3, #37	@ 0x25
 8003634:	d148      	bne.n	80036c8 <_svfiprintf_r+0xe4>
 8003636:	1bab      	subs	r3, r5, r6
 8003638:	9305      	str	r3, [sp, #20]
 800363a:	42b5      	cmp	r5, r6
 800363c:	d00b      	beq.n	8003656 <_svfiprintf_r+0x72>
 800363e:	0032      	movs	r2, r6
 8003640:	0039      	movs	r1, r7
 8003642:	9803      	ldr	r0, [sp, #12]
 8003644:	f7ff ff6e 	bl	8003524 <__ssputs_r>
 8003648:	3001      	adds	r0, #1
 800364a:	d100      	bne.n	800364e <_svfiprintf_r+0x6a>
 800364c:	e0ae      	b.n	80037ac <_svfiprintf_r+0x1c8>
 800364e:	6963      	ldr	r3, [r4, #20]
 8003650:	9a05      	ldr	r2, [sp, #20]
 8003652:	189b      	adds	r3, r3, r2
 8003654:	6163      	str	r3, [r4, #20]
 8003656:	782b      	ldrb	r3, [r5, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d100      	bne.n	800365e <_svfiprintf_r+0x7a>
 800365c:	e0a6      	b.n	80037ac <_svfiprintf_r+0x1c8>
 800365e:	2201      	movs	r2, #1
 8003660:	2300      	movs	r3, #0
 8003662:	4252      	negs	r2, r2
 8003664:	6062      	str	r2, [r4, #4]
 8003666:	a904      	add	r1, sp, #16
 8003668:	3254      	adds	r2, #84	@ 0x54
 800366a:	1852      	adds	r2, r2, r1
 800366c:	1c6e      	adds	r6, r5, #1
 800366e:	6023      	str	r3, [r4, #0]
 8003670:	60e3      	str	r3, [r4, #12]
 8003672:	60a3      	str	r3, [r4, #8]
 8003674:	7013      	strb	r3, [r2, #0]
 8003676:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003678:	4b54      	ldr	r3, [pc, #336]	@ (80037cc <_svfiprintf_r+0x1e8>)
 800367a:	2205      	movs	r2, #5
 800367c:	0018      	movs	r0, r3
 800367e:	7831      	ldrb	r1, [r6, #0]
 8003680:	9305      	str	r3, [sp, #20]
 8003682:	f000 fa4d 	bl	8003b20 <memchr>
 8003686:	1c75      	adds	r5, r6, #1
 8003688:	2800      	cmp	r0, #0
 800368a:	d11f      	bne.n	80036cc <_svfiprintf_r+0xe8>
 800368c:	6822      	ldr	r2, [r4, #0]
 800368e:	06d3      	lsls	r3, r2, #27
 8003690:	d504      	bpl.n	800369c <_svfiprintf_r+0xb8>
 8003692:	2353      	movs	r3, #83	@ 0x53
 8003694:	a904      	add	r1, sp, #16
 8003696:	185b      	adds	r3, r3, r1
 8003698:	2120      	movs	r1, #32
 800369a:	7019      	strb	r1, [r3, #0]
 800369c:	0713      	lsls	r3, r2, #28
 800369e:	d504      	bpl.n	80036aa <_svfiprintf_r+0xc6>
 80036a0:	2353      	movs	r3, #83	@ 0x53
 80036a2:	a904      	add	r1, sp, #16
 80036a4:	185b      	adds	r3, r3, r1
 80036a6:	212b      	movs	r1, #43	@ 0x2b
 80036a8:	7019      	strb	r1, [r3, #0]
 80036aa:	7833      	ldrb	r3, [r6, #0]
 80036ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80036ae:	d016      	beq.n	80036de <_svfiprintf_r+0xfa>
 80036b0:	0035      	movs	r5, r6
 80036b2:	2100      	movs	r1, #0
 80036b4:	200a      	movs	r0, #10
 80036b6:	68e3      	ldr	r3, [r4, #12]
 80036b8:	782a      	ldrb	r2, [r5, #0]
 80036ba:	1c6e      	adds	r6, r5, #1
 80036bc:	3a30      	subs	r2, #48	@ 0x30
 80036be:	2a09      	cmp	r2, #9
 80036c0:	d950      	bls.n	8003764 <_svfiprintf_r+0x180>
 80036c2:	2900      	cmp	r1, #0
 80036c4:	d111      	bne.n	80036ea <_svfiprintf_r+0x106>
 80036c6:	e017      	b.n	80036f8 <_svfiprintf_r+0x114>
 80036c8:	3501      	adds	r5, #1
 80036ca:	e7af      	b.n	800362c <_svfiprintf_r+0x48>
 80036cc:	9b05      	ldr	r3, [sp, #20]
 80036ce:	6822      	ldr	r2, [r4, #0]
 80036d0:	1ac0      	subs	r0, r0, r3
 80036d2:	2301      	movs	r3, #1
 80036d4:	4083      	lsls	r3, r0
 80036d6:	4313      	orrs	r3, r2
 80036d8:	002e      	movs	r6, r5
 80036da:	6023      	str	r3, [r4, #0]
 80036dc:	e7cc      	b.n	8003678 <_svfiprintf_r+0x94>
 80036de:	9b07      	ldr	r3, [sp, #28]
 80036e0:	1d19      	adds	r1, r3, #4
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	9107      	str	r1, [sp, #28]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	db01      	blt.n	80036ee <_svfiprintf_r+0x10a>
 80036ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80036ec:	e004      	b.n	80036f8 <_svfiprintf_r+0x114>
 80036ee:	425b      	negs	r3, r3
 80036f0:	60e3      	str	r3, [r4, #12]
 80036f2:	2302      	movs	r3, #2
 80036f4:	4313      	orrs	r3, r2
 80036f6:	6023      	str	r3, [r4, #0]
 80036f8:	782b      	ldrb	r3, [r5, #0]
 80036fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80036fc:	d10c      	bne.n	8003718 <_svfiprintf_r+0x134>
 80036fe:	786b      	ldrb	r3, [r5, #1]
 8003700:	2b2a      	cmp	r3, #42	@ 0x2a
 8003702:	d134      	bne.n	800376e <_svfiprintf_r+0x18a>
 8003704:	9b07      	ldr	r3, [sp, #28]
 8003706:	3502      	adds	r5, #2
 8003708:	1d1a      	adds	r2, r3, #4
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	9207      	str	r2, [sp, #28]
 800370e:	2b00      	cmp	r3, #0
 8003710:	da01      	bge.n	8003716 <_svfiprintf_r+0x132>
 8003712:	2301      	movs	r3, #1
 8003714:	425b      	negs	r3, r3
 8003716:	9309      	str	r3, [sp, #36]	@ 0x24
 8003718:	4e2d      	ldr	r6, [pc, #180]	@ (80037d0 <_svfiprintf_r+0x1ec>)
 800371a:	2203      	movs	r2, #3
 800371c:	0030      	movs	r0, r6
 800371e:	7829      	ldrb	r1, [r5, #0]
 8003720:	f000 f9fe 	bl	8003b20 <memchr>
 8003724:	2800      	cmp	r0, #0
 8003726:	d006      	beq.n	8003736 <_svfiprintf_r+0x152>
 8003728:	2340      	movs	r3, #64	@ 0x40
 800372a:	1b80      	subs	r0, r0, r6
 800372c:	4083      	lsls	r3, r0
 800372e:	6822      	ldr	r2, [r4, #0]
 8003730:	3501      	adds	r5, #1
 8003732:	4313      	orrs	r3, r2
 8003734:	6023      	str	r3, [r4, #0]
 8003736:	7829      	ldrb	r1, [r5, #0]
 8003738:	2206      	movs	r2, #6
 800373a:	4826      	ldr	r0, [pc, #152]	@ (80037d4 <_svfiprintf_r+0x1f0>)
 800373c:	1c6e      	adds	r6, r5, #1
 800373e:	7621      	strb	r1, [r4, #24]
 8003740:	f000 f9ee 	bl	8003b20 <memchr>
 8003744:	2800      	cmp	r0, #0
 8003746:	d038      	beq.n	80037ba <_svfiprintf_r+0x1d6>
 8003748:	4b23      	ldr	r3, [pc, #140]	@ (80037d8 <_svfiprintf_r+0x1f4>)
 800374a:	2b00      	cmp	r3, #0
 800374c:	d122      	bne.n	8003794 <_svfiprintf_r+0x1b0>
 800374e:	2207      	movs	r2, #7
 8003750:	9b07      	ldr	r3, [sp, #28]
 8003752:	3307      	adds	r3, #7
 8003754:	4393      	bics	r3, r2
 8003756:	3308      	adds	r3, #8
 8003758:	9307      	str	r3, [sp, #28]
 800375a:	6963      	ldr	r3, [r4, #20]
 800375c:	9a04      	ldr	r2, [sp, #16]
 800375e:	189b      	adds	r3, r3, r2
 8003760:	6163      	str	r3, [r4, #20]
 8003762:	e762      	b.n	800362a <_svfiprintf_r+0x46>
 8003764:	4343      	muls	r3, r0
 8003766:	0035      	movs	r5, r6
 8003768:	2101      	movs	r1, #1
 800376a:	189b      	adds	r3, r3, r2
 800376c:	e7a4      	b.n	80036b8 <_svfiprintf_r+0xd4>
 800376e:	2300      	movs	r3, #0
 8003770:	200a      	movs	r0, #10
 8003772:	0019      	movs	r1, r3
 8003774:	3501      	adds	r5, #1
 8003776:	6063      	str	r3, [r4, #4]
 8003778:	782a      	ldrb	r2, [r5, #0]
 800377a:	1c6e      	adds	r6, r5, #1
 800377c:	3a30      	subs	r2, #48	@ 0x30
 800377e:	2a09      	cmp	r2, #9
 8003780:	d903      	bls.n	800378a <_svfiprintf_r+0x1a6>
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0c8      	beq.n	8003718 <_svfiprintf_r+0x134>
 8003786:	9109      	str	r1, [sp, #36]	@ 0x24
 8003788:	e7c6      	b.n	8003718 <_svfiprintf_r+0x134>
 800378a:	4341      	muls	r1, r0
 800378c:	0035      	movs	r5, r6
 800378e:	2301      	movs	r3, #1
 8003790:	1889      	adds	r1, r1, r2
 8003792:	e7f1      	b.n	8003778 <_svfiprintf_r+0x194>
 8003794:	aa07      	add	r2, sp, #28
 8003796:	9200      	str	r2, [sp, #0]
 8003798:	0021      	movs	r1, r4
 800379a:	003a      	movs	r2, r7
 800379c:	4b0f      	ldr	r3, [pc, #60]	@ (80037dc <_svfiprintf_r+0x1f8>)
 800379e:	9803      	ldr	r0, [sp, #12]
 80037a0:	e000      	b.n	80037a4 <_svfiprintf_r+0x1c0>
 80037a2:	bf00      	nop
 80037a4:	9004      	str	r0, [sp, #16]
 80037a6:	9b04      	ldr	r3, [sp, #16]
 80037a8:	3301      	adds	r3, #1
 80037aa:	d1d6      	bne.n	800375a <_svfiprintf_r+0x176>
 80037ac:	89bb      	ldrh	r3, [r7, #12]
 80037ae:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80037b0:	065b      	lsls	r3, r3, #25
 80037b2:	d500      	bpl.n	80037b6 <_svfiprintf_r+0x1d2>
 80037b4:	e72c      	b.n	8003610 <_svfiprintf_r+0x2c>
 80037b6:	b021      	add	sp, #132	@ 0x84
 80037b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037ba:	aa07      	add	r2, sp, #28
 80037bc:	9200      	str	r2, [sp, #0]
 80037be:	0021      	movs	r1, r4
 80037c0:	003a      	movs	r2, r7
 80037c2:	4b06      	ldr	r3, [pc, #24]	@ (80037dc <_svfiprintf_r+0x1f8>)
 80037c4:	9803      	ldr	r0, [sp, #12]
 80037c6:	f000 f87b 	bl	80038c0 <_printf_i>
 80037ca:	e7eb      	b.n	80037a4 <_svfiprintf_r+0x1c0>
 80037cc:	08003c24 	.word	0x08003c24
 80037d0:	08003c2a 	.word	0x08003c2a
 80037d4:	08003c2e 	.word	0x08003c2e
 80037d8:	00000000 	.word	0x00000000
 80037dc:	08003525 	.word	0x08003525

080037e0 <_printf_common>:
 80037e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037e2:	0016      	movs	r6, r2
 80037e4:	9301      	str	r3, [sp, #4]
 80037e6:	688a      	ldr	r2, [r1, #8]
 80037e8:	690b      	ldr	r3, [r1, #16]
 80037ea:	000c      	movs	r4, r1
 80037ec:	9000      	str	r0, [sp, #0]
 80037ee:	4293      	cmp	r3, r2
 80037f0:	da00      	bge.n	80037f4 <_printf_common+0x14>
 80037f2:	0013      	movs	r3, r2
 80037f4:	0022      	movs	r2, r4
 80037f6:	6033      	str	r3, [r6, #0]
 80037f8:	3243      	adds	r2, #67	@ 0x43
 80037fa:	7812      	ldrb	r2, [r2, #0]
 80037fc:	2a00      	cmp	r2, #0
 80037fe:	d001      	beq.n	8003804 <_printf_common+0x24>
 8003800:	3301      	adds	r3, #1
 8003802:	6033      	str	r3, [r6, #0]
 8003804:	6823      	ldr	r3, [r4, #0]
 8003806:	069b      	lsls	r3, r3, #26
 8003808:	d502      	bpl.n	8003810 <_printf_common+0x30>
 800380a:	6833      	ldr	r3, [r6, #0]
 800380c:	3302      	adds	r3, #2
 800380e:	6033      	str	r3, [r6, #0]
 8003810:	6822      	ldr	r2, [r4, #0]
 8003812:	2306      	movs	r3, #6
 8003814:	0015      	movs	r5, r2
 8003816:	401d      	ands	r5, r3
 8003818:	421a      	tst	r2, r3
 800381a:	d027      	beq.n	800386c <_printf_common+0x8c>
 800381c:	0023      	movs	r3, r4
 800381e:	3343      	adds	r3, #67	@ 0x43
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	1e5a      	subs	r2, r3, #1
 8003824:	4193      	sbcs	r3, r2
 8003826:	6822      	ldr	r2, [r4, #0]
 8003828:	0692      	lsls	r2, r2, #26
 800382a:	d430      	bmi.n	800388e <_printf_common+0xae>
 800382c:	0022      	movs	r2, r4
 800382e:	9901      	ldr	r1, [sp, #4]
 8003830:	9800      	ldr	r0, [sp, #0]
 8003832:	9d08      	ldr	r5, [sp, #32]
 8003834:	3243      	adds	r2, #67	@ 0x43
 8003836:	47a8      	blx	r5
 8003838:	3001      	adds	r0, #1
 800383a:	d025      	beq.n	8003888 <_printf_common+0xa8>
 800383c:	2206      	movs	r2, #6
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	2500      	movs	r5, #0
 8003842:	4013      	ands	r3, r2
 8003844:	2b04      	cmp	r3, #4
 8003846:	d105      	bne.n	8003854 <_printf_common+0x74>
 8003848:	6833      	ldr	r3, [r6, #0]
 800384a:	68e5      	ldr	r5, [r4, #12]
 800384c:	1aed      	subs	r5, r5, r3
 800384e:	43eb      	mvns	r3, r5
 8003850:	17db      	asrs	r3, r3, #31
 8003852:	401d      	ands	r5, r3
 8003854:	68a3      	ldr	r3, [r4, #8]
 8003856:	6922      	ldr	r2, [r4, #16]
 8003858:	4293      	cmp	r3, r2
 800385a:	dd01      	ble.n	8003860 <_printf_common+0x80>
 800385c:	1a9b      	subs	r3, r3, r2
 800385e:	18ed      	adds	r5, r5, r3
 8003860:	2600      	movs	r6, #0
 8003862:	42b5      	cmp	r5, r6
 8003864:	d120      	bne.n	80038a8 <_printf_common+0xc8>
 8003866:	2000      	movs	r0, #0
 8003868:	e010      	b.n	800388c <_printf_common+0xac>
 800386a:	3501      	adds	r5, #1
 800386c:	68e3      	ldr	r3, [r4, #12]
 800386e:	6832      	ldr	r2, [r6, #0]
 8003870:	1a9b      	subs	r3, r3, r2
 8003872:	42ab      	cmp	r3, r5
 8003874:	ddd2      	ble.n	800381c <_printf_common+0x3c>
 8003876:	0022      	movs	r2, r4
 8003878:	2301      	movs	r3, #1
 800387a:	9901      	ldr	r1, [sp, #4]
 800387c:	9800      	ldr	r0, [sp, #0]
 800387e:	9f08      	ldr	r7, [sp, #32]
 8003880:	3219      	adds	r2, #25
 8003882:	47b8      	blx	r7
 8003884:	3001      	adds	r0, #1
 8003886:	d1f0      	bne.n	800386a <_printf_common+0x8a>
 8003888:	2001      	movs	r0, #1
 800388a:	4240      	negs	r0, r0
 800388c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800388e:	2030      	movs	r0, #48	@ 0x30
 8003890:	18e1      	adds	r1, r4, r3
 8003892:	3143      	adds	r1, #67	@ 0x43
 8003894:	7008      	strb	r0, [r1, #0]
 8003896:	0021      	movs	r1, r4
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	3145      	adds	r1, #69	@ 0x45
 800389c:	7809      	ldrb	r1, [r1, #0]
 800389e:	18a2      	adds	r2, r4, r2
 80038a0:	3243      	adds	r2, #67	@ 0x43
 80038a2:	3302      	adds	r3, #2
 80038a4:	7011      	strb	r1, [r2, #0]
 80038a6:	e7c1      	b.n	800382c <_printf_common+0x4c>
 80038a8:	0022      	movs	r2, r4
 80038aa:	2301      	movs	r3, #1
 80038ac:	9901      	ldr	r1, [sp, #4]
 80038ae:	9800      	ldr	r0, [sp, #0]
 80038b0:	9f08      	ldr	r7, [sp, #32]
 80038b2:	321a      	adds	r2, #26
 80038b4:	47b8      	blx	r7
 80038b6:	3001      	adds	r0, #1
 80038b8:	d0e6      	beq.n	8003888 <_printf_common+0xa8>
 80038ba:	3601      	adds	r6, #1
 80038bc:	e7d1      	b.n	8003862 <_printf_common+0x82>
	...

080038c0 <_printf_i>:
 80038c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038c2:	b08b      	sub	sp, #44	@ 0x2c
 80038c4:	9206      	str	r2, [sp, #24]
 80038c6:	000a      	movs	r2, r1
 80038c8:	3243      	adds	r2, #67	@ 0x43
 80038ca:	9307      	str	r3, [sp, #28]
 80038cc:	9005      	str	r0, [sp, #20]
 80038ce:	9203      	str	r2, [sp, #12]
 80038d0:	7e0a      	ldrb	r2, [r1, #24]
 80038d2:	000c      	movs	r4, r1
 80038d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80038d6:	2a78      	cmp	r2, #120	@ 0x78
 80038d8:	d809      	bhi.n	80038ee <_printf_i+0x2e>
 80038da:	2a62      	cmp	r2, #98	@ 0x62
 80038dc:	d80b      	bhi.n	80038f6 <_printf_i+0x36>
 80038de:	2a00      	cmp	r2, #0
 80038e0:	d100      	bne.n	80038e4 <_printf_i+0x24>
 80038e2:	e0ba      	b.n	8003a5a <_printf_i+0x19a>
 80038e4:	497a      	ldr	r1, [pc, #488]	@ (8003ad0 <_printf_i+0x210>)
 80038e6:	9104      	str	r1, [sp, #16]
 80038e8:	2a58      	cmp	r2, #88	@ 0x58
 80038ea:	d100      	bne.n	80038ee <_printf_i+0x2e>
 80038ec:	e08e      	b.n	8003a0c <_printf_i+0x14c>
 80038ee:	0025      	movs	r5, r4
 80038f0:	3542      	adds	r5, #66	@ 0x42
 80038f2:	702a      	strb	r2, [r5, #0]
 80038f4:	e022      	b.n	800393c <_printf_i+0x7c>
 80038f6:	0010      	movs	r0, r2
 80038f8:	3863      	subs	r0, #99	@ 0x63
 80038fa:	2815      	cmp	r0, #21
 80038fc:	d8f7      	bhi.n	80038ee <_printf_i+0x2e>
 80038fe:	f7fc fc0b 	bl	8000118 <__gnu_thumb1_case_shi>
 8003902:	0016      	.short	0x0016
 8003904:	fff6001f 	.word	0xfff6001f
 8003908:	fff6fff6 	.word	0xfff6fff6
 800390c:	001ffff6 	.word	0x001ffff6
 8003910:	fff6fff6 	.word	0xfff6fff6
 8003914:	fff6fff6 	.word	0xfff6fff6
 8003918:	0036009f 	.word	0x0036009f
 800391c:	fff6007e 	.word	0xfff6007e
 8003920:	00b0fff6 	.word	0x00b0fff6
 8003924:	0036fff6 	.word	0x0036fff6
 8003928:	fff6fff6 	.word	0xfff6fff6
 800392c:	0082      	.short	0x0082
 800392e:	0025      	movs	r5, r4
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	3542      	adds	r5, #66	@ 0x42
 8003934:	1d11      	adds	r1, r2, #4
 8003936:	6019      	str	r1, [r3, #0]
 8003938:	6813      	ldr	r3, [r2, #0]
 800393a:	702b      	strb	r3, [r5, #0]
 800393c:	2301      	movs	r3, #1
 800393e:	e09e      	b.n	8003a7e <_printf_i+0x1be>
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	6809      	ldr	r1, [r1, #0]
 8003944:	1d02      	adds	r2, r0, #4
 8003946:	060d      	lsls	r5, r1, #24
 8003948:	d50b      	bpl.n	8003962 <_printf_i+0xa2>
 800394a:	6806      	ldr	r6, [r0, #0]
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	2e00      	cmp	r6, #0
 8003950:	da03      	bge.n	800395a <_printf_i+0x9a>
 8003952:	232d      	movs	r3, #45	@ 0x2d
 8003954:	9a03      	ldr	r2, [sp, #12]
 8003956:	4276      	negs	r6, r6
 8003958:	7013      	strb	r3, [r2, #0]
 800395a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ad0 <_printf_i+0x210>)
 800395c:	270a      	movs	r7, #10
 800395e:	9304      	str	r3, [sp, #16]
 8003960:	e018      	b.n	8003994 <_printf_i+0xd4>
 8003962:	6806      	ldr	r6, [r0, #0]
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	0649      	lsls	r1, r1, #25
 8003968:	d5f1      	bpl.n	800394e <_printf_i+0x8e>
 800396a:	b236      	sxth	r6, r6
 800396c:	e7ef      	b.n	800394e <_printf_i+0x8e>
 800396e:	6808      	ldr	r0, [r1, #0]
 8003970:	6819      	ldr	r1, [r3, #0]
 8003972:	c940      	ldmia	r1!, {r6}
 8003974:	0605      	lsls	r5, r0, #24
 8003976:	d402      	bmi.n	800397e <_printf_i+0xbe>
 8003978:	0640      	lsls	r0, r0, #25
 800397a:	d500      	bpl.n	800397e <_printf_i+0xbe>
 800397c:	b2b6      	uxth	r6, r6
 800397e:	6019      	str	r1, [r3, #0]
 8003980:	4b53      	ldr	r3, [pc, #332]	@ (8003ad0 <_printf_i+0x210>)
 8003982:	270a      	movs	r7, #10
 8003984:	9304      	str	r3, [sp, #16]
 8003986:	2a6f      	cmp	r2, #111	@ 0x6f
 8003988:	d100      	bne.n	800398c <_printf_i+0xcc>
 800398a:	3f02      	subs	r7, #2
 800398c:	0023      	movs	r3, r4
 800398e:	2200      	movs	r2, #0
 8003990:	3343      	adds	r3, #67	@ 0x43
 8003992:	701a      	strb	r2, [r3, #0]
 8003994:	6863      	ldr	r3, [r4, #4]
 8003996:	60a3      	str	r3, [r4, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	db06      	blt.n	80039aa <_printf_i+0xea>
 800399c:	2104      	movs	r1, #4
 800399e:	6822      	ldr	r2, [r4, #0]
 80039a0:	9d03      	ldr	r5, [sp, #12]
 80039a2:	438a      	bics	r2, r1
 80039a4:	6022      	str	r2, [r4, #0]
 80039a6:	4333      	orrs	r3, r6
 80039a8:	d00c      	beq.n	80039c4 <_printf_i+0x104>
 80039aa:	9d03      	ldr	r5, [sp, #12]
 80039ac:	0030      	movs	r0, r6
 80039ae:	0039      	movs	r1, r7
 80039b0:	f7fc fc42 	bl	8000238 <__aeabi_uidivmod>
 80039b4:	9b04      	ldr	r3, [sp, #16]
 80039b6:	3d01      	subs	r5, #1
 80039b8:	5c5b      	ldrb	r3, [r3, r1]
 80039ba:	702b      	strb	r3, [r5, #0]
 80039bc:	0033      	movs	r3, r6
 80039be:	0006      	movs	r6, r0
 80039c0:	429f      	cmp	r7, r3
 80039c2:	d9f3      	bls.n	80039ac <_printf_i+0xec>
 80039c4:	2f08      	cmp	r7, #8
 80039c6:	d109      	bne.n	80039dc <_printf_i+0x11c>
 80039c8:	6823      	ldr	r3, [r4, #0]
 80039ca:	07db      	lsls	r3, r3, #31
 80039cc:	d506      	bpl.n	80039dc <_printf_i+0x11c>
 80039ce:	6862      	ldr	r2, [r4, #4]
 80039d0:	6923      	ldr	r3, [r4, #16]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	dc02      	bgt.n	80039dc <_printf_i+0x11c>
 80039d6:	2330      	movs	r3, #48	@ 0x30
 80039d8:	3d01      	subs	r5, #1
 80039da:	702b      	strb	r3, [r5, #0]
 80039dc:	9b03      	ldr	r3, [sp, #12]
 80039de:	1b5b      	subs	r3, r3, r5
 80039e0:	6123      	str	r3, [r4, #16]
 80039e2:	9b07      	ldr	r3, [sp, #28]
 80039e4:	0021      	movs	r1, r4
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	9805      	ldr	r0, [sp, #20]
 80039ea:	9b06      	ldr	r3, [sp, #24]
 80039ec:	aa09      	add	r2, sp, #36	@ 0x24
 80039ee:	f7ff fef7 	bl	80037e0 <_printf_common>
 80039f2:	3001      	adds	r0, #1
 80039f4:	d148      	bne.n	8003a88 <_printf_i+0x1c8>
 80039f6:	2001      	movs	r0, #1
 80039f8:	4240      	negs	r0, r0
 80039fa:	b00b      	add	sp, #44	@ 0x2c
 80039fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039fe:	2220      	movs	r2, #32
 8003a00:	6809      	ldr	r1, [r1, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	6022      	str	r2, [r4, #0]
 8003a06:	2278      	movs	r2, #120	@ 0x78
 8003a08:	4932      	ldr	r1, [pc, #200]	@ (8003ad4 <_printf_i+0x214>)
 8003a0a:	9104      	str	r1, [sp, #16]
 8003a0c:	0021      	movs	r1, r4
 8003a0e:	3145      	adds	r1, #69	@ 0x45
 8003a10:	700a      	strb	r2, [r1, #0]
 8003a12:	6819      	ldr	r1, [r3, #0]
 8003a14:	6822      	ldr	r2, [r4, #0]
 8003a16:	c940      	ldmia	r1!, {r6}
 8003a18:	0610      	lsls	r0, r2, #24
 8003a1a:	d402      	bmi.n	8003a22 <_printf_i+0x162>
 8003a1c:	0650      	lsls	r0, r2, #25
 8003a1e:	d500      	bpl.n	8003a22 <_printf_i+0x162>
 8003a20:	b2b6      	uxth	r6, r6
 8003a22:	6019      	str	r1, [r3, #0]
 8003a24:	07d3      	lsls	r3, r2, #31
 8003a26:	d502      	bpl.n	8003a2e <_printf_i+0x16e>
 8003a28:	2320      	movs	r3, #32
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	6023      	str	r3, [r4, #0]
 8003a2e:	2e00      	cmp	r6, #0
 8003a30:	d001      	beq.n	8003a36 <_printf_i+0x176>
 8003a32:	2710      	movs	r7, #16
 8003a34:	e7aa      	b.n	800398c <_printf_i+0xcc>
 8003a36:	2220      	movs	r2, #32
 8003a38:	6823      	ldr	r3, [r4, #0]
 8003a3a:	4393      	bics	r3, r2
 8003a3c:	6023      	str	r3, [r4, #0]
 8003a3e:	e7f8      	b.n	8003a32 <_printf_i+0x172>
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	680d      	ldr	r5, [r1, #0]
 8003a44:	1d10      	adds	r0, r2, #4
 8003a46:	6949      	ldr	r1, [r1, #20]
 8003a48:	6018      	str	r0, [r3, #0]
 8003a4a:	6813      	ldr	r3, [r2, #0]
 8003a4c:	062e      	lsls	r6, r5, #24
 8003a4e:	d501      	bpl.n	8003a54 <_printf_i+0x194>
 8003a50:	6019      	str	r1, [r3, #0]
 8003a52:	e002      	b.n	8003a5a <_printf_i+0x19a>
 8003a54:	066d      	lsls	r5, r5, #25
 8003a56:	d5fb      	bpl.n	8003a50 <_printf_i+0x190>
 8003a58:	8019      	strh	r1, [r3, #0]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	9d03      	ldr	r5, [sp, #12]
 8003a5e:	6123      	str	r3, [r4, #16]
 8003a60:	e7bf      	b.n	80039e2 <_printf_i+0x122>
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	1d11      	adds	r1, r2, #4
 8003a66:	6019      	str	r1, [r3, #0]
 8003a68:	6815      	ldr	r5, [r2, #0]
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	0028      	movs	r0, r5
 8003a6e:	6862      	ldr	r2, [r4, #4]
 8003a70:	f000 f856 	bl	8003b20 <memchr>
 8003a74:	2800      	cmp	r0, #0
 8003a76:	d001      	beq.n	8003a7c <_printf_i+0x1bc>
 8003a78:	1b40      	subs	r0, r0, r5
 8003a7a:	6060      	str	r0, [r4, #4]
 8003a7c:	6863      	ldr	r3, [r4, #4]
 8003a7e:	6123      	str	r3, [r4, #16]
 8003a80:	2300      	movs	r3, #0
 8003a82:	9a03      	ldr	r2, [sp, #12]
 8003a84:	7013      	strb	r3, [r2, #0]
 8003a86:	e7ac      	b.n	80039e2 <_printf_i+0x122>
 8003a88:	002a      	movs	r2, r5
 8003a8a:	6923      	ldr	r3, [r4, #16]
 8003a8c:	9906      	ldr	r1, [sp, #24]
 8003a8e:	9805      	ldr	r0, [sp, #20]
 8003a90:	9d07      	ldr	r5, [sp, #28]
 8003a92:	47a8      	blx	r5
 8003a94:	3001      	adds	r0, #1
 8003a96:	d0ae      	beq.n	80039f6 <_printf_i+0x136>
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	079b      	lsls	r3, r3, #30
 8003a9c:	d415      	bmi.n	8003aca <_printf_i+0x20a>
 8003a9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003aa0:	68e0      	ldr	r0, [r4, #12]
 8003aa2:	4298      	cmp	r0, r3
 8003aa4:	daa9      	bge.n	80039fa <_printf_i+0x13a>
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	e7a7      	b.n	80039fa <_printf_i+0x13a>
 8003aaa:	0022      	movs	r2, r4
 8003aac:	2301      	movs	r3, #1
 8003aae:	9906      	ldr	r1, [sp, #24]
 8003ab0:	9805      	ldr	r0, [sp, #20]
 8003ab2:	9e07      	ldr	r6, [sp, #28]
 8003ab4:	3219      	adds	r2, #25
 8003ab6:	47b0      	blx	r6
 8003ab8:	3001      	adds	r0, #1
 8003aba:	d09c      	beq.n	80039f6 <_printf_i+0x136>
 8003abc:	3501      	adds	r5, #1
 8003abe:	68e3      	ldr	r3, [r4, #12]
 8003ac0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	42ab      	cmp	r3, r5
 8003ac6:	dcf0      	bgt.n	8003aaa <_printf_i+0x1ea>
 8003ac8:	e7e9      	b.n	8003a9e <_printf_i+0x1de>
 8003aca:	2500      	movs	r5, #0
 8003acc:	e7f7      	b.n	8003abe <_printf_i+0x1fe>
 8003ace:	46c0      	nop			@ (mov r8, r8)
 8003ad0:	08003c35 	.word	0x08003c35
 8003ad4:	08003c46 	.word	0x08003c46

08003ad8 <memmove>:
 8003ad8:	b510      	push	{r4, lr}
 8003ada:	4288      	cmp	r0, r1
 8003adc:	d902      	bls.n	8003ae4 <memmove+0xc>
 8003ade:	188b      	adds	r3, r1, r2
 8003ae0:	4298      	cmp	r0, r3
 8003ae2:	d308      	bcc.n	8003af6 <memmove+0x1e>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d007      	beq.n	8003afa <memmove+0x22>
 8003aea:	5ccc      	ldrb	r4, [r1, r3]
 8003aec:	54c4      	strb	r4, [r0, r3]
 8003aee:	3301      	adds	r3, #1
 8003af0:	e7f9      	b.n	8003ae6 <memmove+0xe>
 8003af2:	5c8b      	ldrb	r3, [r1, r2]
 8003af4:	5483      	strb	r3, [r0, r2]
 8003af6:	3a01      	subs	r2, #1
 8003af8:	d2fb      	bcs.n	8003af2 <memmove+0x1a>
 8003afa:	bd10      	pop	{r4, pc}

08003afc <_sbrk_r>:
 8003afc:	2300      	movs	r3, #0
 8003afe:	b570      	push	{r4, r5, r6, lr}
 8003b00:	4d06      	ldr	r5, [pc, #24]	@ (8003b1c <_sbrk_r+0x20>)
 8003b02:	0004      	movs	r4, r0
 8003b04:	0008      	movs	r0, r1
 8003b06:	602b      	str	r3, [r5, #0]
 8003b08:	f7fc fef6 	bl	80008f8 <_sbrk>
 8003b0c:	1c43      	adds	r3, r0, #1
 8003b0e:	d103      	bne.n	8003b18 <_sbrk_r+0x1c>
 8003b10:	682b      	ldr	r3, [r5, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d000      	beq.n	8003b18 <_sbrk_r+0x1c>
 8003b16:	6023      	str	r3, [r4, #0]
 8003b18:	bd70      	pop	{r4, r5, r6, pc}
 8003b1a:	46c0      	nop			@ (mov r8, r8)
 8003b1c:	20000614 	.word	0x20000614

08003b20 <memchr>:
 8003b20:	b2c9      	uxtb	r1, r1
 8003b22:	1882      	adds	r2, r0, r2
 8003b24:	4290      	cmp	r0, r2
 8003b26:	d101      	bne.n	8003b2c <memchr+0xc>
 8003b28:	2000      	movs	r0, #0
 8003b2a:	4770      	bx	lr
 8003b2c:	7803      	ldrb	r3, [r0, #0]
 8003b2e:	428b      	cmp	r3, r1
 8003b30:	d0fb      	beq.n	8003b2a <memchr+0xa>
 8003b32:	3001      	adds	r0, #1
 8003b34:	e7f6      	b.n	8003b24 <memchr+0x4>

08003b36 <memcpy>:
 8003b36:	2300      	movs	r3, #0
 8003b38:	b510      	push	{r4, lr}
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d100      	bne.n	8003b40 <memcpy+0xa>
 8003b3e:	bd10      	pop	{r4, pc}
 8003b40:	5ccc      	ldrb	r4, [r1, r3]
 8003b42:	54c4      	strb	r4, [r0, r3]
 8003b44:	3301      	adds	r3, #1
 8003b46:	e7f8      	b.n	8003b3a <memcpy+0x4>

08003b48 <_realloc_r>:
 8003b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b4a:	0006      	movs	r6, r0
 8003b4c:	000c      	movs	r4, r1
 8003b4e:	0015      	movs	r5, r2
 8003b50:	2900      	cmp	r1, #0
 8003b52:	d105      	bne.n	8003b60 <_realloc_r+0x18>
 8003b54:	0011      	movs	r1, r2
 8003b56:	f7ff fc55 	bl	8003404 <_malloc_r>
 8003b5a:	0004      	movs	r4, r0
 8003b5c:	0020      	movs	r0, r4
 8003b5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b60:	2a00      	cmp	r2, #0
 8003b62:	d103      	bne.n	8003b6c <_realloc_r+0x24>
 8003b64:	f7ff fbe2 	bl	800332c <_free_r>
 8003b68:	002c      	movs	r4, r5
 8003b6a:	e7f7      	b.n	8003b5c <_realloc_r+0x14>
 8003b6c:	f000 f81c 	bl	8003ba8 <_malloc_usable_size_r>
 8003b70:	0007      	movs	r7, r0
 8003b72:	4285      	cmp	r5, r0
 8003b74:	d802      	bhi.n	8003b7c <_realloc_r+0x34>
 8003b76:	0843      	lsrs	r3, r0, #1
 8003b78:	42ab      	cmp	r3, r5
 8003b7a:	d3ef      	bcc.n	8003b5c <_realloc_r+0x14>
 8003b7c:	0029      	movs	r1, r5
 8003b7e:	0030      	movs	r0, r6
 8003b80:	f7ff fc40 	bl	8003404 <_malloc_r>
 8003b84:	9001      	str	r0, [sp, #4]
 8003b86:	2800      	cmp	r0, #0
 8003b88:	d101      	bne.n	8003b8e <_realloc_r+0x46>
 8003b8a:	9c01      	ldr	r4, [sp, #4]
 8003b8c:	e7e6      	b.n	8003b5c <_realloc_r+0x14>
 8003b8e:	002a      	movs	r2, r5
 8003b90:	42bd      	cmp	r5, r7
 8003b92:	d900      	bls.n	8003b96 <_realloc_r+0x4e>
 8003b94:	003a      	movs	r2, r7
 8003b96:	0021      	movs	r1, r4
 8003b98:	9801      	ldr	r0, [sp, #4]
 8003b9a:	f7ff ffcc 	bl	8003b36 <memcpy>
 8003b9e:	0021      	movs	r1, r4
 8003ba0:	0030      	movs	r0, r6
 8003ba2:	f7ff fbc3 	bl	800332c <_free_r>
 8003ba6:	e7f0      	b.n	8003b8a <_realloc_r+0x42>

08003ba8 <_malloc_usable_size_r>:
 8003ba8:	1f0b      	subs	r3, r1, #4
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	1f18      	subs	r0, r3, #4
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	da01      	bge.n	8003bb6 <_malloc_usable_size_r+0xe>
 8003bb2:	580b      	ldr	r3, [r1, r0]
 8003bb4:	18c0      	adds	r0, r0, r3
 8003bb6:	4770      	bx	lr

08003bb8 <_init>:
 8003bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bba:	46c0      	nop			@ (mov r8, r8)
 8003bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bbe:	bc08      	pop	{r3}
 8003bc0:	469e      	mov	lr, r3
 8003bc2:	4770      	bx	lr

08003bc4 <_fini>:
 8003bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc6:	46c0      	nop			@ (mov r8, r8)
 8003bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bca:	bc08      	pop	{r3}
 8003bcc:	469e      	mov	lr, r3
 8003bce:	4770      	bx	lr
